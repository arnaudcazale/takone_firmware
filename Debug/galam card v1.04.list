
galam card v1.04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d074  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800d12c  0800d12c  0001d12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2c0  0800d2c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800d2c0  0800d2c0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d2c0  0800d2c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2c0  0800d2c0  0001d2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2c4  0800d2c4  0001d2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800d2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc0  20000010  0800d2d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fd0  0800d2d8  00020fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001617a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e50  00000000  00000000  000361b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001320  00000000  00000000  00039008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  0003a328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f21  00000000  00000000  0003b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000104d3  00000000  00000000  000523f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ef19  00000000  00000000  000628c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f17dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ec  00000000  00000000  000f1858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800d114 	.word	0x0800d114

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	0800d114 	.word	0x0800d114

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	1c08      	adds	r0, r1, #0
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fb6d 	bl	8000ad4 <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 faef 	bl	80009e8 <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fb5f 	bl	8000ad4 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb55 	bl	8000ad4 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fafd 	bl	8000a38 <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 faf3 	bl	8000a38 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_f2uiz>:
 8000460:	219e      	movs	r1, #158	; 0x9e
 8000462:	b510      	push	{r4, lr}
 8000464:	05c9      	lsls	r1, r1, #23
 8000466:	1c04      	adds	r4, r0, #0
 8000468:	f7ff fff0 	bl	800044c <__aeabi_fcmpge>
 800046c:	2800      	cmp	r0, #0
 800046e:	d103      	bne.n	8000478 <__aeabi_f2uiz+0x18>
 8000470:	1c20      	adds	r0, r4, #0
 8000472:	f000 fe75 	bl	8001160 <__aeabi_f2iz>
 8000476:	bd10      	pop	{r4, pc}
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	1c20      	adds	r0, r4, #0
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	f000 fcab 	bl	8000dd8 <__aeabi_fsub>
 8000482:	f000 fe6d 	bl	8001160 <__aeabi_f2iz>
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	061b      	lsls	r3, r3, #24
 800048a:	469c      	mov	ip, r3
 800048c:	4460      	add	r0, ip
 800048e:	e7f2      	b.n	8000476 <__aeabi_f2uiz+0x16>

08000490 <__aeabi_fadd>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	4647      	mov	r7, r8
 8000494:	46ce      	mov	lr, r9
 8000496:	0243      	lsls	r3, r0, #9
 8000498:	0a5b      	lsrs	r3, r3, #9
 800049a:	0044      	lsls	r4, r0, #1
 800049c:	0fc2      	lsrs	r2, r0, #31
 800049e:	469c      	mov	ip, r3
 80004a0:	0048      	lsls	r0, r1, #1
 80004a2:	00dd      	lsls	r5, r3, #3
 80004a4:	024b      	lsls	r3, r1, #9
 80004a6:	0e24      	lsrs	r4, r4, #24
 80004a8:	0a5b      	lsrs	r3, r3, #9
 80004aa:	0e00      	lsrs	r0, r0, #24
 80004ac:	b580      	push	{r7, lr}
 80004ae:	4698      	mov	r8, r3
 80004b0:	0026      	movs	r6, r4
 80004b2:	4691      	mov	r9, r2
 80004b4:	0fc9      	lsrs	r1, r1, #31
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	1a27      	subs	r7, r4, r0
 80004ba:	428a      	cmp	r2, r1
 80004bc:	d029      	beq.n	8000512 <__aeabi_fadd+0x82>
 80004be:	2f00      	cmp	r7, #0
 80004c0:	dd15      	ble.n	80004ee <__aeabi_fadd+0x5e>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d14a      	bne.n	800055c <__aeabi_fadd+0xcc>
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d000      	beq.n	80004cc <__aeabi_fadd+0x3c>
 80004ca:	e095      	b.n	80005f8 <__aeabi_fadd+0x168>
 80004cc:	08ed      	lsrs	r5, r5, #3
 80004ce:	2cff      	cmp	r4, #255	; 0xff
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fadd+0x44>
 80004d2:	e088      	b.n	80005e6 <__aeabi_fadd+0x156>
 80004d4:	026b      	lsls	r3, r5, #9
 80004d6:	0a5b      	lsrs	r3, r3, #9
 80004d8:	b2e6      	uxtb	r6, r4
 80004da:	025b      	lsls	r3, r3, #9
 80004dc:	05f6      	lsls	r6, r6, #23
 80004de:	0a58      	lsrs	r0, r3, #9
 80004e0:	4330      	orrs	r0, r6
 80004e2:	07d2      	lsls	r2, r2, #31
 80004e4:	4310      	orrs	r0, r2
 80004e6:	bc0c      	pop	{r2, r3}
 80004e8:	4690      	mov	r8, r2
 80004ea:	4699      	mov	r9, r3
 80004ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004ee:	2f00      	cmp	r7, #0
 80004f0:	d000      	beq.n	80004f4 <__aeabi_fadd+0x64>
 80004f2:	e087      	b.n	8000604 <__aeabi_fadd+0x174>
 80004f4:	1c60      	adds	r0, r4, #1
 80004f6:	b2c0      	uxtb	r0, r0
 80004f8:	2801      	cmp	r0, #1
 80004fa:	dc00      	bgt.n	80004fe <__aeabi_fadd+0x6e>
 80004fc:	e0b6      	b.n	800066c <__aeabi_fadd+0x1dc>
 80004fe:	1aee      	subs	r6, r5, r3
 8000500:	0172      	lsls	r2, r6, #5
 8000502:	d500      	bpl.n	8000506 <__aeabi_fadd+0x76>
 8000504:	e0c5      	b.n	8000692 <__aeabi_fadd+0x202>
 8000506:	2e00      	cmp	r6, #0
 8000508:	d13d      	bne.n	8000586 <__aeabi_fadd+0xf6>
 800050a:	2200      	movs	r2, #0
 800050c:	2600      	movs	r6, #0
 800050e:	2300      	movs	r3, #0
 8000510:	e7e3      	b.n	80004da <__aeabi_fadd+0x4a>
 8000512:	2f00      	cmp	r7, #0
 8000514:	dc00      	bgt.n	8000518 <__aeabi_fadd+0x88>
 8000516:	e096      	b.n	8000646 <__aeabi_fadd+0x1b6>
 8000518:	2800      	cmp	r0, #0
 800051a:	d05d      	beq.n	80005d8 <__aeabi_fadd+0x148>
 800051c:	2cff      	cmp	r4, #255	; 0xff
 800051e:	d060      	beq.n	80005e2 <__aeabi_fadd+0x152>
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	04d2      	lsls	r2, r2, #19
 8000524:	4313      	orrs	r3, r2
 8000526:	2f1b      	cmp	r7, #27
 8000528:	dd00      	ble.n	800052c <__aeabi_fadd+0x9c>
 800052a:	e0ec      	b.n	8000706 <__aeabi_fadd+0x276>
 800052c:	2220      	movs	r2, #32
 800052e:	1bd2      	subs	r2, r2, r7
 8000530:	0018      	movs	r0, r3
 8000532:	4093      	lsls	r3, r2
 8000534:	40f8      	lsrs	r0, r7
 8000536:	1e5a      	subs	r2, r3, #1
 8000538:	4193      	sbcs	r3, r2
 800053a:	4303      	orrs	r3, r0
 800053c:	18ed      	adds	r5, r5, r3
 800053e:	016b      	lsls	r3, r5, #5
 8000540:	d57b      	bpl.n	800063a <__aeabi_fadd+0x1aa>
 8000542:	3401      	adds	r4, #1
 8000544:	2cff      	cmp	r4, #255	; 0xff
 8000546:	d100      	bne.n	800054a <__aeabi_fadd+0xba>
 8000548:	e0b7      	b.n	80006ba <__aeabi_fadd+0x22a>
 800054a:	2201      	movs	r2, #1
 800054c:	2607      	movs	r6, #7
 800054e:	402a      	ands	r2, r5
 8000550:	086b      	lsrs	r3, r5, #1
 8000552:	4d9a      	ldr	r5, [pc, #616]	; (80007bc <__aeabi_fadd+0x32c>)
 8000554:	401d      	ands	r5, r3
 8000556:	4315      	orrs	r5, r2
 8000558:	402e      	ands	r6, r5
 800055a:	e029      	b.n	80005b0 <__aeabi_fadd+0x120>
 800055c:	2cff      	cmp	r4, #255	; 0xff
 800055e:	d0b5      	beq.n	80004cc <__aeabi_fadd+0x3c>
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	04d2      	lsls	r2, r2, #19
 8000564:	4313      	orrs	r3, r2
 8000566:	2f1b      	cmp	r7, #27
 8000568:	dd00      	ble.n	800056c <__aeabi_fadd+0xdc>
 800056a:	e0b2      	b.n	80006d2 <__aeabi_fadd+0x242>
 800056c:	2220      	movs	r2, #32
 800056e:	1bd2      	subs	r2, r2, r7
 8000570:	0019      	movs	r1, r3
 8000572:	4093      	lsls	r3, r2
 8000574:	40f9      	lsrs	r1, r7
 8000576:	1e5a      	subs	r2, r3, #1
 8000578:	4193      	sbcs	r3, r2
 800057a:	430b      	orrs	r3, r1
 800057c:	1aed      	subs	r5, r5, r3
 800057e:	016b      	lsls	r3, r5, #5
 8000580:	d55b      	bpl.n	800063a <__aeabi_fadd+0x1aa>
 8000582:	01ad      	lsls	r5, r5, #6
 8000584:	09ae      	lsrs	r6, r5, #6
 8000586:	0030      	movs	r0, r6
 8000588:	f000 fe94 	bl	80012b4 <__clzsi2>
 800058c:	3805      	subs	r0, #5
 800058e:	4086      	lsls	r6, r0
 8000590:	4284      	cmp	r4, r0
 8000592:	dc65      	bgt.n	8000660 <__aeabi_fadd+0x1d0>
 8000594:	1b04      	subs	r4, r0, r4
 8000596:	0033      	movs	r3, r6
 8000598:	2020      	movs	r0, #32
 800059a:	3401      	adds	r4, #1
 800059c:	40e3      	lsrs	r3, r4
 800059e:	1b04      	subs	r4, r0, r4
 80005a0:	40a6      	lsls	r6, r4
 80005a2:	1e75      	subs	r5, r6, #1
 80005a4:	41ae      	sbcs	r6, r5
 80005a6:	4333      	orrs	r3, r6
 80005a8:	2607      	movs	r6, #7
 80005aa:	001d      	movs	r5, r3
 80005ac:	2400      	movs	r4, #0
 80005ae:	401e      	ands	r6, r3
 80005b0:	2201      	movs	r2, #1
 80005b2:	464b      	mov	r3, r9
 80005b4:	401a      	ands	r2, r3
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d004      	beq.n	80005c4 <__aeabi_fadd+0x134>
 80005ba:	230f      	movs	r3, #15
 80005bc:	402b      	ands	r3, r5
 80005be:	2b04      	cmp	r3, #4
 80005c0:	d000      	beq.n	80005c4 <__aeabi_fadd+0x134>
 80005c2:	3504      	adds	r5, #4
 80005c4:	016b      	lsls	r3, r5, #5
 80005c6:	d400      	bmi.n	80005ca <__aeabi_fadd+0x13a>
 80005c8:	e780      	b.n	80004cc <__aeabi_fadd+0x3c>
 80005ca:	3401      	adds	r4, #1
 80005cc:	b2e6      	uxtb	r6, r4
 80005ce:	2cff      	cmp	r4, #255	; 0xff
 80005d0:	d12f      	bne.n	8000632 <__aeabi_fadd+0x1a2>
 80005d2:	26ff      	movs	r6, #255	; 0xff
 80005d4:	2300      	movs	r3, #0
 80005d6:	e780      	b.n	80004da <__aeabi_fadd+0x4a>
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d152      	bne.n	8000682 <__aeabi_fadd+0x1f2>
 80005dc:	2cff      	cmp	r4, #255	; 0xff
 80005de:	d000      	beq.n	80005e2 <__aeabi_fadd+0x152>
 80005e0:	e774      	b.n	80004cc <__aeabi_fadd+0x3c>
 80005e2:	000a      	movs	r2, r1
 80005e4:	08ed      	lsrs	r5, r5, #3
 80005e6:	2d00      	cmp	r5, #0
 80005e8:	d0f3      	beq.n	80005d2 <__aeabi_fadd+0x142>
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	03db      	lsls	r3, r3, #15
 80005ee:	432b      	orrs	r3, r5
 80005f0:	025b      	lsls	r3, r3, #9
 80005f2:	0a5b      	lsrs	r3, r3, #9
 80005f4:	26ff      	movs	r6, #255	; 0xff
 80005f6:	e770      	b.n	80004da <__aeabi_fadd+0x4a>
 80005f8:	3f01      	subs	r7, #1
 80005fa:	2f00      	cmp	r7, #0
 80005fc:	d0be      	beq.n	800057c <__aeabi_fadd+0xec>
 80005fe:	2cff      	cmp	r4, #255	; 0xff
 8000600:	d1b1      	bne.n	8000566 <__aeabi_fadd+0xd6>
 8000602:	e763      	b.n	80004cc <__aeabi_fadd+0x3c>
 8000604:	2c00      	cmp	r4, #0
 8000606:	d047      	beq.n	8000698 <__aeabi_fadd+0x208>
 8000608:	28ff      	cmp	r0, #255	; 0xff
 800060a:	d069      	beq.n	80006e0 <__aeabi_fadd+0x250>
 800060c:	2480      	movs	r4, #128	; 0x80
 800060e:	04e4      	lsls	r4, r4, #19
 8000610:	427a      	negs	r2, r7
 8000612:	4325      	orrs	r5, r4
 8000614:	2a1b      	cmp	r2, #27
 8000616:	dd00      	ble.n	800061a <__aeabi_fadd+0x18a>
 8000618:	e0c5      	b.n	80007a6 <__aeabi_fadd+0x316>
 800061a:	002c      	movs	r4, r5
 800061c:	2620      	movs	r6, #32
 800061e:	40d4      	lsrs	r4, r2
 8000620:	1ab2      	subs	r2, r6, r2
 8000622:	4095      	lsls	r5, r2
 8000624:	1e6a      	subs	r2, r5, #1
 8000626:	4195      	sbcs	r5, r2
 8000628:	4325      	orrs	r5, r4
 800062a:	1b5d      	subs	r5, r3, r5
 800062c:	0004      	movs	r4, r0
 800062e:	4689      	mov	r9, r1
 8000630:	e7a5      	b.n	800057e <__aeabi_fadd+0xee>
 8000632:	01ab      	lsls	r3, r5, #6
 8000634:	0a5b      	lsrs	r3, r3, #9
 8000636:	e750      	b.n	80004da <__aeabi_fadd+0x4a>
 8000638:	2400      	movs	r4, #0
 800063a:	2201      	movs	r2, #1
 800063c:	464b      	mov	r3, r9
 800063e:	401a      	ands	r2, r3
 8000640:	076b      	lsls	r3, r5, #29
 8000642:	d1ba      	bne.n	80005ba <__aeabi_fadd+0x12a>
 8000644:	e742      	b.n	80004cc <__aeabi_fadd+0x3c>
 8000646:	2f00      	cmp	r7, #0
 8000648:	d13b      	bne.n	80006c2 <__aeabi_fadd+0x232>
 800064a:	3401      	adds	r4, #1
 800064c:	b2e0      	uxtb	r0, r4
 800064e:	2801      	cmp	r0, #1
 8000650:	dd4a      	ble.n	80006e8 <__aeabi_fadd+0x258>
 8000652:	2cff      	cmp	r4, #255	; 0xff
 8000654:	d0bd      	beq.n	80005d2 <__aeabi_fadd+0x142>
 8000656:	2607      	movs	r6, #7
 8000658:	18ed      	adds	r5, r5, r3
 800065a:	086d      	lsrs	r5, r5, #1
 800065c:	402e      	ands	r6, r5
 800065e:	e7a7      	b.n	80005b0 <__aeabi_fadd+0x120>
 8000660:	2307      	movs	r3, #7
 8000662:	4d57      	ldr	r5, [pc, #348]	; (80007c0 <__aeabi_fadd+0x330>)
 8000664:	1a24      	subs	r4, r4, r0
 8000666:	4035      	ands	r5, r6
 8000668:	401e      	ands	r6, r3
 800066a:	e7a1      	b.n	80005b0 <__aeabi_fadd+0x120>
 800066c:	2c00      	cmp	r4, #0
 800066e:	d11b      	bne.n	80006a8 <__aeabi_fadd+0x218>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d16e      	bne.n	8000752 <__aeabi_fadd+0x2c2>
 8000674:	2b00      	cmp	r3, #0
 8000676:	d100      	bne.n	800067a <__aeabi_fadd+0x1ea>
 8000678:	e09a      	b.n	80007b0 <__aeabi_fadd+0x320>
 800067a:	000a      	movs	r2, r1
 800067c:	001d      	movs	r5, r3
 800067e:	003c      	movs	r4, r7
 8000680:	e724      	b.n	80004cc <__aeabi_fadd+0x3c>
 8000682:	3f01      	subs	r7, #1
 8000684:	2f00      	cmp	r7, #0
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x1fa>
 8000688:	e758      	b.n	800053c <__aeabi_fadd+0xac>
 800068a:	2cff      	cmp	r4, #255	; 0xff
 800068c:	d000      	beq.n	8000690 <__aeabi_fadd+0x200>
 800068e:	e74a      	b.n	8000526 <__aeabi_fadd+0x96>
 8000690:	e7a7      	b.n	80005e2 <__aeabi_fadd+0x152>
 8000692:	1b5e      	subs	r6, r3, r5
 8000694:	4689      	mov	r9, r1
 8000696:	e776      	b.n	8000586 <__aeabi_fadd+0xf6>
 8000698:	2d00      	cmp	r5, #0
 800069a:	d11c      	bne.n	80006d6 <__aeabi_fadd+0x246>
 800069c:	000a      	movs	r2, r1
 800069e:	28ff      	cmp	r0, #255	; 0xff
 80006a0:	d01f      	beq.n	80006e2 <__aeabi_fadd+0x252>
 80006a2:	0004      	movs	r4, r0
 80006a4:	001d      	movs	r5, r3
 80006a6:	e711      	b.n	80004cc <__aeabi_fadd+0x3c>
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d15d      	bne.n	8000768 <__aeabi_fadd+0x2d8>
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d117      	bne.n	80006e0 <__aeabi_fadd+0x250>
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	2200      	movs	r2, #0
 80006b4:	03db      	lsls	r3, r3, #15
 80006b6:	26ff      	movs	r6, #255	; 0xff
 80006b8:	e70f      	b.n	80004da <__aeabi_fadd+0x4a>
 80006ba:	000a      	movs	r2, r1
 80006bc:	26ff      	movs	r6, #255	; 0xff
 80006be:	2300      	movs	r3, #0
 80006c0:	e70b      	b.n	80004da <__aeabi_fadd+0x4a>
 80006c2:	2c00      	cmp	r4, #0
 80006c4:	d121      	bne.n	800070a <__aeabi_fadd+0x27a>
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	d166      	bne.n	8000798 <__aeabi_fadd+0x308>
 80006ca:	28ff      	cmp	r0, #255	; 0xff
 80006cc:	d1e9      	bne.n	80006a2 <__aeabi_fadd+0x212>
 80006ce:	001d      	movs	r5, r3
 80006d0:	e787      	b.n	80005e2 <__aeabi_fadd+0x152>
 80006d2:	2301      	movs	r3, #1
 80006d4:	e752      	b.n	800057c <__aeabi_fadd+0xec>
 80006d6:	1c7a      	adds	r2, r7, #1
 80006d8:	d0a7      	beq.n	800062a <__aeabi_fadd+0x19a>
 80006da:	43fa      	mvns	r2, r7
 80006dc:	28ff      	cmp	r0, #255	; 0xff
 80006de:	d199      	bne.n	8000614 <__aeabi_fadd+0x184>
 80006e0:	000a      	movs	r2, r1
 80006e2:	001d      	movs	r5, r3
 80006e4:	24ff      	movs	r4, #255	; 0xff
 80006e6:	e6f1      	b.n	80004cc <__aeabi_fadd+0x3c>
 80006e8:	2e00      	cmp	r6, #0
 80006ea:	d121      	bne.n	8000730 <__aeabi_fadd+0x2a0>
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d04f      	beq.n	8000790 <__aeabi_fadd+0x300>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d04c      	beq.n	800078e <__aeabi_fadd+0x2fe>
 80006f4:	18ed      	adds	r5, r5, r3
 80006f6:	016b      	lsls	r3, r5, #5
 80006f8:	d59e      	bpl.n	8000638 <__aeabi_fadd+0x1a8>
 80006fa:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <__aeabi_fadd+0x330>)
 80006fc:	3607      	adds	r6, #7
 80006fe:	402e      	ands	r6, r5
 8000700:	2401      	movs	r4, #1
 8000702:	401d      	ands	r5, r3
 8000704:	e754      	b.n	80005b0 <__aeabi_fadd+0x120>
 8000706:	2301      	movs	r3, #1
 8000708:	e718      	b.n	800053c <__aeabi_fadd+0xac>
 800070a:	28ff      	cmp	r0, #255	; 0xff
 800070c:	d0df      	beq.n	80006ce <__aeabi_fadd+0x23e>
 800070e:	2480      	movs	r4, #128	; 0x80
 8000710:	04e4      	lsls	r4, r4, #19
 8000712:	427f      	negs	r7, r7
 8000714:	4325      	orrs	r5, r4
 8000716:	2f1b      	cmp	r7, #27
 8000718:	dc4d      	bgt.n	80007b6 <__aeabi_fadd+0x326>
 800071a:	2620      	movs	r6, #32
 800071c:	1bf6      	subs	r6, r6, r7
 800071e:	002c      	movs	r4, r5
 8000720:	40b5      	lsls	r5, r6
 8000722:	40fc      	lsrs	r4, r7
 8000724:	1e6a      	subs	r2, r5, #1
 8000726:	4195      	sbcs	r5, r2
 8000728:	4325      	orrs	r5, r4
 800072a:	18ed      	adds	r5, r5, r3
 800072c:	0004      	movs	r4, r0
 800072e:	e706      	b.n	800053e <__aeabi_fadd+0xae>
 8000730:	2d00      	cmp	r5, #0
 8000732:	d0cc      	beq.n	80006ce <__aeabi_fadd+0x23e>
 8000734:	2b00      	cmp	r3, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x2aa>
 8000738:	e753      	b.n	80005e2 <__aeabi_fadd+0x152>
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	4660      	mov	r0, ip
 800073e:	03c9      	lsls	r1, r1, #15
 8000740:	4208      	tst	r0, r1
 8000742:	d003      	beq.n	800074c <__aeabi_fadd+0x2bc>
 8000744:	4640      	mov	r0, r8
 8000746:	4208      	tst	r0, r1
 8000748:	d100      	bne.n	800074c <__aeabi_fadd+0x2bc>
 800074a:	001d      	movs	r5, r3
 800074c:	2101      	movs	r1, #1
 800074e:	4011      	ands	r1, r2
 8000750:	e747      	b.n	80005e2 <__aeabi_fadd+0x152>
 8000752:	2b00      	cmp	r3, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_fadd+0x2c8>
 8000756:	e6b9      	b.n	80004cc <__aeabi_fadd+0x3c>
 8000758:	1aea      	subs	r2, r5, r3
 800075a:	0150      	lsls	r0, r2, #5
 800075c:	d525      	bpl.n	80007aa <__aeabi_fadd+0x31a>
 800075e:	2607      	movs	r6, #7
 8000760:	1b5d      	subs	r5, r3, r5
 8000762:	402e      	ands	r6, r5
 8000764:	4689      	mov	r9, r1
 8000766:	e723      	b.n	80005b0 <__aeabi_fadd+0x120>
 8000768:	24ff      	movs	r4, #255	; 0xff
 800076a:	2b00      	cmp	r3, #0
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x2e0>
 800076e:	e6ad      	b.n	80004cc <__aeabi_fadd+0x3c>
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	4660      	mov	r0, ip
 8000774:	03d2      	lsls	r2, r2, #15
 8000776:	4210      	tst	r0, r2
 8000778:	d004      	beq.n	8000784 <__aeabi_fadd+0x2f4>
 800077a:	4640      	mov	r0, r8
 800077c:	4210      	tst	r0, r2
 800077e:	d101      	bne.n	8000784 <__aeabi_fadd+0x2f4>
 8000780:	001d      	movs	r5, r3
 8000782:	4689      	mov	r9, r1
 8000784:	2201      	movs	r2, #1
 8000786:	464b      	mov	r3, r9
 8000788:	24ff      	movs	r4, #255	; 0xff
 800078a:	401a      	ands	r2, r3
 800078c:	e69e      	b.n	80004cc <__aeabi_fadd+0x3c>
 800078e:	002b      	movs	r3, r5
 8000790:	08dd      	lsrs	r5, r3, #3
 8000792:	000a      	movs	r2, r1
 8000794:	2400      	movs	r4, #0
 8000796:	e69d      	b.n	80004d4 <__aeabi_fadd+0x44>
 8000798:	1c7a      	adds	r2, r7, #1
 800079a:	d0c6      	beq.n	800072a <__aeabi_fadd+0x29a>
 800079c:	43ff      	mvns	r7, r7
 800079e:	28ff      	cmp	r0, #255	; 0xff
 80007a0:	d1b9      	bne.n	8000716 <__aeabi_fadd+0x286>
 80007a2:	001d      	movs	r5, r3
 80007a4:	e71d      	b.n	80005e2 <__aeabi_fadd+0x152>
 80007a6:	2501      	movs	r5, #1
 80007a8:	e73f      	b.n	800062a <__aeabi_fadd+0x19a>
 80007aa:	1e15      	subs	r5, r2, #0
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x320>
 80007ae:	e744      	b.n	800063a <__aeabi_fadd+0x1aa>
 80007b0:	2200      	movs	r2, #0
 80007b2:	2300      	movs	r3, #0
 80007b4:	e691      	b.n	80004da <__aeabi_fadd+0x4a>
 80007b6:	2501      	movs	r5, #1
 80007b8:	e7b7      	b.n	800072a <__aeabi_fadd+0x29a>
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	7dffffff 	.word	0x7dffffff
 80007c0:	fbffffff 	.word	0xfbffffff

080007c4 <__aeabi_fdiv>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	4657      	mov	r7, sl
 80007c8:	464e      	mov	r6, r9
 80007ca:	4645      	mov	r5, r8
 80007cc:	46de      	mov	lr, fp
 80007ce:	0244      	lsls	r4, r0, #9
 80007d0:	b5e0      	push	{r5, r6, r7, lr}
 80007d2:	0046      	lsls	r6, r0, #1
 80007d4:	4688      	mov	r8, r1
 80007d6:	0a64      	lsrs	r4, r4, #9
 80007d8:	0e36      	lsrs	r6, r6, #24
 80007da:	0fc7      	lsrs	r7, r0, #31
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d063      	beq.n	80008a8 <__aeabi_fdiv+0xe4>
 80007e0:	2eff      	cmp	r6, #255	; 0xff
 80007e2:	d024      	beq.n	800082e <__aeabi_fdiv+0x6a>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	00e4      	lsls	r4, r4, #3
 80007e8:	04db      	lsls	r3, r3, #19
 80007ea:	431c      	orrs	r4, r3
 80007ec:	2300      	movs	r3, #0
 80007ee:	4699      	mov	r9, r3
 80007f0:	469b      	mov	fp, r3
 80007f2:	3e7f      	subs	r6, #127	; 0x7f
 80007f4:	4643      	mov	r3, r8
 80007f6:	4642      	mov	r2, r8
 80007f8:	025d      	lsls	r5, r3, #9
 80007fa:	0fd2      	lsrs	r2, r2, #31
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	0a6d      	lsrs	r5, r5, #9
 8000800:	0e1b      	lsrs	r3, r3, #24
 8000802:	4690      	mov	r8, r2
 8000804:	4692      	mov	sl, r2
 8000806:	d065      	beq.n	80008d4 <__aeabi_fdiv+0x110>
 8000808:	2bff      	cmp	r3, #255	; 0xff
 800080a:	d055      	beq.n	80008b8 <__aeabi_fdiv+0xf4>
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	2100      	movs	r1, #0
 8000810:	00ed      	lsls	r5, r5, #3
 8000812:	04d2      	lsls	r2, r2, #19
 8000814:	3b7f      	subs	r3, #127	; 0x7f
 8000816:	4315      	orrs	r5, r2
 8000818:	1af6      	subs	r6, r6, r3
 800081a:	4643      	mov	r3, r8
 800081c:	464a      	mov	r2, r9
 800081e:	407b      	eors	r3, r7
 8000820:	2a0f      	cmp	r2, #15
 8000822:	d900      	bls.n	8000826 <__aeabi_fdiv+0x62>
 8000824:	e08d      	b.n	8000942 <__aeabi_fdiv+0x17e>
 8000826:	486d      	ldr	r0, [pc, #436]	; (80009dc <__aeabi_fdiv+0x218>)
 8000828:	0092      	lsls	r2, r2, #2
 800082a:	5882      	ldr	r2, [r0, r2]
 800082c:	4697      	mov	pc, r2
 800082e:	2c00      	cmp	r4, #0
 8000830:	d154      	bne.n	80008dc <__aeabi_fdiv+0x118>
 8000832:	2308      	movs	r3, #8
 8000834:	4699      	mov	r9, r3
 8000836:	3b06      	subs	r3, #6
 8000838:	26ff      	movs	r6, #255	; 0xff
 800083a:	469b      	mov	fp, r3
 800083c:	e7da      	b.n	80007f4 <__aeabi_fdiv+0x30>
 800083e:	2500      	movs	r5, #0
 8000840:	4653      	mov	r3, sl
 8000842:	2902      	cmp	r1, #2
 8000844:	d01b      	beq.n	800087e <__aeabi_fdiv+0xba>
 8000846:	2903      	cmp	r1, #3
 8000848:	d100      	bne.n	800084c <__aeabi_fdiv+0x88>
 800084a:	e0bf      	b.n	80009cc <__aeabi_fdiv+0x208>
 800084c:	2901      	cmp	r1, #1
 800084e:	d028      	beq.n	80008a2 <__aeabi_fdiv+0xde>
 8000850:	0030      	movs	r0, r6
 8000852:	307f      	adds	r0, #127	; 0x7f
 8000854:	2800      	cmp	r0, #0
 8000856:	dd20      	ble.n	800089a <__aeabi_fdiv+0xd6>
 8000858:	076a      	lsls	r2, r5, #29
 800085a:	d004      	beq.n	8000866 <__aeabi_fdiv+0xa2>
 800085c:	220f      	movs	r2, #15
 800085e:	402a      	ands	r2, r5
 8000860:	2a04      	cmp	r2, #4
 8000862:	d000      	beq.n	8000866 <__aeabi_fdiv+0xa2>
 8000864:	3504      	adds	r5, #4
 8000866:	012a      	lsls	r2, r5, #4
 8000868:	d503      	bpl.n	8000872 <__aeabi_fdiv+0xae>
 800086a:	0030      	movs	r0, r6
 800086c:	4a5c      	ldr	r2, [pc, #368]	; (80009e0 <__aeabi_fdiv+0x21c>)
 800086e:	3080      	adds	r0, #128	; 0x80
 8000870:	4015      	ands	r5, r2
 8000872:	28fe      	cmp	r0, #254	; 0xfe
 8000874:	dc03      	bgt.n	800087e <__aeabi_fdiv+0xba>
 8000876:	01ac      	lsls	r4, r5, #6
 8000878:	0a64      	lsrs	r4, r4, #9
 800087a:	b2c2      	uxtb	r2, r0
 800087c:	e001      	b.n	8000882 <__aeabi_fdiv+0xbe>
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	2400      	movs	r4, #0
 8000882:	0264      	lsls	r4, r4, #9
 8000884:	05d2      	lsls	r2, r2, #23
 8000886:	0a60      	lsrs	r0, r4, #9
 8000888:	07db      	lsls	r3, r3, #31
 800088a:	4310      	orrs	r0, r2
 800088c:	4318      	orrs	r0, r3
 800088e:	bc3c      	pop	{r2, r3, r4, r5}
 8000890:	4690      	mov	r8, r2
 8000892:	4699      	mov	r9, r3
 8000894:	46a2      	mov	sl, r4
 8000896:	46ab      	mov	fp, r5
 8000898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800089a:	2201      	movs	r2, #1
 800089c:	1a10      	subs	r0, r2, r0
 800089e:	281b      	cmp	r0, #27
 80008a0:	dd7c      	ble.n	800099c <__aeabi_fdiv+0x1d8>
 80008a2:	2200      	movs	r2, #0
 80008a4:	2400      	movs	r4, #0
 80008a6:	e7ec      	b.n	8000882 <__aeabi_fdiv+0xbe>
 80008a8:	2c00      	cmp	r4, #0
 80008aa:	d11d      	bne.n	80008e8 <__aeabi_fdiv+0x124>
 80008ac:	2304      	movs	r3, #4
 80008ae:	4699      	mov	r9, r3
 80008b0:	3b03      	subs	r3, #3
 80008b2:	2600      	movs	r6, #0
 80008b4:	469b      	mov	fp, r3
 80008b6:	e79d      	b.n	80007f4 <__aeabi_fdiv+0x30>
 80008b8:	3eff      	subs	r6, #255	; 0xff
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d120      	bne.n	8000900 <__aeabi_fdiv+0x13c>
 80008be:	2102      	movs	r1, #2
 80008c0:	4643      	mov	r3, r8
 80008c2:	464a      	mov	r2, r9
 80008c4:	407b      	eors	r3, r7
 80008c6:	430a      	orrs	r2, r1
 80008c8:	2a0f      	cmp	r2, #15
 80008ca:	d8d8      	bhi.n	800087e <__aeabi_fdiv+0xba>
 80008cc:	4845      	ldr	r0, [pc, #276]	; (80009e4 <__aeabi_fdiv+0x220>)
 80008ce:	0092      	lsls	r2, r2, #2
 80008d0:	5882      	ldr	r2, [r0, r2]
 80008d2:	4697      	mov	pc, r2
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d119      	bne.n	800090c <__aeabi_fdiv+0x148>
 80008d8:	2101      	movs	r1, #1
 80008da:	e7f1      	b.n	80008c0 <__aeabi_fdiv+0xfc>
 80008dc:	230c      	movs	r3, #12
 80008de:	4699      	mov	r9, r3
 80008e0:	3b09      	subs	r3, #9
 80008e2:	26ff      	movs	r6, #255	; 0xff
 80008e4:	469b      	mov	fp, r3
 80008e6:	e785      	b.n	80007f4 <__aeabi_fdiv+0x30>
 80008e8:	0020      	movs	r0, r4
 80008ea:	f000 fce3 	bl	80012b4 <__clzsi2>
 80008ee:	2676      	movs	r6, #118	; 0x76
 80008f0:	1f43      	subs	r3, r0, #5
 80008f2:	409c      	lsls	r4, r3
 80008f4:	2300      	movs	r3, #0
 80008f6:	4276      	negs	r6, r6
 80008f8:	1a36      	subs	r6, r6, r0
 80008fa:	4699      	mov	r9, r3
 80008fc:	469b      	mov	fp, r3
 80008fe:	e779      	b.n	80007f4 <__aeabi_fdiv+0x30>
 8000900:	464a      	mov	r2, r9
 8000902:	2303      	movs	r3, #3
 8000904:	431a      	orrs	r2, r3
 8000906:	4691      	mov	r9, r2
 8000908:	2103      	movs	r1, #3
 800090a:	e786      	b.n	800081a <__aeabi_fdiv+0x56>
 800090c:	0028      	movs	r0, r5
 800090e:	f000 fcd1 	bl	80012b4 <__clzsi2>
 8000912:	1f43      	subs	r3, r0, #5
 8000914:	1836      	adds	r6, r6, r0
 8000916:	409d      	lsls	r5, r3
 8000918:	3676      	adds	r6, #118	; 0x76
 800091a:	2100      	movs	r1, #0
 800091c:	e77d      	b.n	800081a <__aeabi_fdiv+0x56>
 800091e:	2480      	movs	r4, #128	; 0x80
 8000920:	2300      	movs	r3, #0
 8000922:	03e4      	lsls	r4, r4, #15
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	e7ac      	b.n	8000882 <__aeabi_fdiv+0xbe>
 8000928:	2500      	movs	r5, #0
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	03db      	lsls	r3, r3, #15
 800092e:	421c      	tst	r4, r3
 8000930:	d028      	beq.n	8000984 <__aeabi_fdiv+0x1c0>
 8000932:	421d      	tst	r5, r3
 8000934:	d126      	bne.n	8000984 <__aeabi_fdiv+0x1c0>
 8000936:	432b      	orrs	r3, r5
 8000938:	025c      	lsls	r4, r3, #9
 800093a:	0a64      	lsrs	r4, r4, #9
 800093c:	4643      	mov	r3, r8
 800093e:	22ff      	movs	r2, #255	; 0xff
 8000940:	e79f      	b.n	8000882 <__aeabi_fdiv+0xbe>
 8000942:	0162      	lsls	r2, r4, #5
 8000944:	016c      	lsls	r4, r5, #5
 8000946:	42a2      	cmp	r2, r4
 8000948:	d224      	bcs.n	8000994 <__aeabi_fdiv+0x1d0>
 800094a:	211b      	movs	r1, #27
 800094c:	2500      	movs	r5, #0
 800094e:	3e01      	subs	r6, #1
 8000950:	2701      	movs	r7, #1
 8000952:	0010      	movs	r0, r2
 8000954:	006d      	lsls	r5, r5, #1
 8000956:	0052      	lsls	r2, r2, #1
 8000958:	2800      	cmp	r0, #0
 800095a:	db01      	blt.n	8000960 <__aeabi_fdiv+0x19c>
 800095c:	4294      	cmp	r4, r2
 800095e:	d801      	bhi.n	8000964 <__aeabi_fdiv+0x1a0>
 8000960:	1b12      	subs	r2, r2, r4
 8000962:	433d      	orrs	r5, r7
 8000964:	3901      	subs	r1, #1
 8000966:	2900      	cmp	r1, #0
 8000968:	d1f3      	bne.n	8000952 <__aeabi_fdiv+0x18e>
 800096a:	0014      	movs	r4, r2
 800096c:	1e62      	subs	r2, r4, #1
 800096e:	4194      	sbcs	r4, r2
 8000970:	4325      	orrs	r5, r4
 8000972:	e76d      	b.n	8000850 <__aeabi_fdiv+0x8c>
 8000974:	46ba      	mov	sl, r7
 8000976:	4659      	mov	r1, fp
 8000978:	0025      	movs	r5, r4
 800097a:	4653      	mov	r3, sl
 800097c:	2902      	cmp	r1, #2
 800097e:	d000      	beq.n	8000982 <__aeabi_fdiv+0x1be>
 8000980:	e761      	b.n	8000846 <__aeabi_fdiv+0x82>
 8000982:	e77c      	b.n	800087e <__aeabi_fdiv+0xba>
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	03db      	lsls	r3, r3, #15
 8000988:	431c      	orrs	r4, r3
 800098a:	0264      	lsls	r4, r4, #9
 800098c:	0a64      	lsrs	r4, r4, #9
 800098e:	003b      	movs	r3, r7
 8000990:	22ff      	movs	r2, #255	; 0xff
 8000992:	e776      	b.n	8000882 <__aeabi_fdiv+0xbe>
 8000994:	1b12      	subs	r2, r2, r4
 8000996:	211a      	movs	r1, #26
 8000998:	2501      	movs	r5, #1
 800099a:	e7d9      	b.n	8000950 <__aeabi_fdiv+0x18c>
 800099c:	369e      	adds	r6, #158	; 0x9e
 800099e:	002a      	movs	r2, r5
 80009a0:	40b5      	lsls	r5, r6
 80009a2:	002c      	movs	r4, r5
 80009a4:	40c2      	lsrs	r2, r0
 80009a6:	1e65      	subs	r5, r4, #1
 80009a8:	41ac      	sbcs	r4, r5
 80009aa:	4314      	orrs	r4, r2
 80009ac:	0762      	lsls	r2, r4, #29
 80009ae:	d004      	beq.n	80009ba <__aeabi_fdiv+0x1f6>
 80009b0:	220f      	movs	r2, #15
 80009b2:	4022      	ands	r2, r4
 80009b4:	2a04      	cmp	r2, #4
 80009b6:	d000      	beq.n	80009ba <__aeabi_fdiv+0x1f6>
 80009b8:	3404      	adds	r4, #4
 80009ba:	0162      	lsls	r2, r4, #5
 80009bc:	d403      	bmi.n	80009c6 <__aeabi_fdiv+0x202>
 80009be:	01a4      	lsls	r4, r4, #6
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	2200      	movs	r2, #0
 80009c4:	e75d      	b.n	8000882 <__aeabi_fdiv+0xbe>
 80009c6:	2201      	movs	r2, #1
 80009c8:	2400      	movs	r4, #0
 80009ca:	e75a      	b.n	8000882 <__aeabi_fdiv+0xbe>
 80009cc:	2480      	movs	r4, #128	; 0x80
 80009ce:	03e4      	lsls	r4, r4, #15
 80009d0:	432c      	orrs	r4, r5
 80009d2:	0264      	lsls	r4, r4, #9
 80009d4:	0a64      	lsrs	r4, r4, #9
 80009d6:	22ff      	movs	r2, #255	; 0xff
 80009d8:	e753      	b.n	8000882 <__aeabi_fdiv+0xbe>
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	0800d14c 	.word	0x0800d14c
 80009e0:	f7ffffff 	.word	0xf7ffffff
 80009e4:	0800d18c 	.word	0x0800d18c

080009e8 <__eqsf2>:
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	0042      	lsls	r2, r0, #1
 80009ec:	024e      	lsls	r6, r1, #9
 80009ee:	004c      	lsls	r4, r1, #1
 80009f0:	0245      	lsls	r5, r0, #9
 80009f2:	0a6d      	lsrs	r5, r5, #9
 80009f4:	0e12      	lsrs	r2, r2, #24
 80009f6:	0fc3      	lsrs	r3, r0, #31
 80009f8:	0a76      	lsrs	r6, r6, #9
 80009fa:	0e24      	lsrs	r4, r4, #24
 80009fc:	0fc9      	lsrs	r1, r1, #31
 80009fe:	2aff      	cmp	r2, #255	; 0xff
 8000a00:	d00f      	beq.n	8000a22 <__eqsf2+0x3a>
 8000a02:	2cff      	cmp	r4, #255	; 0xff
 8000a04:	d011      	beq.n	8000a2a <__eqsf2+0x42>
 8000a06:	2001      	movs	r0, #1
 8000a08:	42a2      	cmp	r2, r4
 8000a0a:	d000      	beq.n	8000a0e <__eqsf2+0x26>
 8000a0c:	bd70      	pop	{r4, r5, r6, pc}
 8000a0e:	42b5      	cmp	r5, r6
 8000a10:	d1fc      	bne.n	8000a0c <__eqsf2+0x24>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d00d      	beq.n	8000a32 <__eqsf2+0x4a>
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	d1f8      	bne.n	8000a0c <__eqsf2+0x24>
 8000a1a:	0028      	movs	r0, r5
 8000a1c:	1e45      	subs	r5, r0, #1
 8000a1e:	41a8      	sbcs	r0, r5
 8000a20:	e7f4      	b.n	8000a0c <__eqsf2+0x24>
 8000a22:	2001      	movs	r0, #1
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	d1f1      	bne.n	8000a0c <__eqsf2+0x24>
 8000a28:	e7eb      	b.n	8000a02 <__eqsf2+0x1a>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	2e00      	cmp	r6, #0
 8000a2e:	d1ed      	bne.n	8000a0c <__eqsf2+0x24>
 8000a30:	e7e9      	b.n	8000a06 <__eqsf2+0x1e>
 8000a32:	2000      	movs	r0, #0
 8000a34:	e7ea      	b.n	8000a0c <__eqsf2+0x24>
 8000a36:	46c0      	nop			; (mov r8, r8)

08000a38 <__gesf2>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	004a      	lsls	r2, r1, #1
 8000a3c:	024e      	lsls	r6, r1, #9
 8000a3e:	0245      	lsls	r5, r0, #9
 8000a40:	0044      	lsls	r4, r0, #1
 8000a42:	0a6d      	lsrs	r5, r5, #9
 8000a44:	0e24      	lsrs	r4, r4, #24
 8000a46:	0fc3      	lsrs	r3, r0, #31
 8000a48:	0a76      	lsrs	r6, r6, #9
 8000a4a:	0e12      	lsrs	r2, r2, #24
 8000a4c:	0fc9      	lsrs	r1, r1, #31
 8000a4e:	2cff      	cmp	r4, #255	; 0xff
 8000a50:	d015      	beq.n	8000a7e <__gesf2+0x46>
 8000a52:	2aff      	cmp	r2, #255	; 0xff
 8000a54:	d00e      	beq.n	8000a74 <__gesf2+0x3c>
 8000a56:	2c00      	cmp	r4, #0
 8000a58:	d115      	bne.n	8000a86 <__gesf2+0x4e>
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d101      	bne.n	8000a62 <__gesf2+0x2a>
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	d01c      	beq.n	8000a9c <__gesf2+0x64>
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d014      	beq.n	8000a90 <__gesf2+0x58>
 8000a66:	428b      	cmp	r3, r1
 8000a68:	d027      	beq.n	8000aba <__gesf2+0x82>
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4018      	ands	r0, r3
 8000a70:	3801      	subs	r0, #1
 8000a72:	bd70      	pop	{r4, r5, r6, pc}
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d0ee      	beq.n	8000a56 <__gesf2+0x1e>
 8000a78:	2002      	movs	r0, #2
 8000a7a:	4240      	negs	r0, r0
 8000a7c:	e7f9      	b.n	8000a72 <__gesf2+0x3a>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d1fa      	bne.n	8000a78 <__gesf2+0x40>
 8000a82:	2aff      	cmp	r2, #255	; 0xff
 8000a84:	d00e      	beq.n	8000aa4 <__gesf2+0x6c>
 8000a86:	2a00      	cmp	r2, #0
 8000a88:	d10e      	bne.n	8000aa8 <__gesf2+0x70>
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d0ed      	beq.n	8000a6a <__gesf2+0x32>
 8000a8e:	e00b      	b.n	8000aa8 <__gesf2+0x70>
 8000a90:	2301      	movs	r3, #1
 8000a92:	3901      	subs	r1, #1
 8000a94:	4399      	bics	r1, r3
 8000a96:	0008      	movs	r0, r1
 8000a98:	3001      	adds	r0, #1
 8000a9a:	e7ea      	b.n	8000a72 <__gesf2+0x3a>
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d0e7      	beq.n	8000a72 <__gesf2+0x3a>
 8000aa2:	e7e2      	b.n	8000a6a <__gesf2+0x32>
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d1e7      	bne.n	8000a78 <__gesf2+0x40>
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	d1de      	bne.n	8000a6a <__gesf2+0x32>
 8000aac:	4294      	cmp	r4, r2
 8000aae:	dd05      	ble.n	8000abc <__gesf2+0x84>
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	1e58      	subs	r0, r3, #1
 8000ab4:	4008      	ands	r0, r1
 8000ab6:	3801      	subs	r0, #1
 8000ab8:	e7db      	b.n	8000a72 <__gesf2+0x3a>
 8000aba:	2400      	movs	r4, #0
 8000abc:	42a2      	cmp	r2, r4
 8000abe:	dc04      	bgt.n	8000aca <__gesf2+0x92>
 8000ac0:	42b5      	cmp	r5, r6
 8000ac2:	d8d2      	bhi.n	8000a6a <__gesf2+0x32>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	42b5      	cmp	r5, r6
 8000ac8:	d2d3      	bcs.n	8000a72 <__gesf2+0x3a>
 8000aca:	1e58      	subs	r0, r3, #1
 8000acc:	2301      	movs	r3, #1
 8000ace:	4398      	bics	r0, r3
 8000ad0:	3001      	adds	r0, #1
 8000ad2:	e7ce      	b.n	8000a72 <__gesf2+0x3a>

08000ad4 <__lesf2>:
 8000ad4:	b530      	push	{r4, r5, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	024d      	lsls	r5, r1, #9
 8000adc:	0fc3      	lsrs	r3, r0, #31
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0a6d      	lsrs	r5, r5, #9
 8000ae6:	0e00      	lsrs	r0, r0, #24
 8000ae8:	0fc9      	lsrs	r1, r1, #31
 8000aea:	2aff      	cmp	r2, #255	; 0xff
 8000aec:	d012      	beq.n	8000b14 <__lesf2+0x40>
 8000aee:	28ff      	cmp	r0, #255	; 0xff
 8000af0:	d00c      	beq.n	8000b0c <__lesf2+0x38>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d112      	bne.n	8000b1c <__lesf2+0x48>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d119      	bne.n	8000b2e <__lesf2+0x5a>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d117      	bne.n	8000b2e <__lesf2+0x5a>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d02b      	beq.n	8000b5a <__lesf2+0x86>
 8000b02:	2002      	movs	r0, #2
 8000b04:	3b01      	subs	r3, #1
 8000b06:	4018      	ands	r0, r3
 8000b08:	3801      	subs	r0, #1
 8000b0a:	e026      	b.n	8000b5a <__lesf2+0x86>
 8000b0c:	2d00      	cmp	r5, #0
 8000b0e:	d0f0      	beq.n	8000af2 <__lesf2+0x1e>
 8000b10:	2002      	movs	r0, #2
 8000b12:	e022      	b.n	8000b5a <__lesf2+0x86>
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d1fb      	bne.n	8000b10 <__lesf2+0x3c>
 8000b18:	28ff      	cmp	r0, #255	; 0xff
 8000b1a:	d01f      	beq.n	8000b5c <__lesf2+0x88>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d11f      	bne.n	8000b60 <__lesf2+0x8c>
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d11d      	bne.n	8000b60 <__lesf2+0x8c>
 8000b24:	2002      	movs	r0, #2
 8000b26:	3b01      	subs	r3, #1
 8000b28:	4018      	ands	r0, r3
 8000b2a:	3801      	subs	r0, #1
 8000b2c:	e015      	b.n	8000b5a <__lesf2+0x86>
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d00e      	beq.n	8000b50 <__lesf2+0x7c>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d1e5      	bne.n	8000b02 <__lesf2+0x2e>
 8000b36:	2200      	movs	r2, #0
 8000b38:	4290      	cmp	r0, r2
 8000b3a:	dc04      	bgt.n	8000b46 <__lesf2+0x72>
 8000b3c:	42ac      	cmp	r4, r5
 8000b3e:	d8e0      	bhi.n	8000b02 <__lesf2+0x2e>
 8000b40:	2000      	movs	r0, #0
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	d209      	bcs.n	8000b5a <__lesf2+0x86>
 8000b46:	1e58      	subs	r0, r3, #1
 8000b48:	2301      	movs	r3, #1
 8000b4a:	4398      	bics	r0, r3
 8000b4c:	3001      	adds	r0, #1
 8000b4e:	e004      	b.n	8000b5a <__lesf2+0x86>
 8000b50:	2301      	movs	r3, #1
 8000b52:	3901      	subs	r1, #1
 8000b54:	4399      	bics	r1, r3
 8000b56:	0008      	movs	r0, r1
 8000b58:	3001      	adds	r0, #1
 8000b5a:	bd30      	pop	{r4, r5, pc}
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d1d7      	bne.n	8000b10 <__lesf2+0x3c>
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d1ce      	bne.n	8000b02 <__lesf2+0x2e>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	dde7      	ble.n	8000b38 <__lesf2+0x64>
 8000b68:	2102      	movs	r1, #2
 8000b6a:	1e58      	subs	r0, r3, #1
 8000b6c:	4008      	ands	r0, r1
 8000b6e:	3801      	subs	r0, #1
 8000b70:	e7f3      	b.n	8000b5a <__lesf2+0x86>
 8000b72:	46c0      	nop			; (mov r8, r8)

08000b74 <__aeabi_fmul>:
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	464e      	mov	r6, r9
 8000b78:	4657      	mov	r7, sl
 8000b7a:	4645      	mov	r5, r8
 8000b7c:	46de      	mov	lr, fp
 8000b7e:	b5e0      	push	{r5, r6, r7, lr}
 8000b80:	0243      	lsls	r3, r0, #9
 8000b82:	0a5b      	lsrs	r3, r3, #9
 8000b84:	0045      	lsls	r5, r0, #1
 8000b86:	b083      	sub	sp, #12
 8000b88:	1c0f      	adds	r7, r1, #0
 8000b8a:	4699      	mov	r9, r3
 8000b8c:	0e2d      	lsrs	r5, r5, #24
 8000b8e:	0fc6      	lsrs	r6, r0, #31
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d057      	beq.n	8000c44 <__aeabi_fmul+0xd0>
 8000b94:	2dff      	cmp	r5, #255	; 0xff
 8000b96:	d024      	beq.n	8000be2 <__aeabi_fmul+0x6e>
 8000b98:	2080      	movs	r0, #128	; 0x80
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	04c0      	lsls	r0, r0, #19
 8000b9e:	4318      	orrs	r0, r3
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4681      	mov	r9, r0
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	469b      	mov	fp, r3
 8000ba8:	3d7f      	subs	r5, #127	; 0x7f
 8000baa:	027c      	lsls	r4, r7, #9
 8000bac:	007a      	lsls	r2, r7, #1
 8000bae:	0ffb      	lsrs	r3, r7, #31
 8000bb0:	0a64      	lsrs	r4, r4, #9
 8000bb2:	0e12      	lsrs	r2, r2, #24
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	d023      	beq.n	8000c00 <__aeabi_fmul+0x8c>
 8000bb8:	2aff      	cmp	r2, #255	; 0xff
 8000bba:	d04b      	beq.n	8000c54 <__aeabi_fmul+0xe0>
 8000bbc:	00e3      	lsls	r3, r4, #3
 8000bbe:	2480      	movs	r4, #128	; 0x80
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	04e4      	lsls	r4, r4, #19
 8000bc4:	3a7f      	subs	r2, #127	; 0x7f
 8000bc6:	431c      	orrs	r4, r3
 8000bc8:	18ad      	adds	r5, r5, r2
 8000bca:	1c6b      	adds	r3, r5, #1
 8000bcc:	4647      	mov	r7, r8
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	4653      	mov	r3, sl
 8000bd2:	4077      	eors	r7, r6
 8000bd4:	003a      	movs	r2, r7
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d848      	bhi.n	8000c6c <__aeabi_fmul+0xf8>
 8000bda:	497d      	ldr	r1, [pc, #500]	; (8000dd0 <__aeabi_fmul+0x25c>)
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	58cb      	ldr	r3, [r1, r3]
 8000be0:	469f      	mov	pc, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d000      	beq.n	8000be8 <__aeabi_fmul+0x74>
 8000be6:	e085      	b.n	8000cf4 <__aeabi_fmul+0x180>
 8000be8:	3308      	adds	r3, #8
 8000bea:	469a      	mov	sl, r3
 8000bec:	3b06      	subs	r3, #6
 8000bee:	469b      	mov	fp, r3
 8000bf0:	027c      	lsls	r4, r7, #9
 8000bf2:	007a      	lsls	r2, r7, #1
 8000bf4:	0ffb      	lsrs	r3, r7, #31
 8000bf6:	25ff      	movs	r5, #255	; 0xff
 8000bf8:	0a64      	lsrs	r4, r4, #9
 8000bfa:	0e12      	lsrs	r2, r2, #24
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	d1db      	bne.n	8000bb8 <__aeabi_fmul+0x44>
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d000      	beq.n	8000c06 <__aeabi_fmul+0x92>
 8000c04:	e090      	b.n	8000d28 <__aeabi_fmul+0x1b4>
 8000c06:	4652      	mov	r2, sl
 8000c08:	2301      	movs	r3, #1
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	4692      	mov	sl, r2
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e7db      	b.n	8000bca <__aeabi_fmul+0x56>
 8000c12:	464c      	mov	r4, r9
 8000c14:	4658      	mov	r0, fp
 8000c16:	0017      	movs	r7, r2
 8000c18:	2802      	cmp	r0, #2
 8000c1a:	d024      	beq.n	8000c66 <__aeabi_fmul+0xf2>
 8000c1c:	2803      	cmp	r0, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fmul+0xae>
 8000c20:	e0cf      	b.n	8000dc2 <__aeabi_fmul+0x24e>
 8000c22:	2200      	movs	r2, #0
 8000c24:	2300      	movs	r3, #0
 8000c26:	2801      	cmp	r0, #1
 8000c28:	d14d      	bne.n	8000cc6 <__aeabi_fmul+0x152>
 8000c2a:	0258      	lsls	r0, r3, #9
 8000c2c:	05d2      	lsls	r2, r2, #23
 8000c2e:	0a40      	lsrs	r0, r0, #9
 8000c30:	07ff      	lsls	r7, r7, #31
 8000c32:	4310      	orrs	r0, r2
 8000c34:	4338      	orrs	r0, r7
 8000c36:	b003      	add	sp, #12
 8000c38:	bc3c      	pop	{r2, r3, r4, r5}
 8000c3a:	4690      	mov	r8, r2
 8000c3c:	4699      	mov	r9, r3
 8000c3e:	46a2      	mov	sl, r4
 8000c40:	46ab      	mov	fp, r5
 8000c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d15b      	bne.n	8000d00 <__aeabi_fmul+0x18c>
 8000c48:	2304      	movs	r3, #4
 8000c4a:	469a      	mov	sl, r3
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	2500      	movs	r5, #0
 8000c50:	469b      	mov	fp, r3
 8000c52:	e7aa      	b.n	8000baa <__aeabi_fmul+0x36>
 8000c54:	35ff      	adds	r5, #255	; 0xff
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	d160      	bne.n	8000d1c <__aeabi_fmul+0x1a8>
 8000c5a:	4652      	mov	r2, sl
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	4692      	mov	sl, r2
 8000c62:	2002      	movs	r0, #2
 8000c64:	e7b1      	b.n	8000bca <__aeabi_fmul+0x56>
 8000c66:	22ff      	movs	r2, #255	; 0xff
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e7de      	b.n	8000c2a <__aeabi_fmul+0xb6>
 8000c6c:	464b      	mov	r3, r9
 8000c6e:	0c1b      	lsrs	r3, r3, #16
 8000c70:	469c      	mov	ip, r3
 8000c72:	464b      	mov	r3, r9
 8000c74:	0426      	lsls	r6, r4, #16
 8000c76:	0c36      	lsrs	r6, r6, #16
 8000c78:	0418      	lsls	r0, r3, #16
 8000c7a:	4661      	mov	r1, ip
 8000c7c:	0033      	movs	r3, r6
 8000c7e:	0c22      	lsrs	r2, r4, #16
 8000c80:	4664      	mov	r4, ip
 8000c82:	0c00      	lsrs	r0, r0, #16
 8000c84:	4343      	muls	r3, r0
 8000c86:	434e      	muls	r6, r1
 8000c88:	4350      	muls	r0, r2
 8000c8a:	4354      	muls	r4, r2
 8000c8c:	1980      	adds	r0, r0, r6
 8000c8e:	0c1a      	lsrs	r2, r3, #16
 8000c90:	1812      	adds	r2, r2, r0
 8000c92:	4296      	cmp	r6, r2
 8000c94:	d903      	bls.n	8000c9e <__aeabi_fmul+0x12a>
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	0249      	lsls	r1, r1, #9
 8000c9a:	468c      	mov	ip, r1
 8000c9c:	4464      	add	r4, ip
 8000c9e:	041b      	lsls	r3, r3, #16
 8000ca0:	0c1b      	lsrs	r3, r3, #16
 8000ca2:	0410      	lsls	r0, r2, #16
 8000ca4:	18c0      	adds	r0, r0, r3
 8000ca6:	0183      	lsls	r3, r0, #6
 8000ca8:	1e5e      	subs	r6, r3, #1
 8000caa:	41b3      	sbcs	r3, r6
 8000cac:	0e80      	lsrs	r0, r0, #26
 8000cae:	4318      	orrs	r0, r3
 8000cb0:	0c13      	lsrs	r3, r2, #16
 8000cb2:	191b      	adds	r3, r3, r4
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	4303      	orrs	r3, r0
 8000cb8:	001c      	movs	r4, r3
 8000cba:	0123      	lsls	r3, r4, #4
 8000cbc:	d579      	bpl.n	8000db2 <__aeabi_fmul+0x23e>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	0862      	lsrs	r2, r4, #1
 8000cc2:	401c      	ands	r4, r3
 8000cc4:	4314      	orrs	r4, r2
 8000cc6:	9a01      	ldr	r2, [sp, #4]
 8000cc8:	327f      	adds	r2, #127	; 0x7f
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	dd4d      	ble.n	8000d6a <__aeabi_fmul+0x1f6>
 8000cce:	0763      	lsls	r3, r4, #29
 8000cd0:	d004      	beq.n	8000cdc <__aeabi_fmul+0x168>
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	4023      	ands	r3, r4
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_fmul+0x168>
 8000cda:	3404      	adds	r4, #4
 8000cdc:	0123      	lsls	r3, r4, #4
 8000cde:	d503      	bpl.n	8000ce8 <__aeabi_fmul+0x174>
 8000ce0:	4b3c      	ldr	r3, [pc, #240]	; (8000dd4 <__aeabi_fmul+0x260>)
 8000ce2:	9a01      	ldr	r2, [sp, #4]
 8000ce4:	401c      	ands	r4, r3
 8000ce6:	3280      	adds	r2, #128	; 0x80
 8000ce8:	2afe      	cmp	r2, #254	; 0xfe
 8000cea:	dcbc      	bgt.n	8000c66 <__aeabi_fmul+0xf2>
 8000cec:	01a3      	lsls	r3, r4, #6
 8000cee:	0a5b      	lsrs	r3, r3, #9
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	e79a      	b.n	8000c2a <__aeabi_fmul+0xb6>
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	469a      	mov	sl, r3
 8000cf8:	3b09      	subs	r3, #9
 8000cfa:	25ff      	movs	r5, #255	; 0xff
 8000cfc:	469b      	mov	fp, r3
 8000cfe:	e754      	b.n	8000baa <__aeabi_fmul+0x36>
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 fad7 	bl	80012b4 <__clzsi2>
 8000d06:	464a      	mov	r2, r9
 8000d08:	1f43      	subs	r3, r0, #5
 8000d0a:	2576      	movs	r5, #118	; 0x76
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	2300      	movs	r3, #0
 8000d10:	426d      	negs	r5, r5
 8000d12:	4691      	mov	r9, r2
 8000d14:	1a2d      	subs	r5, r5, r0
 8000d16:	469a      	mov	sl, r3
 8000d18:	469b      	mov	fp, r3
 8000d1a:	e746      	b.n	8000baa <__aeabi_fmul+0x36>
 8000d1c:	4652      	mov	r2, sl
 8000d1e:	2303      	movs	r3, #3
 8000d20:	431a      	orrs	r2, r3
 8000d22:	4692      	mov	sl, r2
 8000d24:	2003      	movs	r0, #3
 8000d26:	e750      	b.n	8000bca <__aeabi_fmul+0x56>
 8000d28:	0020      	movs	r0, r4
 8000d2a:	f000 fac3 	bl	80012b4 <__clzsi2>
 8000d2e:	1f43      	subs	r3, r0, #5
 8000d30:	1a2d      	subs	r5, r5, r0
 8000d32:	409c      	lsls	r4, r3
 8000d34:	3d76      	subs	r5, #118	; 0x76
 8000d36:	2000      	movs	r0, #0
 8000d38:	e747      	b.n	8000bca <__aeabi_fmul+0x56>
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	03db      	lsls	r3, r3, #15
 8000d40:	22ff      	movs	r2, #255	; 0xff
 8000d42:	e772      	b.n	8000c2a <__aeabi_fmul+0xb6>
 8000d44:	4642      	mov	r2, r8
 8000d46:	e766      	b.n	8000c16 <__aeabi_fmul+0xa2>
 8000d48:	464c      	mov	r4, r9
 8000d4a:	0032      	movs	r2, r6
 8000d4c:	4658      	mov	r0, fp
 8000d4e:	e762      	b.n	8000c16 <__aeabi_fmul+0xa2>
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	464a      	mov	r2, r9
 8000d54:	03db      	lsls	r3, r3, #15
 8000d56:	421a      	tst	r2, r3
 8000d58:	d022      	beq.n	8000da0 <__aeabi_fmul+0x22c>
 8000d5a:	421c      	tst	r4, r3
 8000d5c:	d120      	bne.n	8000da0 <__aeabi_fmul+0x22c>
 8000d5e:	4323      	orrs	r3, r4
 8000d60:	025b      	lsls	r3, r3, #9
 8000d62:	0a5b      	lsrs	r3, r3, #9
 8000d64:	4647      	mov	r7, r8
 8000d66:	22ff      	movs	r2, #255	; 0xff
 8000d68:	e75f      	b.n	8000c2a <__aeabi_fmul+0xb6>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	1a9a      	subs	r2, r3, r2
 8000d6e:	2a1b      	cmp	r2, #27
 8000d70:	dc21      	bgt.n	8000db6 <__aeabi_fmul+0x242>
 8000d72:	0023      	movs	r3, r4
 8000d74:	9901      	ldr	r1, [sp, #4]
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	319e      	adds	r1, #158	; 0x9e
 8000d7a:	408c      	lsls	r4, r1
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	0023      	movs	r3, r4
 8000d80:	1e5c      	subs	r4, r3, #1
 8000d82:	41a3      	sbcs	r3, r4
 8000d84:	4313      	orrs	r3, r2
 8000d86:	075a      	lsls	r2, r3, #29
 8000d88:	d004      	beq.n	8000d94 <__aeabi_fmul+0x220>
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	2a04      	cmp	r2, #4
 8000d90:	d000      	beq.n	8000d94 <__aeabi_fmul+0x220>
 8000d92:	3304      	adds	r3, #4
 8000d94:	015a      	lsls	r2, r3, #5
 8000d96:	d411      	bmi.n	8000dbc <__aeabi_fmul+0x248>
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	0a5b      	lsrs	r3, r3, #9
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	e744      	b.n	8000c2a <__aeabi_fmul+0xb6>
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	464a      	mov	r2, r9
 8000da4:	03db      	lsls	r3, r3, #15
 8000da6:	4313      	orrs	r3, r2
 8000da8:	025b      	lsls	r3, r3, #9
 8000daa:	0a5b      	lsrs	r3, r3, #9
 8000dac:	0037      	movs	r7, r6
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	e73b      	b.n	8000c2a <__aeabi_fmul+0xb6>
 8000db2:	9501      	str	r5, [sp, #4]
 8000db4:	e787      	b.n	8000cc6 <__aeabi_fmul+0x152>
 8000db6:	2200      	movs	r2, #0
 8000db8:	2300      	movs	r3, #0
 8000dba:	e736      	b.n	8000c2a <__aeabi_fmul+0xb6>
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e733      	b.n	8000c2a <__aeabi_fmul+0xb6>
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	03db      	lsls	r3, r3, #15
 8000dc6:	4323      	orrs	r3, r4
 8000dc8:	025b      	lsls	r3, r3, #9
 8000dca:	0a5b      	lsrs	r3, r3, #9
 8000dcc:	22ff      	movs	r2, #255	; 0xff
 8000dce:	e72c      	b.n	8000c2a <__aeabi_fmul+0xb6>
 8000dd0:	0800d1cc 	.word	0x0800d1cc
 8000dd4:	f7ffffff 	.word	0xf7ffffff

08000dd8 <__aeabi_fsub>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	4647      	mov	r7, r8
 8000ddc:	46ce      	mov	lr, r9
 8000dde:	0044      	lsls	r4, r0, #1
 8000de0:	0fc2      	lsrs	r2, r0, #31
 8000de2:	b580      	push	{r7, lr}
 8000de4:	0247      	lsls	r7, r0, #9
 8000de6:	0248      	lsls	r0, r1, #9
 8000de8:	0a40      	lsrs	r0, r0, #9
 8000dea:	4684      	mov	ip, r0
 8000dec:	4666      	mov	r6, ip
 8000dee:	0048      	lsls	r0, r1, #1
 8000df0:	0a7f      	lsrs	r7, r7, #9
 8000df2:	0e24      	lsrs	r4, r4, #24
 8000df4:	00f6      	lsls	r6, r6, #3
 8000df6:	0025      	movs	r5, r4
 8000df8:	4690      	mov	r8, r2
 8000dfa:	00fb      	lsls	r3, r7, #3
 8000dfc:	0e00      	lsrs	r0, r0, #24
 8000dfe:	0fc9      	lsrs	r1, r1, #31
 8000e00:	46b1      	mov	r9, r6
 8000e02:	28ff      	cmp	r0, #255	; 0xff
 8000e04:	d100      	bne.n	8000e08 <__aeabi_fsub+0x30>
 8000e06:	e085      	b.n	8000f14 <__aeabi_fsub+0x13c>
 8000e08:	2601      	movs	r6, #1
 8000e0a:	4071      	eors	r1, r6
 8000e0c:	1a26      	subs	r6, r4, r0
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d057      	beq.n	8000ec2 <__aeabi_fsub+0xea>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	dd43      	ble.n	8000e9e <__aeabi_fsub+0xc6>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d000      	beq.n	8000e1c <__aeabi_fsub+0x44>
 8000e1a:	e07f      	b.n	8000f1c <__aeabi_fsub+0x144>
 8000e1c:	4649      	mov	r1, r9
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d100      	bne.n	8000e24 <__aeabi_fsub+0x4c>
 8000e22:	e0aa      	b.n	8000f7a <__aeabi_fsub+0x1a2>
 8000e24:	3e01      	subs	r6, #1
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	d000      	beq.n	8000e2c <__aeabi_fsub+0x54>
 8000e2a:	e0f7      	b.n	800101c <__aeabi_fsub+0x244>
 8000e2c:	1a5b      	subs	r3, r3, r1
 8000e2e:	015a      	lsls	r2, r3, #5
 8000e30:	d400      	bmi.n	8000e34 <__aeabi_fsub+0x5c>
 8000e32:	e08b      	b.n	8000f4c <__aeabi_fsub+0x174>
 8000e34:	019b      	lsls	r3, r3, #6
 8000e36:	099c      	lsrs	r4, r3, #6
 8000e38:	0020      	movs	r0, r4
 8000e3a:	f000 fa3b 	bl	80012b4 <__clzsi2>
 8000e3e:	3805      	subs	r0, #5
 8000e40:	4084      	lsls	r4, r0
 8000e42:	4285      	cmp	r5, r0
 8000e44:	dd00      	ble.n	8000e48 <__aeabi_fsub+0x70>
 8000e46:	e0d3      	b.n	8000ff0 <__aeabi_fsub+0x218>
 8000e48:	1b45      	subs	r5, r0, r5
 8000e4a:	0023      	movs	r3, r4
 8000e4c:	2020      	movs	r0, #32
 8000e4e:	3501      	adds	r5, #1
 8000e50:	40eb      	lsrs	r3, r5
 8000e52:	1b45      	subs	r5, r0, r5
 8000e54:	40ac      	lsls	r4, r5
 8000e56:	1e62      	subs	r2, r4, #1
 8000e58:	4194      	sbcs	r4, r2
 8000e5a:	4323      	orrs	r3, r4
 8000e5c:	2407      	movs	r4, #7
 8000e5e:	2500      	movs	r5, #0
 8000e60:	401c      	ands	r4, r3
 8000e62:	2201      	movs	r2, #1
 8000e64:	4641      	mov	r1, r8
 8000e66:	400a      	ands	r2, r1
 8000e68:	2c00      	cmp	r4, #0
 8000e6a:	d004      	beq.n	8000e76 <__aeabi_fsub+0x9e>
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	4019      	ands	r1, r3
 8000e70:	2904      	cmp	r1, #4
 8000e72:	d000      	beq.n	8000e76 <__aeabi_fsub+0x9e>
 8000e74:	3304      	adds	r3, #4
 8000e76:	0159      	lsls	r1, r3, #5
 8000e78:	d400      	bmi.n	8000e7c <__aeabi_fsub+0xa4>
 8000e7a:	e080      	b.n	8000f7e <__aeabi_fsub+0x1a6>
 8000e7c:	3501      	adds	r5, #1
 8000e7e:	b2ec      	uxtb	r4, r5
 8000e80:	2dff      	cmp	r5, #255	; 0xff
 8000e82:	d000      	beq.n	8000e86 <__aeabi_fsub+0xae>
 8000e84:	e0a3      	b.n	8000fce <__aeabi_fsub+0x1f6>
 8000e86:	24ff      	movs	r4, #255	; 0xff
 8000e88:	2300      	movs	r3, #0
 8000e8a:	025b      	lsls	r3, r3, #9
 8000e8c:	05e4      	lsls	r4, r4, #23
 8000e8e:	0a58      	lsrs	r0, r3, #9
 8000e90:	07d2      	lsls	r2, r2, #31
 8000e92:	4320      	orrs	r0, r4
 8000e94:	4310      	orrs	r0, r2
 8000e96:	bc0c      	pop	{r2, r3}
 8000e98:	4690      	mov	r8, r2
 8000e9a:	4699      	mov	r9, r3
 8000e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d174      	bne.n	8000f8c <__aeabi_fsub+0x1b4>
 8000ea2:	1c60      	adds	r0, r4, #1
 8000ea4:	b2c0      	uxtb	r0, r0
 8000ea6:	2801      	cmp	r0, #1
 8000ea8:	dc00      	bgt.n	8000eac <__aeabi_fsub+0xd4>
 8000eaa:	e0a7      	b.n	8000ffc <__aeabi_fsub+0x224>
 8000eac:	464a      	mov	r2, r9
 8000eae:	1a9c      	subs	r4, r3, r2
 8000eb0:	0162      	lsls	r2, r4, #5
 8000eb2:	d500      	bpl.n	8000eb6 <__aeabi_fsub+0xde>
 8000eb4:	e0b6      	b.n	8001024 <__aeabi_fsub+0x24c>
 8000eb6:	2c00      	cmp	r4, #0
 8000eb8:	d1be      	bne.n	8000e38 <__aeabi_fsub+0x60>
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e7e3      	b.n	8000e8a <__aeabi_fsub+0xb2>
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	dc00      	bgt.n	8000ec8 <__aeabi_fsub+0xf0>
 8000ec6:	e085      	b.n	8000fd4 <__aeabi_fsub+0x1fc>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	d046      	beq.n	8000f5a <__aeabi_fsub+0x182>
 8000ecc:	2cff      	cmp	r4, #255	; 0xff
 8000ece:	d049      	beq.n	8000f64 <__aeabi_fsub+0x18c>
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	4648      	mov	r0, r9
 8000ed4:	04d2      	lsls	r2, r2, #19
 8000ed6:	4310      	orrs	r0, r2
 8000ed8:	4681      	mov	r9, r0
 8000eda:	2201      	movs	r2, #1
 8000edc:	2e1b      	cmp	r6, #27
 8000ede:	dc09      	bgt.n	8000ef4 <__aeabi_fsub+0x11c>
 8000ee0:	2020      	movs	r0, #32
 8000ee2:	464c      	mov	r4, r9
 8000ee4:	1b80      	subs	r0, r0, r6
 8000ee6:	4084      	lsls	r4, r0
 8000ee8:	464a      	mov	r2, r9
 8000eea:	0020      	movs	r0, r4
 8000eec:	40f2      	lsrs	r2, r6
 8000eee:	1e44      	subs	r4, r0, #1
 8000ef0:	41a0      	sbcs	r0, r4
 8000ef2:	4302      	orrs	r2, r0
 8000ef4:	189b      	adds	r3, r3, r2
 8000ef6:	015a      	lsls	r2, r3, #5
 8000ef8:	d528      	bpl.n	8000f4c <__aeabi_fsub+0x174>
 8000efa:	3501      	adds	r5, #1
 8000efc:	2dff      	cmp	r5, #255	; 0xff
 8000efe:	d100      	bne.n	8000f02 <__aeabi_fsub+0x12a>
 8000f00:	e0a8      	b.n	8001054 <__aeabi_fsub+0x27c>
 8000f02:	2201      	movs	r2, #1
 8000f04:	2407      	movs	r4, #7
 8000f06:	4994      	ldr	r1, [pc, #592]	; (8001158 <__aeabi_fsub+0x380>)
 8000f08:	401a      	ands	r2, r3
 8000f0a:	085b      	lsrs	r3, r3, #1
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	401c      	ands	r4, r3
 8000f12:	e7a6      	b.n	8000e62 <__aeabi_fsub+0x8a>
 8000f14:	2e00      	cmp	r6, #0
 8000f16:	d000      	beq.n	8000f1a <__aeabi_fsub+0x142>
 8000f18:	e778      	b.n	8000e0c <__aeabi_fsub+0x34>
 8000f1a:	e775      	b.n	8000e08 <__aeabi_fsub+0x30>
 8000f1c:	2cff      	cmp	r4, #255	; 0xff
 8000f1e:	d054      	beq.n	8000fca <__aeabi_fsub+0x1f2>
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	4649      	mov	r1, r9
 8000f24:	04d2      	lsls	r2, r2, #19
 8000f26:	4311      	orrs	r1, r2
 8000f28:	4689      	mov	r9, r1
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2e1b      	cmp	r6, #27
 8000f2e:	dc09      	bgt.n	8000f44 <__aeabi_fsub+0x16c>
 8000f30:	2120      	movs	r1, #32
 8000f32:	4648      	mov	r0, r9
 8000f34:	1b89      	subs	r1, r1, r6
 8000f36:	4088      	lsls	r0, r1
 8000f38:	464a      	mov	r2, r9
 8000f3a:	0001      	movs	r1, r0
 8000f3c:	40f2      	lsrs	r2, r6
 8000f3e:	1e48      	subs	r0, r1, #1
 8000f40:	4181      	sbcs	r1, r0
 8000f42:	430a      	orrs	r2, r1
 8000f44:	1a9b      	subs	r3, r3, r2
 8000f46:	015a      	lsls	r2, r3, #5
 8000f48:	d500      	bpl.n	8000f4c <__aeabi_fsub+0x174>
 8000f4a:	e773      	b.n	8000e34 <__aeabi_fsub+0x5c>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4641      	mov	r1, r8
 8000f50:	400a      	ands	r2, r1
 8000f52:	0759      	lsls	r1, r3, #29
 8000f54:	d000      	beq.n	8000f58 <__aeabi_fsub+0x180>
 8000f56:	e789      	b.n	8000e6c <__aeabi_fsub+0x94>
 8000f58:	e011      	b.n	8000f7e <__aeabi_fsub+0x1a6>
 8000f5a:	4648      	mov	r0, r9
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d158      	bne.n	8001012 <__aeabi_fsub+0x23a>
 8000f60:	2cff      	cmp	r4, #255	; 0xff
 8000f62:	d10c      	bne.n	8000f7e <__aeabi_fsub+0x1a6>
 8000f64:	08db      	lsrs	r3, r3, #3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x194>
 8000f6a:	e78c      	b.n	8000e86 <__aeabi_fsub+0xae>
 8000f6c:	2080      	movs	r0, #128	; 0x80
 8000f6e:	03c0      	lsls	r0, r0, #15
 8000f70:	4303      	orrs	r3, r0
 8000f72:	025b      	lsls	r3, r3, #9
 8000f74:	0a5b      	lsrs	r3, r3, #9
 8000f76:	24ff      	movs	r4, #255	; 0xff
 8000f78:	e787      	b.n	8000e8a <__aeabi_fsub+0xb2>
 8000f7a:	2cff      	cmp	r4, #255	; 0xff
 8000f7c:	d025      	beq.n	8000fca <__aeabi_fsub+0x1f2>
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	2dff      	cmp	r5, #255	; 0xff
 8000f82:	d0f0      	beq.n	8000f66 <__aeabi_fsub+0x18e>
 8000f84:	025b      	lsls	r3, r3, #9
 8000f86:	0a5b      	lsrs	r3, r3, #9
 8000f88:	b2ec      	uxtb	r4, r5
 8000f8a:	e77e      	b.n	8000e8a <__aeabi_fsub+0xb2>
 8000f8c:	2c00      	cmp	r4, #0
 8000f8e:	d04d      	beq.n	800102c <__aeabi_fsub+0x254>
 8000f90:	28ff      	cmp	r0, #255	; 0xff
 8000f92:	d018      	beq.n	8000fc6 <__aeabi_fsub+0x1ee>
 8000f94:	2480      	movs	r4, #128	; 0x80
 8000f96:	04e4      	lsls	r4, r4, #19
 8000f98:	4272      	negs	r2, r6
 8000f9a:	4323      	orrs	r3, r4
 8000f9c:	2a1b      	cmp	r2, #27
 8000f9e:	dd00      	ble.n	8000fa2 <__aeabi_fsub+0x1ca>
 8000fa0:	e0c4      	b.n	800112c <__aeabi_fsub+0x354>
 8000fa2:	001c      	movs	r4, r3
 8000fa4:	2520      	movs	r5, #32
 8000fa6:	40d4      	lsrs	r4, r2
 8000fa8:	1aaa      	subs	r2, r5, r2
 8000faa:	4093      	lsls	r3, r2
 8000fac:	1e5a      	subs	r2, r3, #1
 8000fae:	4193      	sbcs	r3, r2
 8000fb0:	4323      	orrs	r3, r4
 8000fb2:	464a      	mov	r2, r9
 8000fb4:	0005      	movs	r5, r0
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4688      	mov	r8, r1
 8000fba:	e738      	b.n	8000e2e <__aeabi_fsub+0x56>
 8000fbc:	1c72      	adds	r2, r6, #1
 8000fbe:	d0f8      	beq.n	8000fb2 <__aeabi_fsub+0x1da>
 8000fc0:	43f2      	mvns	r2, r6
 8000fc2:	28ff      	cmp	r0, #255	; 0xff
 8000fc4:	d1ea      	bne.n	8000f9c <__aeabi_fsub+0x1c4>
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	464b      	mov	r3, r9
 8000fca:	25ff      	movs	r5, #255	; 0xff
 8000fcc:	e7d7      	b.n	8000f7e <__aeabi_fsub+0x1a6>
 8000fce:	019b      	lsls	r3, r3, #6
 8000fd0:	0a5b      	lsrs	r3, r3, #9
 8000fd2:	e75a      	b.n	8000e8a <__aeabi_fsub+0xb2>
 8000fd4:	2e00      	cmp	r6, #0
 8000fd6:	d141      	bne.n	800105c <__aeabi_fsub+0x284>
 8000fd8:	1c65      	adds	r5, r4, #1
 8000fda:	b2e9      	uxtb	r1, r5
 8000fdc:	2901      	cmp	r1, #1
 8000fde:	dd45      	ble.n	800106c <__aeabi_fsub+0x294>
 8000fe0:	2dff      	cmp	r5, #255	; 0xff
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x20e>
 8000fe4:	e74f      	b.n	8000e86 <__aeabi_fsub+0xae>
 8000fe6:	2407      	movs	r4, #7
 8000fe8:	444b      	add	r3, r9
 8000fea:	085b      	lsrs	r3, r3, #1
 8000fec:	401c      	ands	r4, r3
 8000fee:	e738      	b.n	8000e62 <__aeabi_fsub+0x8a>
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	4b5a      	ldr	r3, [pc, #360]	; (800115c <__aeabi_fsub+0x384>)
 8000ff4:	1a2d      	subs	r5, r5, r0
 8000ff6:	4023      	ands	r3, r4
 8000ff8:	4014      	ands	r4, r2
 8000ffa:	e732      	b.n	8000e62 <__aeabi_fsub+0x8a>
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d11d      	bne.n	800103c <__aeabi_fsub+0x264>
 8001000:	2b00      	cmp	r3, #0
 8001002:	d17a      	bne.n	80010fa <__aeabi_fsub+0x322>
 8001004:	464b      	mov	r3, r9
 8001006:	2b00      	cmp	r3, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x234>
 800100a:	e091      	b.n	8001130 <__aeabi_fsub+0x358>
 800100c:	000a      	movs	r2, r1
 800100e:	2500      	movs	r5, #0
 8001010:	e7b5      	b.n	8000f7e <__aeabi_fsub+0x1a6>
 8001012:	3e01      	subs	r6, #1
 8001014:	2e00      	cmp	r6, #0
 8001016:	d119      	bne.n	800104c <__aeabi_fsub+0x274>
 8001018:	444b      	add	r3, r9
 800101a:	e76c      	b.n	8000ef6 <__aeabi_fsub+0x11e>
 800101c:	2cff      	cmp	r4, #255	; 0xff
 800101e:	d184      	bne.n	8000f2a <__aeabi_fsub+0x152>
 8001020:	25ff      	movs	r5, #255	; 0xff
 8001022:	e7ac      	b.n	8000f7e <__aeabi_fsub+0x1a6>
 8001024:	464a      	mov	r2, r9
 8001026:	4688      	mov	r8, r1
 8001028:	1ad4      	subs	r4, r2, r3
 800102a:	e705      	b.n	8000e38 <__aeabi_fsub+0x60>
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1c5      	bne.n	8000fbc <__aeabi_fsub+0x1e4>
 8001030:	000a      	movs	r2, r1
 8001032:	28ff      	cmp	r0, #255	; 0xff
 8001034:	d0c8      	beq.n	8000fc8 <__aeabi_fsub+0x1f0>
 8001036:	0005      	movs	r5, r0
 8001038:	464b      	mov	r3, r9
 800103a:	e7a0      	b.n	8000f7e <__aeabi_fsub+0x1a6>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d149      	bne.n	80010d4 <__aeabi_fsub+0x2fc>
 8001040:	464b      	mov	r3, r9
 8001042:	2b00      	cmp	r3, #0
 8001044:	d077      	beq.n	8001136 <__aeabi_fsub+0x35e>
 8001046:	000a      	movs	r2, r1
 8001048:	25ff      	movs	r5, #255	; 0xff
 800104a:	e798      	b.n	8000f7e <__aeabi_fsub+0x1a6>
 800104c:	2cff      	cmp	r4, #255	; 0xff
 800104e:	d000      	beq.n	8001052 <__aeabi_fsub+0x27a>
 8001050:	e743      	b.n	8000eda <__aeabi_fsub+0x102>
 8001052:	e787      	b.n	8000f64 <__aeabi_fsub+0x18c>
 8001054:	000a      	movs	r2, r1
 8001056:	24ff      	movs	r4, #255	; 0xff
 8001058:	2300      	movs	r3, #0
 800105a:	e716      	b.n	8000e8a <__aeabi_fsub+0xb2>
 800105c:	2c00      	cmp	r4, #0
 800105e:	d115      	bne.n	800108c <__aeabi_fsub+0x2b4>
 8001060:	2b00      	cmp	r3, #0
 8001062:	d157      	bne.n	8001114 <__aeabi_fsub+0x33c>
 8001064:	28ff      	cmp	r0, #255	; 0xff
 8001066:	d1e6      	bne.n	8001036 <__aeabi_fsub+0x25e>
 8001068:	464b      	mov	r3, r9
 800106a:	e77b      	b.n	8000f64 <__aeabi_fsub+0x18c>
 800106c:	2c00      	cmp	r4, #0
 800106e:	d120      	bne.n	80010b2 <__aeabi_fsub+0x2da>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d057      	beq.n	8001124 <__aeabi_fsub+0x34c>
 8001074:	4649      	mov	r1, r9
 8001076:	2900      	cmp	r1, #0
 8001078:	d053      	beq.n	8001122 <__aeabi_fsub+0x34a>
 800107a:	444b      	add	r3, r9
 800107c:	015a      	lsls	r2, r3, #5
 800107e:	d568      	bpl.n	8001152 <__aeabi_fsub+0x37a>
 8001080:	2407      	movs	r4, #7
 8001082:	4a36      	ldr	r2, [pc, #216]	; (800115c <__aeabi_fsub+0x384>)
 8001084:	401c      	ands	r4, r3
 8001086:	2501      	movs	r5, #1
 8001088:	4013      	ands	r3, r2
 800108a:	e6ea      	b.n	8000e62 <__aeabi_fsub+0x8a>
 800108c:	28ff      	cmp	r0, #255	; 0xff
 800108e:	d0eb      	beq.n	8001068 <__aeabi_fsub+0x290>
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	04d2      	lsls	r2, r2, #19
 8001094:	4276      	negs	r6, r6
 8001096:	4313      	orrs	r3, r2
 8001098:	2e1b      	cmp	r6, #27
 800109a:	dc53      	bgt.n	8001144 <__aeabi_fsub+0x36c>
 800109c:	2520      	movs	r5, #32
 800109e:	1bad      	subs	r5, r5, r6
 80010a0:	001a      	movs	r2, r3
 80010a2:	40ab      	lsls	r3, r5
 80010a4:	40f2      	lsrs	r2, r6
 80010a6:	1e5c      	subs	r4, r3, #1
 80010a8:	41a3      	sbcs	r3, r4
 80010aa:	4313      	orrs	r3, r2
 80010ac:	444b      	add	r3, r9
 80010ae:	0005      	movs	r5, r0
 80010b0:	e721      	b.n	8000ef6 <__aeabi_fsub+0x11e>
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0d8      	beq.n	8001068 <__aeabi_fsub+0x290>
 80010b6:	4649      	mov	r1, r9
 80010b8:	2900      	cmp	r1, #0
 80010ba:	d100      	bne.n	80010be <__aeabi_fsub+0x2e6>
 80010bc:	e752      	b.n	8000f64 <__aeabi_fsub+0x18c>
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	03c9      	lsls	r1, r1, #15
 80010c2:	420f      	tst	r7, r1
 80010c4:	d100      	bne.n	80010c8 <__aeabi_fsub+0x2f0>
 80010c6:	e74d      	b.n	8000f64 <__aeabi_fsub+0x18c>
 80010c8:	4660      	mov	r0, ip
 80010ca:	4208      	tst	r0, r1
 80010cc:	d000      	beq.n	80010d0 <__aeabi_fsub+0x2f8>
 80010ce:	e749      	b.n	8000f64 <__aeabi_fsub+0x18c>
 80010d0:	464b      	mov	r3, r9
 80010d2:	e747      	b.n	8000f64 <__aeabi_fsub+0x18c>
 80010d4:	4648      	mov	r0, r9
 80010d6:	25ff      	movs	r5, #255	; 0xff
 80010d8:	2800      	cmp	r0, #0
 80010da:	d100      	bne.n	80010de <__aeabi_fsub+0x306>
 80010dc:	e74f      	b.n	8000f7e <__aeabi_fsub+0x1a6>
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	4217      	tst	r7, r2
 80010e4:	d004      	beq.n	80010f0 <__aeabi_fsub+0x318>
 80010e6:	4660      	mov	r0, ip
 80010e8:	4210      	tst	r0, r2
 80010ea:	d101      	bne.n	80010f0 <__aeabi_fsub+0x318>
 80010ec:	464b      	mov	r3, r9
 80010ee:	4688      	mov	r8, r1
 80010f0:	2201      	movs	r2, #1
 80010f2:	4641      	mov	r1, r8
 80010f4:	25ff      	movs	r5, #255	; 0xff
 80010f6:	400a      	ands	r2, r1
 80010f8:	e741      	b.n	8000f7e <__aeabi_fsub+0x1a6>
 80010fa:	4648      	mov	r0, r9
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d01f      	beq.n	8001140 <__aeabi_fsub+0x368>
 8001100:	1a1a      	subs	r2, r3, r0
 8001102:	0150      	lsls	r0, r2, #5
 8001104:	d520      	bpl.n	8001148 <__aeabi_fsub+0x370>
 8001106:	464a      	mov	r2, r9
 8001108:	2407      	movs	r4, #7
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	401c      	ands	r4, r3
 800110e:	4688      	mov	r8, r1
 8001110:	2500      	movs	r5, #0
 8001112:	e6a6      	b.n	8000e62 <__aeabi_fsub+0x8a>
 8001114:	1c74      	adds	r4, r6, #1
 8001116:	d0c9      	beq.n	80010ac <__aeabi_fsub+0x2d4>
 8001118:	43f6      	mvns	r6, r6
 800111a:	28ff      	cmp	r0, #255	; 0xff
 800111c:	d1bc      	bne.n	8001098 <__aeabi_fsub+0x2c0>
 800111e:	464b      	mov	r3, r9
 8001120:	e720      	b.n	8000f64 <__aeabi_fsub+0x18c>
 8001122:	4699      	mov	r9, r3
 8001124:	464b      	mov	r3, r9
 8001126:	2500      	movs	r5, #0
 8001128:	08db      	lsrs	r3, r3, #3
 800112a:	e72b      	b.n	8000f84 <__aeabi_fsub+0x1ac>
 800112c:	2301      	movs	r3, #1
 800112e:	e740      	b.n	8000fb2 <__aeabi_fsub+0x1da>
 8001130:	2200      	movs	r2, #0
 8001132:	2300      	movs	r3, #0
 8001134:	e6a9      	b.n	8000e8a <__aeabi_fsub+0xb2>
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	2200      	movs	r2, #0
 800113a:	03db      	lsls	r3, r3, #15
 800113c:	24ff      	movs	r4, #255	; 0xff
 800113e:	e6a4      	b.n	8000e8a <__aeabi_fsub+0xb2>
 8001140:	2500      	movs	r5, #0
 8001142:	e71c      	b.n	8000f7e <__aeabi_fsub+0x1a6>
 8001144:	2301      	movs	r3, #1
 8001146:	e7b1      	b.n	80010ac <__aeabi_fsub+0x2d4>
 8001148:	2a00      	cmp	r2, #0
 800114a:	d0f1      	beq.n	8001130 <__aeabi_fsub+0x358>
 800114c:	0013      	movs	r3, r2
 800114e:	2500      	movs	r5, #0
 8001150:	e6fc      	b.n	8000f4c <__aeabi_fsub+0x174>
 8001152:	2500      	movs	r5, #0
 8001154:	e6fa      	b.n	8000f4c <__aeabi_fsub+0x174>
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	7dffffff 	.word	0x7dffffff
 800115c:	fbffffff 	.word	0xfbffffff

08001160 <__aeabi_f2iz>:
 8001160:	0241      	lsls	r1, r0, #9
 8001162:	0042      	lsls	r2, r0, #1
 8001164:	0fc3      	lsrs	r3, r0, #31
 8001166:	0a49      	lsrs	r1, r1, #9
 8001168:	0e12      	lsrs	r2, r2, #24
 800116a:	2000      	movs	r0, #0
 800116c:	2a7e      	cmp	r2, #126	; 0x7e
 800116e:	d90d      	bls.n	800118c <__aeabi_f2iz+0x2c>
 8001170:	2a9d      	cmp	r2, #157	; 0x9d
 8001172:	d80c      	bhi.n	800118e <__aeabi_f2iz+0x2e>
 8001174:	2080      	movs	r0, #128	; 0x80
 8001176:	0400      	lsls	r0, r0, #16
 8001178:	4301      	orrs	r1, r0
 800117a:	2a95      	cmp	r2, #149	; 0x95
 800117c:	dc0a      	bgt.n	8001194 <__aeabi_f2iz+0x34>
 800117e:	2096      	movs	r0, #150	; 0x96
 8001180:	1a82      	subs	r2, r0, r2
 8001182:	40d1      	lsrs	r1, r2
 8001184:	4248      	negs	r0, r1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d100      	bne.n	800118c <__aeabi_f2iz+0x2c>
 800118a:	0008      	movs	r0, r1
 800118c:	4770      	bx	lr
 800118e:	4a03      	ldr	r2, [pc, #12]	; (800119c <__aeabi_f2iz+0x3c>)
 8001190:	1898      	adds	r0, r3, r2
 8001192:	e7fb      	b.n	800118c <__aeabi_f2iz+0x2c>
 8001194:	3a96      	subs	r2, #150	; 0x96
 8001196:	4091      	lsls	r1, r2
 8001198:	e7f4      	b.n	8001184 <__aeabi_f2iz+0x24>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	7fffffff 	.word	0x7fffffff

080011a0 <__aeabi_i2f>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d03d      	beq.n	8001222 <__aeabi_i2f+0x82>
 80011a6:	17c3      	asrs	r3, r0, #31
 80011a8:	18c5      	adds	r5, r0, r3
 80011aa:	405d      	eors	r5, r3
 80011ac:	0fc4      	lsrs	r4, r0, #31
 80011ae:	0028      	movs	r0, r5
 80011b0:	f000 f880 	bl	80012b4 <__clzsi2>
 80011b4:	229e      	movs	r2, #158	; 0x9e
 80011b6:	1a12      	subs	r2, r2, r0
 80011b8:	2a96      	cmp	r2, #150	; 0x96
 80011ba:	dc07      	bgt.n	80011cc <__aeabi_i2f+0x2c>
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	2808      	cmp	r0, #8
 80011c0:	dd33      	ble.n	800122a <__aeabi_i2f+0x8a>
 80011c2:	3808      	subs	r0, #8
 80011c4:	4085      	lsls	r5, r0
 80011c6:	0268      	lsls	r0, r5, #9
 80011c8:	0a40      	lsrs	r0, r0, #9
 80011ca:	e023      	b.n	8001214 <__aeabi_i2f+0x74>
 80011cc:	2a99      	cmp	r2, #153	; 0x99
 80011ce:	dd0b      	ble.n	80011e8 <__aeabi_i2f+0x48>
 80011d0:	2305      	movs	r3, #5
 80011d2:	0029      	movs	r1, r5
 80011d4:	1a1b      	subs	r3, r3, r0
 80011d6:	40d9      	lsrs	r1, r3
 80011d8:	0003      	movs	r3, r0
 80011da:	331b      	adds	r3, #27
 80011dc:	409d      	lsls	r5, r3
 80011de:	002b      	movs	r3, r5
 80011e0:	1e5d      	subs	r5, r3, #1
 80011e2:	41ab      	sbcs	r3, r5
 80011e4:	4319      	orrs	r1, r3
 80011e6:	000d      	movs	r5, r1
 80011e8:	2805      	cmp	r0, #5
 80011ea:	dd01      	ble.n	80011f0 <__aeabi_i2f+0x50>
 80011ec:	1f43      	subs	r3, r0, #5
 80011ee:	409d      	lsls	r5, r3
 80011f0:	002b      	movs	r3, r5
 80011f2:	490f      	ldr	r1, [pc, #60]	; (8001230 <__aeabi_i2f+0x90>)
 80011f4:	400b      	ands	r3, r1
 80011f6:	076e      	lsls	r6, r5, #29
 80011f8:	d009      	beq.n	800120e <__aeabi_i2f+0x6e>
 80011fa:	260f      	movs	r6, #15
 80011fc:	4035      	ands	r5, r6
 80011fe:	2d04      	cmp	r5, #4
 8001200:	d005      	beq.n	800120e <__aeabi_i2f+0x6e>
 8001202:	3304      	adds	r3, #4
 8001204:	015d      	lsls	r5, r3, #5
 8001206:	d502      	bpl.n	800120e <__aeabi_i2f+0x6e>
 8001208:	229f      	movs	r2, #159	; 0x9f
 800120a:	400b      	ands	r3, r1
 800120c:	1a12      	subs	r2, r2, r0
 800120e:	019b      	lsls	r3, r3, #6
 8001210:	0a58      	lsrs	r0, r3, #9
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	0240      	lsls	r0, r0, #9
 8001216:	05d2      	lsls	r2, r2, #23
 8001218:	0a40      	lsrs	r0, r0, #9
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	4310      	orrs	r0, r2
 800121e:	4320      	orrs	r0, r4
 8001220:	bd70      	pop	{r4, r5, r6, pc}
 8001222:	2400      	movs	r4, #0
 8001224:	2200      	movs	r2, #0
 8001226:	2000      	movs	r0, #0
 8001228:	e7f4      	b.n	8001214 <__aeabi_i2f+0x74>
 800122a:	0268      	lsls	r0, r5, #9
 800122c:	0a40      	lsrs	r0, r0, #9
 800122e:	e7f1      	b.n	8001214 <__aeabi_i2f+0x74>
 8001230:	fbffffff 	.word	0xfbffffff

08001234 <__aeabi_ui2f>:
 8001234:	b570      	push	{r4, r5, r6, lr}
 8001236:	1e04      	subs	r4, r0, #0
 8001238:	d034      	beq.n	80012a4 <__aeabi_ui2f+0x70>
 800123a:	f000 f83b 	bl	80012b4 <__clzsi2>
 800123e:	229e      	movs	r2, #158	; 0x9e
 8001240:	1a12      	subs	r2, r2, r0
 8001242:	2a96      	cmp	r2, #150	; 0x96
 8001244:	dc07      	bgt.n	8001256 <__aeabi_ui2f+0x22>
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	2808      	cmp	r0, #8
 800124a:	dd2e      	ble.n	80012aa <__aeabi_ui2f+0x76>
 800124c:	3808      	subs	r0, #8
 800124e:	4084      	lsls	r4, r0
 8001250:	0260      	lsls	r0, r4, #9
 8001252:	0a40      	lsrs	r0, r0, #9
 8001254:	e021      	b.n	800129a <__aeabi_ui2f+0x66>
 8001256:	2a99      	cmp	r2, #153	; 0x99
 8001258:	dd09      	ble.n	800126e <__aeabi_ui2f+0x3a>
 800125a:	0003      	movs	r3, r0
 800125c:	0021      	movs	r1, r4
 800125e:	331b      	adds	r3, #27
 8001260:	4099      	lsls	r1, r3
 8001262:	1e4b      	subs	r3, r1, #1
 8001264:	4199      	sbcs	r1, r3
 8001266:	2305      	movs	r3, #5
 8001268:	1a1b      	subs	r3, r3, r0
 800126a:	40dc      	lsrs	r4, r3
 800126c:	430c      	orrs	r4, r1
 800126e:	2805      	cmp	r0, #5
 8001270:	dd01      	ble.n	8001276 <__aeabi_ui2f+0x42>
 8001272:	1f43      	subs	r3, r0, #5
 8001274:	409c      	lsls	r4, r3
 8001276:	0023      	movs	r3, r4
 8001278:	490d      	ldr	r1, [pc, #52]	; (80012b0 <__aeabi_ui2f+0x7c>)
 800127a:	400b      	ands	r3, r1
 800127c:	0765      	lsls	r5, r4, #29
 800127e:	d009      	beq.n	8001294 <__aeabi_ui2f+0x60>
 8001280:	250f      	movs	r5, #15
 8001282:	402c      	ands	r4, r5
 8001284:	2c04      	cmp	r4, #4
 8001286:	d005      	beq.n	8001294 <__aeabi_ui2f+0x60>
 8001288:	3304      	adds	r3, #4
 800128a:	015c      	lsls	r4, r3, #5
 800128c:	d502      	bpl.n	8001294 <__aeabi_ui2f+0x60>
 800128e:	229f      	movs	r2, #159	; 0x9f
 8001290:	400b      	ands	r3, r1
 8001292:	1a12      	subs	r2, r2, r0
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	0a58      	lsrs	r0, r3, #9
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	0240      	lsls	r0, r0, #9
 800129c:	05d2      	lsls	r2, r2, #23
 800129e:	0a40      	lsrs	r0, r0, #9
 80012a0:	4310      	orrs	r0, r2
 80012a2:	bd70      	pop	{r4, r5, r6, pc}
 80012a4:	2200      	movs	r2, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	e7f7      	b.n	800129a <__aeabi_ui2f+0x66>
 80012aa:	0260      	lsls	r0, r4, #9
 80012ac:	0a40      	lsrs	r0, r0, #9
 80012ae:	e7f4      	b.n	800129a <__aeabi_ui2f+0x66>
 80012b0:	fbffffff 	.word	0xfbffffff

080012b4 <__clzsi2>:
 80012b4:	211c      	movs	r1, #28
 80012b6:	2301      	movs	r3, #1
 80012b8:	041b      	lsls	r3, r3, #16
 80012ba:	4298      	cmp	r0, r3
 80012bc:	d301      	bcc.n	80012c2 <__clzsi2+0xe>
 80012be:	0c00      	lsrs	r0, r0, #16
 80012c0:	3910      	subs	r1, #16
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	4298      	cmp	r0, r3
 80012c6:	d301      	bcc.n	80012cc <__clzsi2+0x18>
 80012c8:	0a00      	lsrs	r0, r0, #8
 80012ca:	3908      	subs	r1, #8
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d301      	bcc.n	80012d6 <__clzsi2+0x22>
 80012d2:	0900      	lsrs	r0, r0, #4
 80012d4:	3904      	subs	r1, #4
 80012d6:	a202      	add	r2, pc, #8	; (adr r2, 80012e0 <__clzsi2+0x2c>)
 80012d8:	5c10      	ldrb	r0, [r2, r0]
 80012da:	1840      	adds	r0, r0, r1
 80012dc:	4770      	bx	lr
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	02020304 	.word	0x02020304
 80012e4:	01010101 	.word	0x01010101
	...

080012f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_Init+0x3c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_Init+0x3c>)
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	0049      	lsls	r1, r1, #1
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f810 	bl	8001330 <HAL_InitTick>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d003      	beq.n	800131c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e001      	b.n	8001320 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800131c:	f00b f840 	bl	800c3a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001320:	1dfb      	adds	r3, r7, #7
 8001322:	781b      	ldrb	r3, [r3, #0]
}
 8001324:	0018      	movs	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	b002      	add	sp, #8
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001338:	230f      	movs	r3, #15
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_InitTick+0x88>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d02b      	beq.n	80013a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_InitTick+0x8c>)
 800134a:	681c      	ldr	r4, [r3, #0]
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_InitTick+0x88>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	0019      	movs	r1, r3
 8001352:	23fa      	movs	r3, #250	; 0xfa
 8001354:	0098      	lsls	r0, r3, #2
 8001356:	f7fe fed3 	bl	8000100 <__udivsi3>
 800135a:	0003      	movs	r3, r0
 800135c:	0019      	movs	r1, r3
 800135e:	0020      	movs	r0, r4
 8001360:	f7fe fece 	bl	8000100 <__udivsi3>
 8001364:	0003      	movs	r3, r0
 8001366:	0018      	movs	r0, r3
 8001368:	f001 fb95 	bl	8002a96 <HAL_SYSTICK_Config>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d112      	bne.n	8001396 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d80a      	bhi.n	800138c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	2301      	movs	r3, #1
 800137a:	425b      	negs	r3, r3
 800137c:	2200      	movs	r2, #0
 800137e:	0018      	movs	r0, r3
 8001380:	f001 fb64 	bl	8002a4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_InitTick+0x90>)
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e00d      	b.n	80013a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800138c:	230f      	movs	r3, #15
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e008      	b.n	80013a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001396:	230f      	movs	r3, #15
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e003      	b.n	80013a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013a0:	230f      	movs	r3, #15
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80013a8:	230f      	movs	r3, #15
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	781b      	ldrb	r3, [r3, #0]
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b005      	add	sp, #20
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	20000004 	.word	0x20000004
 80013bc:	2000000c 	.word	0x2000000c
 80013c0:	20000000 	.word	0x20000000

080013c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_IncTick+0x18>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <HAL_IncTick+0x1c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	18d2      	adds	r2, r2, r3
 80013d2:	4b02      	ldr	r3, [pc, #8]	; (80013dc <HAL_IncTick+0x18>)
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000044 	.word	0x20000044
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <HAL_GetTick+0x10>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	20000044 	.word	0x20000044

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff fff0 	bl	80013e4 <HAL_GetTick>
 8001404:	0003      	movs	r3, r0
 8001406:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	d004      	beq.n	800141c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_Delay+0x40>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	18d3      	adds	r3, r2, r3
 800141a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	f7ff ffe1 	bl	80013e4 <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	429a      	cmp	r2, r3
 800142c:	d8f7      	bhi.n	800141e <HAL_Delay+0x26>
  {
  }
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	20000004 	.word	0x20000004

0800143c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800144c:	401a      	ands	r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	fe3fffff 	.word	0xfe3fffff

08001464 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	23e0      	movs	r3, #224	; 0xe0
 8001472:	045b      	lsls	r3, r3, #17
 8001474:	4013      	ands	r3, r2
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b002      	add	sp, #8
 800147c:	bd80      	pop	{r7, pc}

0800147e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	2104      	movs	r1, #4
 8001492:	400a      	ands	r2, r1
 8001494:	2107      	movs	r1, #7
 8001496:	4091      	lsls	r1, r2
 8001498:	000a      	movs	r2, r1
 800149a:	43d2      	mvns	r2, r2
 800149c:	401a      	ands	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2104      	movs	r1, #4
 80014a2:	400b      	ands	r3, r1
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4099      	lsls	r1, r3
 80014a8:	000b      	movs	r3, r1
 80014aa:	431a      	orrs	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b004      	add	sp, #16
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	23c0      	movs	r3, #192	; 0xc0
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4013      	ands	r3, r2
 80014ca:	d101      	bne.n	80014d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}

080014da <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	211f      	movs	r1, #31
 80014ee:	400a      	ands	r2, r1
 80014f0:	210f      	movs	r1, #15
 80014f2:	4091      	lsls	r1, r2
 80014f4:	000a      	movs	r2, r1
 80014f6:	43d2      	mvns	r2, r2
 80014f8:	401a      	ands	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	0e9b      	lsrs	r3, r3, #26
 80014fe:	210f      	movs	r1, #15
 8001500:	4019      	ands	r1, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	201f      	movs	r0, #31
 8001506:	4003      	ands	r3, r0
 8001508:	4099      	lsls	r1, r3
 800150a:	000b      	movs	r3, r1
 800150c:	431a      	orrs	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b004      	add	sp, #16
 8001518:	bd80      	pop	{r7, pc}

0800151a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	035b      	lsls	r3, r3, #13
 800152c:	0b5b      	lsrs	r3, r3, #13
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}

0800153c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	0352      	lsls	r2, r2, #13
 800154e:	0b52      	lsrs	r2, r2, #13
 8001550:	43d2      	mvns	r2, r2
 8001552:	401a      	ands	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	0212      	lsls	r2, r2, #8
 8001574:	43d2      	mvns	r2, r2
 8001576:	401a      	ands	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	400b      	ands	r3, r1
 8001580:	4904      	ldr	r1, [pc, #16]	; (8001594 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001582:	400b      	ands	r3, r1
 8001584:	431a      	orrs	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	07ffff00 	.word	0x07ffff00

08001598 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg;
  
  if(AWDy == LL_ADC_AWD1)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <LL_ADC_SetAnalogWDMonitChannels+0x50>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d103      	bne.n	80015b4 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	330c      	adds	r3, #12
 80015b0:	001c      	movs	r4, r3
 80015b2:	e009      	b.n	80015c8 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	33a0      	adds	r3, #160	; 0xa0
 80015b8:	0019      	movs	r1, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	0d5b      	lsrs	r3, r3, #21
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	2204      	movs	r2, #4
 80015c2:	4013      	ands	r3, r2
 80015c4:	18cb      	adds	r3, r1, r3
 80015c6:	001c      	movs	r4, r3
  }
  
  MODIFY_REG(*preg,
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	4907      	ldr	r1, [pc, #28]	; (80015ec <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	43d2      	mvns	r2, r2
 80015d2:	401a      	ands	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	400b      	ands	r3, r1
 80015da:	4313      	orrs	r3, r2
 80015dc:	6023      	str	r3, [r4, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b005      	add	sp, #20
 80015e4:	bd90      	pop	{r4, r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	7cc00000 	.word	0x7cc00000
 80015ec:	7cc7ffff 	.word	0x7cc7ffff

080015f0 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS)) + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL)));
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3320      	adds	r3, #32
 8001602:	0018      	movs	r0, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	0d1b      	lsrs	r3, r3, #20
 8001608:	2203      	movs	r2, #3
 800160a:	401a      	ands	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	0d5b      	lsrs	r3, r3, #21
 8001610:	2101      	movs	r1, #1
 8001612:	400b      	ands	r3, r1
 8001614:	18d3      	adds	r3, r2, r3
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	18c3      	adds	r3, r0, r3
 800161a:	001c      	movs	r4, r3
  
  MODIFY_REG(*preg,
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	4a06      	ldr	r2, [pc, #24]	; (8001638 <LL_ADC_ConfigAnalogWDThresholds+0x48>)
 8001620:	401a      	ands	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	0419      	lsls	r1, r3, #16
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	430b      	orrs	r3, r1
 800162a:	4313      	orrs	r3, r2
 800162c:	6023      	str	r3, [r4, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b005      	add	sp, #20
 8001634:	bd90      	pop	{r4, r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	f000f000 	.word	0xf000f000

0800163c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <LL_ADC_EnableInternalRegulator+0x24>)
 800164a:	4013      	ands	r3, r2
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	0552      	lsls	r2, r2, #21
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	6fffffe8 	.word	0x6fffffe8

08001664 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	055b      	lsls	r3, r3, #21
 8001674:	401a      	ands	r2, r3
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	055b      	lsls	r3, r3, #21
 800167a:	429a      	cmp	r2, r3
 800167c:	d101      	bne.n	8001682 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001682:	2300      	movs	r3, #0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}

0800168c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <LL_ADC_Enable+0x20>)
 800169a:	4013      	ands	r3, r2
 800169c:	2201      	movs	r2, #1
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	7fffffe8 	.word	0x7fffffe8

080016b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <LL_ADC_Disable+0x20>)
 80016be:	4013      	ands	r3, r2
 80016c0:	2202      	movs	r2, #2
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	7fffffe8 	.word	0x7fffffe8

080016d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <LL_ADC_IsEnabled+0x18>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <LL_ADC_IsEnabled+0x1a>
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	0018      	movs	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <LL_ADC_REG_StartConversion+0x20>)
 8001706:	4013      	ands	r3, r2
 8001708:	2204      	movs	r2, #4
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b002      	add	sp, #8
 8001716:	bd80      	pop	{r7, pc}
 8001718:	7fffffe8 	.word	0x7fffffe8

0800171c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2204      	movs	r2, #4
 800172a:	4013      	ands	r3, r2
 800172c:	2b04      	cmp	r3, #4
 800172e:	d101      	bne.n	8001734 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001734:	2300      	movs	r3, #0
}
 8001736:	0018      	movs	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}

0800173e <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}

08001754 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	0052      	lsls	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}

0800176c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	601a      	str	r2, [r3, #0]
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b002      	add	sp, #8
 8001782:	bd80      	pop	{r7, pc}

08001784 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}

080017a0 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	0052      	lsls	r2, r2, #1
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	605a      	str	r2, [r3, #4]
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}

080017be <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	605a      	str	r2, [r3, #4]
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}

080017dc <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	4393      	bics	r3, r2
 80017ec:	001a      	movs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	605a      	str	r2, [r3, #4]
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b002      	add	sp, #8
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a03      	ldr	r2, [pc, #12]	; (8001818 <LL_ADC_DisableIT_AWD2+0x1c>)
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	605a      	str	r2, [r3, #4]
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}
 8001818:	fffffeff 	.word	0xfffffeff

0800181c <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a03      	ldr	r2, [pc, #12]	; (8001838 <LL_ADC_DisableIT_AWD3+0x1c>)
 800182a:	401a      	ands	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	605a      	str	r2, [r3, #4]
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b002      	add	sp, #8
 8001836:	bd80      	pop	{r7, pc}
 8001838:	fffffdff 	.word	0xfffffdff

0800183c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001844:	231f      	movs	r3, #31
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1aa      	b.n	8001bb8 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10a      	bne.n	8001880 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	0018      	movs	r0, r3
 800186e:	f00a fdbb 	bl	800c3e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2254      	movs	r2, #84	; 0x54
 800187c:	2100      	movs	r1, #0
 800187e:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff feed 	bl	8001664 <LL_ADC_IsInternalRegulatorEnabled>
 800188a:	1e03      	subs	r3, r0, #0
 800188c:	d114      	bne.n	80018b8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0018      	movs	r0, r3
 8001894:	f7ff fed2 	bl	800163c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001898:	4bc9      	ldr	r3, [pc, #804]	; (8001bc0 <HAL_ADC_Init+0x384>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	49c9      	ldr	r1, [pc, #804]	; (8001bc4 <HAL_ADC_Init+0x388>)
 800189e:	0018      	movs	r0, r3
 80018a0:	f7fe fc2e 	bl	8000100 <__udivsi3>
 80018a4:	0003      	movs	r3, r0
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80018aa:	e002      	b.n	80018b2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f9      	bne.n	80018ac <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fed1 	bl	8001664 <LL_ADC_IsInternalRegulatorEnabled>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d10f      	bne.n	80018e6 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	2210      	movs	r2, #16
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	2201      	movs	r2, #1
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 80018de:	231f      	movs	r3, #31
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff ff16 	bl	800171c <LL_ADC_REG_IsConversionOngoing>
 80018f0:	0003      	movs	r3, r0
 80018f2:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	2210      	movs	r2, #16
 80018fa:	4013      	ands	r3, r2
 80018fc:	d000      	beq.n	8001900 <HAL_ADC_Init+0xc4>
 80018fe:	e14e      	b.n	8001b9e <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d000      	beq.n	8001908 <HAL_ADC_Init+0xcc>
 8001906:	e14a      	b.n	8001b9e <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	4aae      	ldr	r2, [pc, #696]	; (8001bc8 <HAL_ADC_Init+0x38c>)
 800190e:	4013      	ands	r3, r2
 8001910:	2202      	movs	r2, #2
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff fed9 	bl	80016d4 <LL_ADC_IsEnabled>
 8001922:	1e03      	subs	r3, r0, #0
 8001924:	d137      	bne.n	8001996 <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2218      	movs	r2, #24
 800192e:	4393      	bics	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	0899      	lsrs	r1, r3, #2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	0f9b      	lsrs	r3, r3, #30
 800194e:	079a      	lsls	r2, r3, #30
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	23c0      	movs	r3, #192	; 0xc0
 800195e:	061b      	lsls	r3, r3, #24
 8001960:	429a      	cmp	r2, r3
 8001962:	d018      	beq.n	8001996 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	05db      	lsls	r3, r3, #23
 800196c:	429a      	cmp	r2, r3
 800196e:	d012      	beq.n	8001996 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	061b      	lsls	r3, r3, #24
 8001978:	429a      	cmp	r2, r3
 800197a:	d00c      	beq.n	8001996 <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 800197c:	4b93      	ldr	r3, [pc, #588]	; (8001bcc <HAL_ADC_Init+0x390>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a93      	ldr	r2, [pc, #588]	; (8001bd0 <HAL_ADC_Init+0x394>)
 8001982:	4013      	ands	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	23f0      	movs	r3, #240	; 0xf0
 800198c:	039b      	lsls	r3, r3, #14
 800198e:	401a      	ands	r2, r3
 8001990:	4b8e      	ldr	r3, [pc, #568]	; (8001bcc <HAL_ADC_Init+0x390>)
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7e1b      	ldrb	r3, [r3, #24]
 800199a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7e5b      	ldrb	r3, [r3, #25]
 80019a0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7e9b      	ldrb	r3, [r3, #26]
 80019a8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80019aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <HAL_ADC_Init+0x17e>
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	015b      	lsls	r3, r3, #5
 80019b8:	e000      	b.n	80019bc <HAL_ADC_Init+0x180>
 80019ba:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80019bc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80019c2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da04      	bge.n	80019d6 <HAL_ADC_Init+0x19a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	e001      	b.n	80019da <HAL_ADC_Init+0x19e>
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 80019da:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	212c      	movs	r1, #44	; 0x2c
 80019e0:	5c5b      	ldrb	r3, [r3, r1]
 80019e2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80019e4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2220      	movs	r2, #32
 80019f0:	5c9b      	ldrb	r3, [r3, r2]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d115      	bne.n	8001a22 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7e9b      	ldrb	r3, [r3, #26]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	0252      	lsls	r2, r2, #9
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	e00b      	b.n	8001a22 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	2220      	movs	r2, #32
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00a      	beq.n	8001a40 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2e:	23e0      	movs	r3, #224	; 0xe0
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8001a48:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8001a4e:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8001a54:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	223c      	movs	r2, #60	; 0x3c
 8001a60:	5c9b      	ldrb	r3, [r3, r2]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d103      	bne.n	8001a6e <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <HAL_ADC_Init+0x398>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	4a53      	ldr	r2, [pc, #332]	; (8001bd8 <HAL_ADC_Init+0x39c>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa2:	001a      	movs	r2, r3
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	f7ff fcea 	bl	800147e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	494a      	ldr	r1, [pc, #296]	; (8001bdc <HAL_ADC_Init+0x3a0>)
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	f7ff fce2 	bl	800147e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2110      	movs	r1, #16
 8001ace:	4249      	negs	r1, r1
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ad4:	e03c      	b.n	8001b50 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	039b      	lsls	r3, r3, #14
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d136      	bne.n	8001b50 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	e00c      	b.n	8001b02 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	40da      	lsrs	r2, r3
 8001af2:	0013      	movs	r3, r2
 8001af4:	220f      	movs	r2, #15
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d006      	beq.n	8001b0a <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	3301      	adds	r3, #1
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b07      	cmp	r3, #7
 8001b06:	d9ef      	bls.n	8001ae8 <HAL_ADC_Init+0x2ac>
 8001b08:	e000      	b.n	8001b0c <HAL_ADC_Init+0x2d0>
        {
          break;
 8001b0a:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d109      	bne.n	8001b26 <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	4249      	negs	r1, r1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
 8001b24:	e014      	b.n	8001b50 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	4a2b      	ldr	r2, [pc, #172]	; (8001be0 <HAL_ADC_Init+0x3a4>)
 8001b32:	4694      	mov	ip, r2
 8001b34:	4463      	add	r3, ip
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	221c      	movs	r2, #28
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	4252      	negs	r2, r2
 8001b40:	409a      	lsls	r2, r3
 8001b42:	0011      	movs	r1, r2
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <HAL_ADC_Init+0x3a8>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d10b      	bne.n	8001b78 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	2201      	movs	r2, #1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001b76:	e01c      	b.n	8001bb2 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	2212      	movs	r2, #18
 8001b7e:	4393      	bics	r3, r2
 8001b80:	2210      	movs	r2, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8001b94:	231f      	movs	r3, #31
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001b9c:	e009      	b.n	8001bb2 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001baa:	231f      	movs	r3, #31
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bb2:	231f      	movs	r3, #31
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	781b      	ldrb	r3, [r3, #0]
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b008      	add	sp, #32
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	00030d40 	.word	0x00030d40
 8001bc8:	fffffefd 	.word	0xfffffefd
 8001bcc:	40012708 	.word	0x40012708
 8001bd0:	ffc3ffff 	.word	0xffc3ffff
 8001bd4:	fffe0219 	.word	0xfffe0219
 8001bd8:	dffffc02 	.word	0xdffffc02
 8001bdc:	07ffff04 	.word	0x07ffff04
 8001be0:	3fffffff 	.word	0x3fffffff
 8001be4:	833fffe7 	.word	0x833fffe7

08001be8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d102      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	e00f      	b.n	8001c20 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d007      	beq.n	8001c1c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	2220      	movs	r2, #32
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e06c      	b.n	8001cf6 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c20:	f7ff fbe0 	bl	80013e4 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c28:	e019      	b.n	8001c5e <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	d016      	beq.n	8001c5e <HAL_ADC_PollForConversion+0x76>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c30:	f7ff fbd8 	bl	80013e4 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d302      	bcc.n	8001c46 <HAL_ADC_PollForConversion+0x5e>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2254      	movs	r2, #84	; 0x54
 8001c56:	2100      	movs	r1, #0
 8001c58:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e04b      	b.n	8001cf6 <HAL_ADC_PollForConversion+0x10e>
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4013      	ands	r3, r2
 8001c68:	d0df      	beq.n	8001c2a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff fc1b 	bl	80014b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d02e      	beq.n	8001ce4 <HAL_ADC_PollForConversion+0xfc>
     && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7e9b      	ldrb	r3, [r3, #26]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d12a      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0xfc>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2208      	movs	r2, #8
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d123      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7ff fd3b 	bl	800171c <LL_ADC_REG_IsConversionOngoing>
 8001ca6:	1e03      	subs	r3, r0, #0
 8001ca8:	d110      	bne.n	8001ccc <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	210c      	movs	r1, #12
 8001cb6:	438a      	bics	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_ADC_PollForConversion+0x118>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	659a      	str	r2, [r3, #88]	; 0x58
 8001cca:	e00b      	b.n	8001ce4 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	2201      	movs	r2, #1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	65da      	str	r2, [r3, #92]	; 0x5c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7e1b      	ldrb	r3, [r3, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d103      	bne.n	8001cf4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b004      	add	sp, #16
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	fffffefe 	.word	0xfffffefe

08001d04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d04:	b5b0      	push	{r4, r5, r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff fd01 	bl	800171c <LL_ADC_REG_IsConversionOngoing>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d16c      	bne.n	8001df8 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2254      	movs	r2, #84	; 0x54
 8001d22:	5c9b      	ldrb	r3, [r3, r2]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_Start_DMA+0x28>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e06c      	b.n	8001e06 <HAL_ADC_Start_DMA+0x102>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2254      	movs	r2, #84	; 0x54
 8001d30:	2101      	movs	r1, #1
 8001d32:	5499      	strb	r1, [r3, r2]
    
    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d113      	bne.n	8001d68 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fcc5 	bl	80016d4 <LL_ADC_IsEnabled>
 8001d4a:	1e03      	subs	r3, r0, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff fcac 	bl	80016b0 <LL_ADC_Disable>
      }
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]
    }
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d68:	2517      	movs	r5, #23
 8001d6a:	197c      	adds	r4, r7, r5
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 fcd6 	bl	8002720 <ADC_Enable>
 8001d74:	0003      	movs	r3, r0
 8001d76:	7023      	strb	r3, [r4, #0]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d78:	197b      	adds	r3, r7, r5
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d13f      	bne.n	8001e00 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <HAL_ADC_Start_DMA+0x10c>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	2280      	movs	r2, #128	; 0x80
 8001d8a:	0052      	lsls	r2, r2, #1
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_ADC_Start_DMA+0x110>)
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da4:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_ADC_Start_DMA+0x114>)
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dac:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_ADC_Start_DMA+0x118>)
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	221c      	movs	r2, #28
 8001db6:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2254      	movs	r2, #84	; 0x54
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2110      	movs	r1, #16
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3340      	adds	r3, #64	; 0x40
 8001dda:	0019      	movs	r1, r3
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	2317      	movs	r3, #23
 8001de0:	18fc      	adds	r4, r7, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f000 feee 	bl	8002bc4 <HAL_DMA_Start_IT>
 8001de8:	0003      	movs	r3, r0
 8001dea:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff fc81 	bl	80016f8 <LL_ADC_REG_StartConversion>
 8001df6:	e003      	b.n	8001e00 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001df8:	2317      	movs	r3, #23
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e00:	2317      	movs	r3, #23
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	781b      	ldrb	r3, [r3, #0]
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b006      	add	sp, #24
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	fffff0fe 	.word	0xfffff0fe
 8001e14:	080027d9 	.word	0x080027d9
 8001e18:	080028a1 	.word	0x080028a1
 8001e1c:	080028bf 	.word	0x080028bf

08001e20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b002      	add	sp, #8
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b002      	add	sp, #8
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b002      	add	sp, #8
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b002      	add	sp, #8
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e72:	2317      	movs	r3, #23
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2254      	movs	r2, #84	; 0x54
 8001e82:	5c9b      	ldrb	r3, [r3, r2]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x24>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e1bc      	b.n	8002206 <HAL_ADC_ConfigChannel+0x39e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2254      	movs	r2, #84	; 0x54
 8001e90:	2101      	movs	r1, #1
 8001e92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff fc3f 	bl	800171c <LL_ADC_REG_IsConversionOngoing>
 8001e9e:	1e03      	subs	r3, r0, #0
 8001ea0:	d000      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x3c>
 8001ea2:	e19f      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d100      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x46>
 8001eac:	e13e      	b.n	800212c <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	061b      	lsls	r3, r3, #24
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d004      	beq.n	8001ec4 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001ebe:	4abf      	ldr	r2, [pc, #764]	; (80021bc <HAL_ADC_ConfigChannel+0x354>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d108      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0019      	movs	r1, r3
 8001ece:	0010      	movs	r0, r2
 8001ed0:	f7ff fb23 	bl	800151a <LL_ADC_REG_SetSequencerChAdd>
 8001ed4:	e0c9      	b.n	800206a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	211f      	movs	r1, #31
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	4099      	lsls	r1, r3
 8001ee6:	000b      	movs	r3, r1
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4013      	ands	r3, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	035b      	lsls	r3, r3, #13
 8001ef4:	0b5b      	lsrs	r3, r3, #13
 8001ef6:	d105      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x9c>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	221f      	movs	r2, #31
 8001f00:	4013      	ands	r3, r2
 8001f02:	e098      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d000      	beq.n	8001f10 <HAL_ADC_ConfigChannel+0xa8>
 8001f0e:	e091      	b.n	8002034 <HAL_ADC_ConfigChannel+0x1cc>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d000      	beq.n	8001f1c <HAL_ADC_ConfigChannel+0xb4>
 8001f1a:	e089      	b.n	8002030 <HAL_ADC_ConfigChannel+0x1c8>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2204      	movs	r2, #4
 8001f22:	4013      	ands	r3, r2
 8001f24:	d000      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0xc0>
 8001f26:	e081      	b.n	800202c <HAL_ADC_ConfigChannel+0x1c4>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d000      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0xcc>
 8001f32:	e079      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1c0>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d000      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0xd8>
 8001f3e:	e071      	b.n	8002024 <HAL_ADC_ConfigChannel+0x1bc>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2220      	movs	r2, #32
 8001f46:	4013      	ands	r3, r2
 8001f48:	d000      	beq.n	8001f4c <HAL_ADC_ConfigChannel+0xe4>
 8001f4a:	e069      	b.n	8002020 <HAL_ADC_ConfigChannel+0x1b8>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	4013      	ands	r3, r2
 8001f54:	d000      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0xf0>
 8001f56:	e061      	b.n	800201c <HAL_ADC_ConfigChannel+0x1b4>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d000      	beq.n	8001f64 <HAL_ADC_ConfigChannel+0xfc>
 8001f62:	e059      	b.n	8002018 <HAL_ADC_ConfigChannel+0x1b0>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d151      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1ac>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d149      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1a8>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4013      	ands	r3, r2
 8001f86:	d141      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1a4>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4013      	ands	r3, r2
 8001f92:	d139      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1a0>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d131      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x19c>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	019b      	lsls	r3, r3, #6
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d129      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x198>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d121      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x194>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d119      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x190>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	025b      	lsls	r3, r3, #9
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d111      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x18c>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	029b      	lsls	r3, r3, #10
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d109      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x188>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	02db      	lsls	r3, r3, #11
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d001      	beq.n	8001fec <HAL_ADC_ConfigChannel+0x184>
 8001fe8:	2312      	movs	r3, #18
 8001fea:	e024      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8001fec:	2300      	movs	r3, #0
 8001fee:	e022      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8001ff0:	2311      	movs	r3, #17
 8001ff2:	e020      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	e01e      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	e01c      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8001ffc:	230e      	movs	r3, #14
 8001ffe:	e01a      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002000:	230d      	movs	r3, #13
 8002002:	e018      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002004:	230c      	movs	r3, #12
 8002006:	e016      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002008:	230b      	movs	r3, #11
 800200a:	e014      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 800200c:	230a      	movs	r3, #10
 800200e:	e012      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002010:	2309      	movs	r3, #9
 8002012:	e010      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002014:	2308      	movs	r3, #8
 8002016:	e00e      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002018:	2307      	movs	r3, #7
 800201a:	e00c      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 800201c:	2306      	movs	r3, #6
 800201e:	e00a      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002020:	2305      	movs	r3, #5
 8002022:	e008      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002024:	2304      	movs	r3, #4
 8002026:	e006      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002028:	2303      	movs	r3, #3
 800202a:	e004      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 800202c:	2302      	movs	r3, #2
 800202e:	e002      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_ADC_ConfigChannel+0x1ce>
 8002034:	2300      	movs	r3, #0
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	6852      	ldr	r2, [r2, #4]
 800203a:	201f      	movs	r0, #31
 800203c:	4002      	ands	r2, r0
 800203e:	4093      	lsls	r3, r2
 8002040:	000a      	movs	r2, r1
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	429a      	cmp	r2, r3
 8002056:	d808      	bhi.n	800206a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	001a      	movs	r2, r3
 8002066:	f7ff fa38 	bl	80014da <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6819      	ldr	r1, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	001a      	movs	r2, r3
 8002078:	f7ff fa72 	bl	8001560 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db00      	blt.n	8002086 <HAL_ADC_ConfigChannel+0x21e>
 8002084:	e0b8      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002086:	4b4e      	ldr	r3, [pc, #312]	; (80021c0 <HAL_ADC_ConfigChannel+0x358>)
 8002088:	0018      	movs	r0, r3
 800208a:	f7ff f9eb 	bl	8001464 <LL_ADC_GetCommonPathInternalCh>
 800208e:	0003      	movs	r3, r0
 8002090:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <HAL_ADC_ConfigChannel+0x35c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d11d      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	4013      	ands	r3, r2
 80020a4:	d118      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	0412      	lsls	r2, r2, #16
 80020ac:	4313      	orrs	r3, r2
 80020ae:	4a44      	ldr	r2, [pc, #272]	; (80021c0 <HAL_ADC_ConfigChannel+0x358>)
 80020b0:	0019      	movs	r1, r3
 80020b2:	0010      	movs	r0, r2
 80020b4:	f7ff f9c2 	bl	800143c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80020b8:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <HAL_ADC_ConfigChannel+0x360>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4943      	ldr	r1, [pc, #268]	; (80021cc <HAL_ADC_ConfigChannel+0x364>)
 80020be:	0018      	movs	r0, r3
 80020c0:	f7fe f81e 	bl	8000100 <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80020c8:	e002      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f9      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020d6:	e08f      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a3c      	ldr	r2, [pc, #240]	; (80021d0 <HAL_ADC_ConfigChannel+0x368>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d10e      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x298>
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	045b      	lsls	r3, r3, #17
 80020e8:	4013      	ands	r3, r2
 80020ea:	d109      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	0452      	lsls	r2, r2, #17
 80020f2:	4313      	orrs	r3, r2
 80020f4:	4a32      	ldr	r2, [pc, #200]	; (80021c0 <HAL_ADC_ConfigChannel+0x358>)
 80020f6:	0019      	movs	r1, r3
 80020f8:	0010      	movs	r0, r2
 80020fa:	f7ff f99f 	bl	800143c <LL_ADC_SetCommonPathInternalCh>
 80020fe:	e07b      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a33      	ldr	r2, [pc, #204]	; (80021d4 <HAL_ADC_ConfigChannel+0x36c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d000      	beq.n	800210c <HAL_ADC_ConfigChannel+0x2a4>
 800210a:	e075      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	03db      	lsls	r3, r3, #15
 8002112:	4013      	ands	r3, r2
 8002114:	d000      	beq.n	8002118 <HAL_ADC_ConfigChannel+0x2b0>
 8002116:	e06f      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	03d2      	lsls	r2, r2, #15
 800211e:	4313      	orrs	r3, r2
 8002120:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_ADC_ConfigChannel+0x358>)
 8002122:	0019      	movs	r1, r3
 8002124:	0010      	movs	r0, r2
 8002126:	f7ff f989 	bl	800143c <LL_ADC_SetCommonPathInternalCh>
 800212a:	e065      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	429a      	cmp	r2, r3
 8002136:	d004      	beq.n	8002142 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800213c:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <HAL_ADC_ConfigChannel+0x354>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d107      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	0019      	movs	r1, r3
 800214c:	0010      	movs	r0, r2
 800214e:	f7ff f9f5 	bl	800153c <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	da4e      	bge.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_ADC_ConfigChannel+0x358>)
 800215c:	0018      	movs	r0, r3
 800215e:	f7ff f981 	bl	8001464 <LL_ADC_GetCommonPathInternalCh>
 8002162:	0003      	movs	r3, r0
 8002164:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <HAL_ADC_ConfigChannel+0x35c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d108      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_ADC_ConfigChannel+0x370>)
 8002174:	4013      	ands	r3, r2
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <HAL_ADC_ConfigChannel+0x358>)
 8002178:	0019      	movs	r1, r3
 800217a:	0010      	movs	r0, r2
 800217c:	f7ff f95e 	bl	800143c <LL_ADC_SetCommonPathInternalCh>
 8002180:	e03a      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <HAL_ADC_ConfigChannel+0x368>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d108      	bne.n	800219e <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4a13      	ldr	r2, [pc, #76]	; (80021dc <HAL_ADC_ConfigChannel+0x374>)
 8002190:	4013      	ands	r3, r2
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <HAL_ADC_ConfigChannel+0x358>)
 8002194:	0019      	movs	r1, r3
 8002196:	0010      	movs	r0, r2
 8002198:	f7ff f950 	bl	800143c <LL_ADC_SetCommonPathInternalCh>
 800219c:	e02c      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <HAL_ADC_ConfigChannel+0x36c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d127      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_ADC_ConfigChannel+0x378>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_ADC_ConfigChannel+0x358>)
 80021b0:	0019      	movs	r1, r3
 80021b2:	0010      	movs	r0, r2
 80021b4:	f7ff f942 	bl	800143c <LL_ADC_SetCommonPathInternalCh>
 80021b8:	e01e      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x390>
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	80000004 	.word	0x80000004
 80021c0:	40012708 	.word	0x40012708
 80021c4:	b0001000 	.word	0xb0001000
 80021c8:	2000000c 	.word	0x2000000c
 80021cc:	00030d40 	.word	0x00030d40
 80021d0:	b8004000 	.word	0xb8004000
 80021d4:	b4002000 	.word	0xb4002000
 80021d8:	ff7fffff 	.word	0xff7fffff
 80021dc:	feffffff 	.word	0xfeffffff
 80021e0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	2220      	movs	r2, #32
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80021f0:	2317      	movs	r3, #23
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2254      	movs	r2, #84	; 0x54
 80021fc:	2100      	movs	r1, #0
 80021fe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002200:	2317      	movs	r3, #23
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	781b      	ldrb	r3, [r3, #0]
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b006      	add	sp, #24
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)

08002210 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221a:	230f      	movs	r3, #15
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2254      	movs	r2, #84	; 0x54
 8002226:	5c9b      	ldrb	r3, [r3, r2]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_ADC_AnalogWDGConfig+0x20>
 800222c:	2302      	movs	r3, #2
 800222e:	e269      	b.n	8002704 <HAL_ADC_AnalogWDGConfig+0x4f4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2254      	movs	r2, #84	; 0x54
 8002234:	2101      	movs	r1, #1
 8002236:	5499      	strb	r1, [r3, r2]
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0018      	movs	r0, r3
 800223e:	f7ff fa6d 	bl	800171c <LL_ADC_REG_IsConversionOngoing>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d000      	beq.n	8002248 <HAL_ADC_AnalogWDGConfig+0x38>
 8002246:	e22a      	b.n	800269e <HAL_ADC_AnalogWDGConfig+0x48e>
  {
    /* Analog watchdog configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a93      	ldr	r2, [pc, #588]	; (800249c <HAL_ADC_AnalogWDGConfig+0x28c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d142      	bne.n	80022d8 <HAL_ADC_AnalogWDGConfig+0xc8>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch(AnalogWDGConfig->WatchdogMode)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	0412      	lsls	r2, r2, #16
 800225a:	4293      	cmp	r3, r2
 800225c:	d011      	beq.n	8002282 <HAL_ADC_AnalogWDGConfig+0x72>
 800225e:	22c0      	movs	r2, #192	; 0xc0
 8002260:	0412      	lsls	r2, r2, #16
 8002262:	4293      	cmp	r3, r2
 8002264:	d115      	bne.n	8002292 <HAL_ADC_AnalogWDGConfig+0x82>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel, LL_ADC_GROUP_REGULAR));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	4a8c      	ldr	r2, [pc, #560]	; (80024a0 <HAL_ADC_AnalogWDGConfig+0x290>)
 8002270:	4013      	ands	r3, r2
 8002272:	22c0      	movs	r2, #192	; 0xc0
 8002274:	0412      	lsls	r2, r2, #16
 8002276:	4313      	orrs	r3, r2
 8002278:	4988      	ldr	r1, [pc, #544]	; (800249c <HAL_ADC_AnalogWDGConfig+0x28c>)
 800227a:	001a      	movs	r2, r3
 800227c:	f7ff f98c 	bl	8001598 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002280:	e00f      	b.n	80022a2 <HAL_ADC_AnalogWDGConfig+0x92>
        
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a87      	ldr	r2, [pc, #540]	; (80024a4 <HAL_ADC_AnalogWDGConfig+0x294>)
 8002288:	4984      	ldr	r1, [pc, #528]	; (800249c <HAL_ADC_AnalogWDGConfig+0x28c>)
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff f984 	bl	8001598 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002290:	e007      	b.n	80022a2 <HAL_ADC_AnalogWDGConfig+0x92>
        
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4981      	ldr	r1, [pc, #516]	; (800249c <HAL_ADC_AnalogWDGConfig+0x28c>)
 8002298:	2200      	movs	r2, #0
 800229a:	0018      	movs	r0, r3
 800229c:	f7ff f97c 	bl	8001598 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80022a0:	46c0      	nop			; (mov r8, r8)
      }
      
      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a80      	ldr	r2, [pc, #512]	; (80024a8 <HAL_ADC_AnalogWDGConfig+0x298>)
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f7ff fa43 	bl	800173e <LL_ADC_ClearFlag_AWD1>
      
      /* Configure ADC analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	7b1b      	ldrb	r3, [r3, #12]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <HAL_ADC_AnalogWDGConfig+0xbc>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff fa5d 	bl	8001784 <LL_ADC_EnableIT_AWD1>
 80022ca:	e1e8      	b.n	800269e <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff fa83 	bl	80017dc <LL_ADC_DisableIT_AWD1>
 80022d6:	e1e2      	b.n	800269e <HAL_ADC_AnalogWDGConfig+0x48e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch(AnalogWDGConfig->WatchdogMode)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	0412      	lsls	r2, r2, #16
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d100      	bne.n	80022e6 <HAL_ADC_AnalogWDGConfig+0xd6>
 80022e4:	e18f      	b.n	8002606 <HAL_ADC_AnalogWDGConfig+0x3f6>
 80022e6:	22c0      	movs	r2, #192	; 0xc0
 80022e8:	0412      	lsls	r2, r2, #16
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d000      	beq.n	80022f0 <HAL_ADC_AnalogWDGConfig+0xe0>
 80022ee:	e193      	b.n	8002618 <HAL_ADC_AnalogWDGConfig+0x408>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6d      	ldr	r2, [pc, #436]	; (80024ac <HAL_ADC_AnalogWDGConfig+0x29c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d000      	beq.n	80022fc <HAL_ADC_AnalogWDGConfig+0xec>
 80022fa:	e0bc      	b.n	8002476 <HAL_ADC_AnalogWDGConfig+0x266>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	22a0      	movs	r2, #160	; 0xa0
 8002302:	5899      	ldr	r1, [r3, r2]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	035b      	lsls	r3, r3, #13
 800230a:	0b5b      	lsrs	r3, r3, #13
 800230c:	d108      	bne.n	8002320 <HAL_ADC_AnalogWDGConfig+0x110>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	221f      	movs	r2, #31
 8002316:	4013      	ands	r3, r2
 8002318:	2201      	movs	r2, #1
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	e0a4      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2201      	movs	r2, #1
 8002326:	4013      	ands	r3, r2
 8002328:	d000      	beq.n	800232c <HAL_ADC_AnalogWDGConfig+0x11c>
 800232a:	e09d      	b.n	8002468 <HAL_ADC_AnalogWDGConfig+0x258>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2202      	movs	r2, #2
 8002332:	4013      	ands	r3, r2
 8002334:	d000      	beq.n	8002338 <HAL_ADC_AnalogWDGConfig+0x128>
 8002336:	e095      	b.n	8002464 <HAL_ADC_AnalogWDGConfig+0x254>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2204      	movs	r2, #4
 800233e:	4013      	ands	r3, r2
 8002340:	d000      	beq.n	8002344 <HAL_ADC_AnalogWDGConfig+0x134>
 8002342:	e08d      	b.n	8002460 <HAL_ADC_AnalogWDGConfig+0x250>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2208      	movs	r2, #8
 800234a:	4013      	ands	r3, r2
 800234c:	d000      	beq.n	8002350 <HAL_ADC_AnalogWDGConfig+0x140>
 800234e:	e085      	b.n	800245c <HAL_ADC_AnalogWDGConfig+0x24c>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2210      	movs	r2, #16
 8002356:	4013      	ands	r3, r2
 8002358:	d000      	beq.n	800235c <HAL_ADC_AnalogWDGConfig+0x14c>
 800235a:	e07d      	b.n	8002458 <HAL_ADC_AnalogWDGConfig+0x248>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2220      	movs	r2, #32
 8002362:	4013      	ands	r3, r2
 8002364:	d000      	beq.n	8002368 <HAL_ADC_AnalogWDGConfig+0x158>
 8002366:	e075      	b.n	8002454 <HAL_ADC_AnalogWDGConfig+0x244>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2240      	movs	r2, #64	; 0x40
 800236e:	4013      	ands	r3, r2
 8002370:	d000      	beq.n	8002374 <HAL_ADC_AnalogWDGConfig+0x164>
 8002372:	e06d      	b.n	8002450 <HAL_ADC_AnalogWDGConfig+0x240>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	4013      	ands	r3, r2
 800237c:	d000      	beq.n	8002380 <HAL_ADC_AnalogWDGConfig+0x170>
 800237e:	e065      	b.n	800244c <HAL_ADC_AnalogWDGConfig+0x23c>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4013      	ands	r3, r2
 800238a:	d000      	beq.n	800238e <HAL_ADC_AnalogWDGConfig+0x17e>
 800238c:	e05b      	b.n	8002446 <HAL_ADC_AnalogWDGConfig+0x236>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d152      	bne.n	8002440 <HAL_ADC_AnalogWDGConfig+0x230>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4013      	ands	r3, r2
 80023a4:	d149      	bne.n	800243a <HAL_ADC_AnalogWDGConfig+0x22a>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4013      	ands	r3, r2
 80023b0:	d140      	bne.n	8002434 <HAL_ADC_AnalogWDGConfig+0x224>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	015b      	lsls	r3, r3, #5
 80023ba:	4013      	ands	r3, r2
 80023bc:	d137      	bne.n	800242e <HAL_ADC_AnalogWDGConfig+0x21e>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	019b      	lsls	r3, r3, #6
 80023c6:	4013      	ands	r3, r2
 80023c8:	d12e      	bne.n	8002428 <HAL_ADC_AnalogWDGConfig+0x218>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	01db      	lsls	r3, r3, #7
 80023d2:	4013      	ands	r3, r2
 80023d4:	d125      	bne.n	8002422 <HAL_ADC_AnalogWDGConfig+0x212>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	4013      	ands	r3, r2
 80023e0:	d11c      	bne.n	800241c <HAL_ADC_AnalogWDGConfig+0x20c>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	025b      	lsls	r3, r3, #9
 80023ea:	4013      	ands	r3, r2
 80023ec:	d113      	bne.n	8002416 <HAL_ADC_AnalogWDGConfig+0x206>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	4013      	ands	r3, r2
 80023f8:	d10a      	bne.n	8002410 <HAL_ADC_AnalogWDGConfig+0x200>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	02db      	lsls	r3, r3, #11
 8002402:	4013      	ands	r3, r2
 8002404:	d002      	beq.n	800240c <HAL_ADC_AnalogWDGConfig+0x1fc>
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	02db      	lsls	r3, r3, #11
 800240a:	e02e      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 800240c:	2301      	movs	r3, #1
 800240e:	e02c      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	e029      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	025b      	lsls	r3, r3, #9
 800241a:	e026      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	e023      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	01db      	lsls	r3, r3, #7
 8002426:	e020      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	019b      	lsls	r3, r3, #6
 800242c:	e01d      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	015b      	lsls	r3, r3, #5
 8002432:	e01a      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	e017      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	e014      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	e011      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	e00e      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	e00c      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002450:	2340      	movs	r3, #64	; 0x40
 8002452:	e00a      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002454:	2320      	movs	r3, #32
 8002456:	e008      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002458:	2310      	movs	r3, #16
 800245a:	e006      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 800245c:	2308      	movs	r3, #8
 800245e:	e004      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002460:	2304      	movs	r3, #4
 8002462:	e002      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002464:	2302      	movs	r3, #2
 8002466:	e000      	b.n	800246a <HAL_ADC_AnalogWDGConfig+0x25a>
 8002468:	2301      	movs	r3, #1
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	430b      	orrs	r3, r1
 8002470:	21a0      	movs	r1, #160	; 0xa0
 8002472:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
          }
          break;
 8002474:	e0d9      	b.n	800262a <HAL_ADC_AnalogWDGConfig+0x41a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	22a4      	movs	r2, #164	; 0xa4
 800247c:	5899      	ldr	r1, [r3, r2]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	035b      	lsls	r3, r3, #13
 8002484:	0b5b      	lsrs	r3, r3, #13
 8002486:	d113      	bne.n	80024b0 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	221f      	movs	r2, #31
 8002490:	4013      	ands	r3, r2
 8002492:	2201      	movs	r2, #1
 8002494:	409a      	lsls	r2, r3
 8002496:	0013      	movs	r3, r2
 8002498:	e0af      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	7cc00000 	.word	0x7cc00000
 80024a0:	fc07ffff 	.word	0xfc07ffff
 80024a4:	0087ffff 	.word	0x0087ffff
 80024a8:	fffeffff 	.word	0xfffeffff
 80024ac:	0017ffff 	.word	0x0017ffff
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	d000      	beq.n	80024bc <HAL_ADC_AnalogWDGConfig+0x2ac>
 80024ba:	e09d      	b.n	80025f8 <HAL_ADC_AnalogWDGConfig+0x3e8>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2202      	movs	r2, #2
 80024c2:	4013      	ands	r3, r2
 80024c4:	d000      	beq.n	80024c8 <HAL_ADC_AnalogWDGConfig+0x2b8>
 80024c6:	e095      	b.n	80025f4 <HAL_ADC_AnalogWDGConfig+0x3e4>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2204      	movs	r2, #4
 80024ce:	4013      	ands	r3, r2
 80024d0:	d000      	beq.n	80024d4 <HAL_ADC_AnalogWDGConfig+0x2c4>
 80024d2:	e08d      	b.n	80025f0 <HAL_ADC_AnalogWDGConfig+0x3e0>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2208      	movs	r2, #8
 80024da:	4013      	ands	r3, r2
 80024dc:	d000      	beq.n	80024e0 <HAL_ADC_AnalogWDGConfig+0x2d0>
 80024de:	e085      	b.n	80025ec <HAL_ADC_AnalogWDGConfig+0x3dc>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2210      	movs	r2, #16
 80024e6:	4013      	ands	r3, r2
 80024e8:	d000      	beq.n	80024ec <HAL_ADC_AnalogWDGConfig+0x2dc>
 80024ea:	e07d      	b.n	80025e8 <HAL_ADC_AnalogWDGConfig+0x3d8>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2220      	movs	r2, #32
 80024f2:	4013      	ands	r3, r2
 80024f4:	d000      	beq.n	80024f8 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80024f6:	e075      	b.n	80025e4 <HAL_ADC_AnalogWDGConfig+0x3d4>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2240      	movs	r2, #64	; 0x40
 80024fe:	4013      	ands	r3, r2
 8002500:	d000      	beq.n	8002504 <HAL_ADC_AnalogWDGConfig+0x2f4>
 8002502:	e06d      	b.n	80025e0 <HAL_ADC_AnalogWDGConfig+0x3d0>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	4013      	ands	r3, r2
 800250c:	d000      	beq.n	8002510 <HAL_ADC_AnalogWDGConfig+0x300>
 800250e:	e065      	b.n	80025dc <HAL_ADC_AnalogWDGConfig+0x3cc>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4013      	ands	r3, r2
 800251a:	d000      	beq.n	800251e <HAL_ADC_AnalogWDGConfig+0x30e>
 800251c:	e05b      	b.n	80025d6 <HAL_ADC_AnalogWDGConfig+0x3c6>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d152      	bne.n	80025d0 <HAL_ADC_AnalogWDGConfig+0x3c0>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4013      	ands	r3, r2
 8002534:	d149      	bne.n	80025ca <HAL_ADC_AnalogWDGConfig+0x3ba>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	4013      	ands	r3, r2
 8002540:	d140      	bne.n	80025c4 <HAL_ADC_AnalogWDGConfig+0x3b4>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	015b      	lsls	r3, r3, #5
 800254a:	4013      	ands	r3, r2
 800254c:	d137      	bne.n	80025be <HAL_ADC_AnalogWDGConfig+0x3ae>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	019b      	lsls	r3, r3, #6
 8002556:	4013      	ands	r3, r2
 8002558:	d12e      	bne.n	80025b8 <HAL_ADC_AnalogWDGConfig+0x3a8>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	01db      	lsls	r3, r3, #7
 8002562:	4013      	ands	r3, r2
 8002564:	d125      	bne.n	80025b2 <HAL_ADC_AnalogWDGConfig+0x3a2>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	4013      	ands	r3, r2
 8002570:	d11c      	bne.n	80025ac <HAL_ADC_AnalogWDGConfig+0x39c>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	025b      	lsls	r3, r3, #9
 800257a:	4013      	ands	r3, r2
 800257c:	d113      	bne.n	80025a6 <HAL_ADC_AnalogWDGConfig+0x396>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	029b      	lsls	r3, r3, #10
 8002586:	4013      	ands	r3, r2
 8002588:	d10a      	bne.n	80025a0 <HAL_ADC_AnalogWDGConfig+0x390>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	02db      	lsls	r3, r3, #11
 8002592:	4013      	ands	r3, r2
 8002594:	d002      	beq.n	800259c <HAL_ADC_AnalogWDGConfig+0x38c>
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	02db      	lsls	r3, r3, #11
 800259a:	e02e      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 800259c:	2301      	movs	r3, #1
 800259e:	e02c      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	029b      	lsls	r3, r3, #10
 80025a4:	e029      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	e026      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	e023      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	01db      	lsls	r3, r3, #7
 80025b6:	e020      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	019b      	lsls	r3, r3, #6
 80025bc:	e01d      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	015b      	lsls	r3, r3, #5
 80025c2:	e01a      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	e017      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	e014      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	e011      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	e00e      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	e00c      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025e0:	2340      	movs	r3, #64	; 0x40
 80025e2:	e00a      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025e4:	2320      	movs	r3, #32
 80025e6:	e008      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025e8:	2310      	movs	r3, #16
 80025ea:	e006      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025ec:	2308      	movs	r3, #8
 80025ee:	e004      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025f0:	2304      	movs	r3, #4
 80025f2:	e002      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e000      	b.n	80025fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80025f8:	2301      	movs	r3, #1
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	430b      	orrs	r3, r1
 8002600:	21a4      	movs	r1, #164	; 0xa4
 8002602:	5053      	str	r3, [r2, r1]
          break;
 8002604:	e011      	b.n	800262a <HAL_ADC_AnalogWDGConfig+0x41a>
          
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a3f      	ldr	r2, [pc, #252]	; (800270c <HAL_ADC_AnalogWDGConfig+0x4fc>)
 8002610:	0019      	movs	r1, r3
 8002612:	f7fe ffc1 	bl	8001598 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002616:	e008      	b.n	800262a <HAL_ADC_AnalogWDGConfig+0x41a>
          
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	0019      	movs	r1, r3
 8002624:	f7fe ffb8 	bl	8001598 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002628:	46c0      	nop			; (mov r8, r8)
      }
      
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a38      	ldr	r2, [pc, #224]	; (8002710 <HAL_ADC_AnalogWDGConfig+0x500>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d11a      	bne.n	800266a <HAL_ADC_AnalogWDGConfig+0x45a>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	4a36      	ldr	r2, [pc, #216]	; (8002714 <HAL_ADC_AnalogWDGConfig+0x504>)
 800263a:	401a      	ands	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff f885 	bl	8001754 <LL_ADC_ClearFlag_AWD2>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	7b1b      	ldrb	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_ADC_AnalogWDGConfig+0x44e>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0018      	movs	r0, r3
 8002658:	f7ff f8a2 	bl	80017a0 <LL_ADC_EnableIT_AWD2>
 800265c:	e01f      	b.n	800269e <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0018      	movs	r0, r3
 8002664:	f7ff f8ca 	bl	80017fc <LL_ADC_DisableIT_AWD2>
 8002668:	e019      	b.n	800269e <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <HAL_ADC_AnalogWDGConfig+0x508>)
 8002670:	401a      	ands	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0018      	movs	r0, r3
 800267c:	f7ff f876 	bl	800176c <LL_ADC_ClearFlag_AWD3>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7b1b      	ldrb	r3, [r3, #12]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_ADC_AnalogWDGConfig+0x484>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff f896 	bl	80017be <LL_ADC_EnableIT_AWD3>
 8002692:	e004      	b.n	800269e <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff f8bf 	bl	800181c <LL_ADC_DisableIT_AWD3>
    }
    
  }
    
  /* Analog watchdog thresholds configuration */
  if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <HAL_ADC_AnalogWDGConfig+0x50c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d118      	bne.n	80026da <HAL_ADC_AnalogWDGConfig+0x4ca>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */ 
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	08db      	lsrs	r3, r3, #3
 80026b4:	2103      	movs	r1, #3
 80026b6:	400b      	ands	r3, r1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	0013      	movs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	08db      	lsrs	r3, r3, #3
 80026cc:	2103      	movs	r1, #3
 80026ce:	400b      	ands	r3, r1
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	409a      	lsls	r2, r3
 80026d4:	0013      	movs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	e005      	b.n	80026e6 <HAL_ADC_AnalogWDGConfig+0x4d6>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = AnalogWDGConfig->HighThreshold;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	613b      	str	r3, [r7, #16]
  }
  
  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6819      	ldr	r1, [r3, #0]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	f7fe ff7d 	bl	80015f0 <LL_ADC_ConfigAnalogWDThresholds>
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2254      	movs	r2, #84	; 0x54
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80026fe:	230f      	movs	r3, #15
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	781b      	ldrb	r3, [r3, #0]
}
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	b006      	add	sp, #24
 800270a:	bd80      	pop	{r7, pc}
 800270c:	0087ffff 	.word	0x0087ffff
 8002710:	0017ffff 	.word	0x0017ffff
 8002714:	fffdffff 	.word	0xfffdffff
 8002718:	fffbffff 	.word	0xfffbffff
 800271c:	7cc00000 	.word	0x7cc00000

08002720 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0018      	movs	r0, r3
 800272e:	f7fe ffd1 	bl	80016d4 <LL_ADC_IsEnabled>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d149      	bne.n	80027ca <ADC_Enable+0xaa>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <ADC_Enable+0xb4>)
 800273e:	4013      	ands	r3, r2
 8002740:	d00d      	beq.n	800275e <ADC_Enable+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	2210      	movs	r2, #16
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2201      	movs	r2, #1
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e036      	b.n	80027cc <ADC_Enable+0xac>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0018      	movs	r0, r3
 8002764:	f7fe ff92 	bl	800168c <LL_ADC_Enable>
    
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7e5b      	ldrb	r3, [r3, #25]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d02c      	beq.n	80027ca <ADC_Enable+0xaa>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002770:	f7fe fe38 	bl	80013e4 <HAL_GetTick>
 8002774:	0003      	movs	r3, r0
 8002776:	60fb      	str	r3, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002778:	e020      	b.n	80027bc <ADC_Enable+0x9c>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0018      	movs	r0, r3
 8002780:	f7fe ffa8 	bl	80016d4 <LL_ADC_IsEnabled>
 8002784:	1e03      	subs	r3, r0, #0
 8002786:	d104      	bne.n	8002792 <ADC_Enable+0x72>
        {
          LL_ADC_Enable(hadc->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0018      	movs	r0, r3
 800278e:	f7fe ff7d 	bl	800168c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002792:	f7fe fe27 	bl	80013e4 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d90d      	bls.n	80027bc <ADC_Enable+0x9c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	2210      	movs	r2, #16
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2201      	movs	r2, #1
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	65da      	str	r2, [r3, #92]	; 0x5c
          
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e007      	b.n	80027cc <ADC_Enable+0xac>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d1d7      	bne.n	800277a <ADC_Enable+0x5a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b004      	add	sp, #16
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	80000017 	.word	0x80000017

080027d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	2250      	movs	r2, #80	; 0x50
 80027ec:	4013      	ands	r3, r2
 80027ee:	d141      	bne.n	8002874 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0018      	movs	r0, r3
 8002804:	f7fe fe58 	bl	80014b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002808:	1e03      	subs	r3, r0, #0
 800280a:	d02e      	beq.n	800286a <ADC_DMAConvCplt+0x92>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	7e9b      	ldrb	r3, [r3, #26]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d12a      	bne.n	800286a <ADC_DMAConvCplt+0x92>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2208      	movs	r2, #8
 800281c:	4013      	ands	r3, r2
 800281e:	2b08      	cmp	r3, #8
 8002820:	d123      	bne.n	800286a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0018      	movs	r0, r3
 8002828:	f7fe ff78 	bl	800171c <LL_ADC_REG_IsConversionOngoing>
 800282c:	1e03      	subs	r3, r0, #0
 800282e:	d110      	bne.n	8002852 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	210c      	movs	r1, #12
 800283c:	438a      	bics	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	4a15      	ldr	r2, [pc, #84]	; (800289c <ADC_DMAConvCplt+0xc4>)
 8002846:	4013      	ands	r3, r2
 8002848:	2201      	movs	r2, #1
 800284a:	431a      	orrs	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	659a      	str	r2, [r3, #88]	; 0x58
 8002850:	e00b      	b.n	800286a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	2220      	movs	r2, #32
 8002858:	431a      	orrs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002862:	2201      	movs	r2, #1
 8002864:	431a      	orrs	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	0018      	movs	r0, r3
 800286e:	f7ff fae2 	bl	8001e36 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002872:	e00f      	b.n	8002894 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	2210      	movs	r2, #16
 800287a:	4013      	ands	r3, r2
 800287c:	d004      	beq.n	8002888 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	0018      	movs	r0, r3
 8002882:	f7ff fae8 	bl	8001e56 <HAL_ADC_ErrorCallback>
}
 8002886:	e005      	b.n	8002894 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	0010      	movs	r0, r2
 8002892:	4798      	blx	r3
}
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	fffffefe 	.word	0xfffffefe

080028a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7ff fac8 	bl	8001e46 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bd80      	pop	{r7, pc}

080028be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	2240      	movs	r2, #64	; 0x40
 80028d2:	431a      	orrs	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	2204      	movs	r2, #4
 80028de:	431a      	orrs	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7ff fab5 	bl	8001e56 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b004      	add	sp, #16
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	0002      	movs	r2, r0
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002900:	1dfb      	adds	r3, r7, #7
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b7f      	cmp	r3, #127	; 0x7f
 8002906:	d809      	bhi.n	800291c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	001a      	movs	r2, r3
 800290e:	231f      	movs	r3, #31
 8002910:	401a      	ands	r2, r3
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <__NVIC_EnableIRQ+0x30>)
 8002914:	2101      	movs	r1, #1
 8002916:	4091      	lsls	r1, r2
 8002918:	000a      	movs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
  }
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}
 8002924:	e000e100 	.word	0xe000e100

08002928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	0002      	movs	r2, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b7f      	cmp	r3, #127	; 0x7f
 800293c:	d828      	bhi.n	8002990 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800293e:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <__NVIC_SetPriority+0xd4>)
 8002940:	1dfb      	adds	r3, r7, #7
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	b25b      	sxtb	r3, r3
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	33c0      	adds	r3, #192	; 0xc0
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	589b      	ldr	r3, [r3, r2]
 800294e:	1dfa      	adds	r2, r7, #7
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	0011      	movs	r1, r2
 8002954:	2203      	movs	r2, #3
 8002956:	400a      	ands	r2, r1
 8002958:	00d2      	lsls	r2, r2, #3
 800295a:	21ff      	movs	r1, #255	; 0xff
 800295c:	4091      	lsls	r1, r2
 800295e:	000a      	movs	r2, r1
 8002960:	43d2      	mvns	r2, r2
 8002962:	401a      	ands	r2, r3
 8002964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	019b      	lsls	r3, r3, #6
 800296a:	22ff      	movs	r2, #255	; 0xff
 800296c:	401a      	ands	r2, r3
 800296e:	1dfb      	adds	r3, r7, #7
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	0018      	movs	r0, r3
 8002974:	2303      	movs	r3, #3
 8002976:	4003      	ands	r3, r0
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800297c:	481f      	ldr	r0, [pc, #124]	; (80029fc <__NVIC_SetPriority+0xd4>)
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b25b      	sxtb	r3, r3
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	430a      	orrs	r2, r1
 8002988:	33c0      	adds	r3, #192	; 0xc0
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800298e:	e031      	b.n	80029f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002990:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <__NVIC_SetPriority+0xd8>)
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	0019      	movs	r1, r3
 8002998:	230f      	movs	r3, #15
 800299a:	400b      	ands	r3, r1
 800299c:	3b08      	subs	r3, #8
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3306      	adds	r3, #6
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	18d3      	adds	r3, r2, r3
 80029a6:	3304      	adds	r3, #4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1dfa      	adds	r2, r7, #7
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	0011      	movs	r1, r2
 80029b0:	2203      	movs	r2, #3
 80029b2:	400a      	ands	r2, r1
 80029b4:	00d2      	lsls	r2, r2, #3
 80029b6:	21ff      	movs	r1, #255	; 0xff
 80029b8:	4091      	lsls	r1, r2
 80029ba:	000a      	movs	r2, r1
 80029bc:	43d2      	mvns	r2, r2
 80029be:	401a      	ands	r2, r3
 80029c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	019b      	lsls	r3, r3, #6
 80029c6:	22ff      	movs	r2, #255	; 0xff
 80029c8:	401a      	ands	r2, r3
 80029ca:	1dfb      	adds	r3, r7, #7
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	0018      	movs	r0, r3
 80029d0:	2303      	movs	r3, #3
 80029d2:	4003      	ands	r3, r0
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029d8:	4809      	ldr	r0, [pc, #36]	; (8002a00 <__NVIC_SetPriority+0xd8>)
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	001c      	movs	r4, r3
 80029e0:	230f      	movs	r3, #15
 80029e2:	4023      	ands	r3, r4
 80029e4:	3b08      	subs	r3, #8
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	430a      	orrs	r2, r1
 80029ea:	3306      	adds	r3, #6
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	18c3      	adds	r3, r0, r3
 80029f0:	3304      	adds	r3, #4
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b003      	add	sp, #12
 80029fa:	bd90      	pop	{r4, r7, pc}
 80029fc:	e000e100 	.word	0xe000e100
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <SysTick_Config+0x40>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a16:	2301      	movs	r3, #1
 8002a18:	e010      	b.n	8002a3c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <SysTick_Config+0x44>)
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	3a01      	subs	r2, #1
 8002a20:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a22:	2301      	movs	r3, #1
 8002a24:	425b      	negs	r3, r3
 8002a26:	2103      	movs	r1, #3
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff ff7d 	bl	8002928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <SysTick_Config+0x44>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <SysTick_Config+0x44>)
 8002a36:	2207      	movs	r2, #7
 8002a38:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	00ffffff 	.word	0x00ffffff
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	210f      	movs	r1, #15
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	1c02      	adds	r2, r0, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	0011      	movs	r1, r2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff ff5d 	bl	8002928 <__NVIC_SetPriority>
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b004      	add	sp, #16
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff ff33 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff ffaf 	bl	8002a04 <SysTick_Config>
 8002aa6:	0003      	movs	r3, r0
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e077      	b.n	8002bb2 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a3d      	ldr	r2, [pc, #244]	; (8002bbc <HAL_DMA_Init+0x10c>)
 8002ac8:	4694      	mov	ip, r2
 8002aca:	4463      	add	r3, ip
 8002acc:	2114      	movs	r1, #20
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7fd fb16 	bl	8000100 <__udivsi3>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	009a      	lsls	r2, r3, #2
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2225      	movs	r2, #37	; 0x25
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4934      	ldr	r1, [pc, #208]	; (8002bc0 <HAL_DMA_Init+0x110>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fa3d 	bl	8002fac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	01db      	lsls	r3, r3, #7
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d102      	bne.n	8002b44 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	21ff      	movs	r1, #255	; 0xff
 8002b4e:	400a      	ands	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b5a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d011      	beq.n	8002b88 <HAL_DMA_Init+0xd8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d80d      	bhi.n	8002b88 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 fa48 	bl	8003004 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	e008      	b.n	8002b9a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2225      	movs	r2, #37	; 0x25
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2224      	movs	r2, #36	; 0x24
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	bffdfff8 	.word	0xbffdfff8
 8002bc0:	ffff800f 	.word	0xffff800f

08002bc4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2317      	movs	r3, #23
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2224      	movs	r2, #36	; 0x24
 8002bde:	5c9b      	ldrb	r3, [r3, r2]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_DMA_Start_IT+0x24>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e070      	b.n	8002cca <HAL_DMA_Start_IT+0x106>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2224      	movs	r2, #36	; 0x24
 8002bec:	2101      	movs	r1, #1
 8002bee:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2225      	movs	r2, #37	; 0x25
 8002bf4:	5c9b      	ldrb	r3, [r3, r2]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d157      	bne.n	8002cac <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2225      	movs	r2, #37	; 0x25
 8002c00:	2102      	movs	r1, #2
 8002c02:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	438a      	bics	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f983 	bl	8002f2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	210e      	movs	r1, #14
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e00f      	b.n	8002c60 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	210a      	movs	r1, #10
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	025b      	lsls	r3, r3, #9
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d008      	beq.n	8002c80 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	0049      	lsls	r1, r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	2180      	movs	r1, #128	; 0x80
 8002c94:	0049      	lsls	r1, r1, #1
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cb4:	2317      	movs	r3, #23
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2202      	movs	r2, #2
 8002cba:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2224      	movs	r2, #36	; 0x24
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

  return status;
 8002cc4:	2317      	movs	r3, #23
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b006      	add	sp, #24
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	230f      	movs	r3, #15
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	; 0x24
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	; 0x24
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_DMA_Abort_IT+0x26>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e05e      	b.n	8002db8 <HAL_DMA_Abort_IT+0xe4>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2224      	movs	r2, #36	; 0x24
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2225      	movs	r2, #37	; 0x25
 8002d06:	5c9b      	ldrb	r3, [r3, r2]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d007      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2204      	movs	r2, #4
 8002d12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d14:	230f      	movs	r3, #15
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e049      	b.n	8002db2 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	210e      	movs	r1, #14
 8002d2a:	438a      	bics	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	438a      	bics	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	491d      	ldr	r1, [pc, #116]	; (8002dc0 <HAL_DMA_Abort_IT+0xec>)
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_DMA_Abort_IT+0xf0>)
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	221c      	movs	r2, #28
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_DMA_Abort_IT+0xf0>)
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00c      	beq.n	8002d90 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d80:	490f      	ldr	r1, [pc, #60]	; (8002dc0 <HAL_DMA_Abort_IT+0xec>)
 8002d82:	400a      	ands	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002d8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2225      	movs	r2, #37	; 0x25
 8002d94:	2101      	movs	r1, #1
 8002d96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	0010      	movs	r0, r2
 8002db0:	4798      	blx	r3
    }
  }
  return status;
 8002db2:	230f      	movs	r3, #15
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	781b      	ldrb	r3, [r3, #0]
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b004      	add	sp, #16
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	fffffeff 	.word	0xfffffeff
 8002dc4:	40020000 	.word	0x40020000

08002dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002dd0:	4b55      	ldr	r3, [pc, #340]	; (8002f28 <HAL_DMA_IRQHandler+0x160>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	221c      	movs	r2, #28
 8002de4:	4013      	ands	r3, r2
 8002de6:	2204      	movs	r2, #4
 8002de8:	409a      	lsls	r2, r3
 8002dea:	0013      	movs	r3, r2
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	d027      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x7a>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2204      	movs	r2, #4
 8002df6:	4013      	ands	r3, r2
 8002df8:	d023      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2220      	movs	r2, #32
 8002e02:	4013      	ands	r3, r2
 8002e04:	d107      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2104      	movs	r1, #4
 8002e12:	438a      	bics	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002e16:	4b44      	ldr	r3, [pc, #272]	; (8002f28 <HAL_DMA_IRQHandler+0x160>)
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	221c      	movs	r2, #28
 8002e20:	4013      	ands	r3, r2
 8002e22:	2204      	movs	r2, #4
 8002e24:	409a      	lsls	r2, r3
 8002e26:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_DMA_IRQHandler+0x160>)
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d100      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x6e>
 8002e34:	e073      	b.n	8002f1e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	0010      	movs	r0, r2
 8002e3e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e40:	e06d      	b.n	8002f1e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	221c      	movs	r2, #28
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	0013      	movs	r3, r2
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4013      	ands	r3, r2
 8002e54:	d02e      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0xec>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d02a      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2220      	movs	r2, #32
 8002e66:	4013      	ands	r3, r2
 8002e68:	d10b      	bne.n	8002e82 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	210a      	movs	r1, #10
 8002e76:	438a      	bics	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2225      	movs	r2, #37	; 0x25
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_DMA_IRQHandler+0x160>)
 8002e84:	6859      	ldr	r1, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	221c      	movs	r2, #28
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2202      	movs	r2, #2
 8002e90:	409a      	lsls	r2, r3
 8002e92:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <HAL_DMA_IRQHandler+0x160>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d03a      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	0010      	movs	r0, r2
 8002eb0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002eb2:	e034      	b.n	8002f1e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	221c      	movs	r2, #28
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d02b      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x158>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2208      	movs	r2, #8
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d027      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	210e      	movs	r1, #14
 8002edc:	438a      	bics	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_DMA_IRQHandler+0x160>)
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	221c      	movs	r2, #28
 8002eea:	4013      	ands	r3, r2
 8002eec:	2201      	movs	r2, #1
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_DMA_IRQHandler+0x160>)
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2225      	movs	r2, #37	; 0x25
 8002f00:	2101      	movs	r1, #1
 8002f02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	2100      	movs	r1, #0
 8002f0a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	0010      	movs	r0, r2
 8002f1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	46c0      	nop			; (mov r8, r8)
}
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b004      	add	sp, #16
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40020000 	.word	0x40020000

08002f2c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f42:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f54:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <DMA_SetConfig+0x7c>)
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	221c      	movs	r2, #28
 8002f60:	4013      	ands	r3, r2
 8002f62:	2201      	movs	r2, #1
 8002f64:	409a      	lsls	r2, r3
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <DMA_SetConfig+0x7c>)
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d108      	bne.n	8002f8e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f8c:	e007      	b.n	8002f9e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	60da      	str	r2, [r3, #12]
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b004      	add	sp, #16
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	40020000 	.word	0x40020000

08002fac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	001a      	movs	r2, r3
 8002fba:	23ff      	movs	r3, #255	; 0xff
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	3b08      	subs	r3, #8
 8002fc0:	2114      	movs	r1, #20
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7fd f89c 	bl	8000100 <__udivsi3>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002fd4:	4694      	mov	ip, r2
 8002fd6:	4463      	add	r3, ip
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	001a      	movs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a07      	ldr	r2, [pc, #28]	; (8003000 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002fe4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	221c      	movs	r2, #28
 8002fea:	4013      	ands	r3, r2
 8002fec:	2201      	movs	r2, #1
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b004      	add	sp, #16
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	10008200 	.word	0x10008200
 8003000:	40020880 	.word	0x40020880

08003004 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	22ff      	movs	r2, #255	; 0xff
 8003012:	4013      	ands	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800301a:	4694      	mov	ip, r2
 800301c:	4463      	add	r3, ip
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	001a      	movs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a07      	ldr	r2, [pc, #28]	; (8003048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800302a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3b01      	subs	r3, #1
 8003030:	2203      	movs	r2, #3
 8003032:	4013      	ands	r3, r2
 8003034:	2201      	movs	r2, #1
 8003036:	409a      	lsls	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	1000823f 	.word	0x1000823f
 8003048:	40020940 	.word	0x40020940

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305a:	e147      	b.n	80032ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2101      	movs	r1, #1
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4091      	lsls	r1, r2
 8003066:	000a      	movs	r2, r1
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d100      	bne.n	8003074 <HAL_GPIO_Init+0x28>
 8003072:	e138      	b.n	80032e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x38>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b12      	cmp	r3, #18
 8003082:	d123      	bne.n	80030cc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	08da      	lsrs	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3208      	adds	r2, #8
 800308c:	0092      	lsls	r2, r2, #2
 800308e:	58d3      	ldr	r3, [r2, r3]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2207      	movs	r2, #7
 8003096:	4013      	ands	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	409a      	lsls	r2, r3
 800309e:	0013      	movs	r3, r2
 80030a0:	43da      	mvns	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2107      	movs	r1, #7
 80030b0:	400b      	ands	r3, r1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	409a      	lsls	r2, r3
 80030b6:	0013      	movs	r3, r2
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	08da      	lsrs	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3208      	adds	r2, #8
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	6939      	ldr	r1, [r7, #16]
 80030ca:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	409a      	lsls	r2, r3
 80030da:	0013      	movs	r3, r2
 80030dc:	43da      	mvns	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2203      	movs	r2, #3
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	409a      	lsls	r2, r3
 80030f2:	0013      	movs	r3, r2
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d00b      	beq.n	8003120 <HAL_GPIO_Init+0xd4>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d007      	beq.n	8003120 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003114:	2b11      	cmp	r3, #17
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b12      	cmp	r3, #18
 800311e:	d130      	bne.n	8003182 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	2203      	movs	r2, #3
 800312c:	409a      	lsls	r2, r3
 800312e:	0013      	movs	r3, r2
 8003130:	43da      	mvns	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	409a      	lsls	r2, r3
 8003142:	0013      	movs	r3, r2
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003156:	2201      	movs	r2, #1
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
 800315c:	0013      	movs	r3, r2
 800315e:	43da      	mvns	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	2201      	movs	r2, #1
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
 8003174:	0013      	movs	r3, r2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	2203      	movs	r2, #3
 800318e:	409a      	lsls	r2, r3
 8003190:	0013      	movs	r3, r2
 8003192:	43da      	mvns	r2, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	409a      	lsls	r2, r3
 80031a4:	0013      	movs	r3, r2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	055b      	lsls	r3, r3, #21
 80031ba:	4013      	ands	r3, r2
 80031bc:	d100      	bne.n	80031c0 <HAL_GPIO_Init+0x174>
 80031be:	e092      	b.n	80032e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80031c0:	4a50      	ldr	r2, [pc, #320]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3318      	adds	r3, #24
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	589b      	ldr	r3, [r3, r2]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2203      	movs	r2, #3
 80031d2:	4013      	ands	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	220f      	movs	r2, #15
 80031d8:	409a      	lsls	r2, r3
 80031da:	0013      	movs	r3, r2
 80031dc:	43da      	mvns	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	23a0      	movs	r3, #160	; 0xa0
 80031e8:	05db      	lsls	r3, r3, #23
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d013      	beq.n	8003216 <HAL_GPIO_Init+0x1ca>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a45      	ldr	r2, [pc, #276]	; (8003308 <HAL_GPIO_Init+0x2bc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00d      	beq.n	8003212 <HAL_GPIO_Init+0x1c6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a44      	ldr	r2, [pc, #272]	; (800330c <HAL_GPIO_Init+0x2c0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d007      	beq.n	800320e <HAL_GPIO_Init+0x1c2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a43      	ldr	r2, [pc, #268]	; (8003310 <HAL_GPIO_Init+0x2c4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d101      	bne.n	800320a <HAL_GPIO_Init+0x1be>
 8003206:	2303      	movs	r3, #3
 8003208:	e006      	b.n	8003218 <HAL_GPIO_Init+0x1cc>
 800320a:	2305      	movs	r3, #5
 800320c:	e004      	b.n	8003218 <HAL_GPIO_Init+0x1cc>
 800320e:	2302      	movs	r3, #2
 8003210:	e002      	b.n	8003218 <HAL_GPIO_Init+0x1cc>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_GPIO_Init+0x1cc>
 8003216:	2300      	movs	r3, #0
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	2103      	movs	r1, #3
 800321c:	400a      	ands	r2, r1
 800321e:	00d2      	lsls	r2, r2, #3
 8003220:	4093      	lsls	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003228:	4936      	ldr	r1, [pc, #216]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	3318      	adds	r3, #24
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003236:	4a33      	ldr	r2, [pc, #204]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	58d3      	ldr	r3, [r2, r3]
 800323c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	43da      	mvns	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	025b      	lsls	r3, r3, #9
 8003250:	4013      	ands	r3, r2
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800325c:	4929      	ldr	r1, [pc, #164]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003264:	4a27      	ldr	r2, [pc, #156]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 8003266:	2384      	movs	r3, #132	; 0x84
 8003268:	58d3      	ldr	r3, [r2, r3]
 800326a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43da      	mvns	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	029b      	lsls	r3, r3, #10
 800327e:	4013      	ands	r3, r2
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800328a:	491e      	ldr	r1, [pc, #120]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 800328c:	2284      	movs	r2, #132	; 0x84
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003292:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	43da      	mvns	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	035b      	lsls	r3, r3, #13
 80032aa:	4013      	ands	r3, r2
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	43da      	mvns	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	039b      	lsls	r3, r3, #14
 80032d4:	4013      	ands	r3, r2
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_GPIO_Init+0x2b8>)
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	3301      	adds	r3, #1
 80032ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	40da      	lsrs	r2, r3
 80032f4:	1e13      	subs	r3, r2, #0
 80032f6:	d000      	beq.n	80032fa <HAL_GPIO_Init+0x2ae>
 80032f8:	e6b0      	b.n	800305c <HAL_GPIO_Init+0x10>
  }
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b006      	add	sp, #24
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	40021800 	.word	0x40021800
 8003308:	50000400 	.word	0x50000400
 800330c:	50000800 	.word	0x50000800
 8003310:	50000c00 	.word	0x50000c00

08003314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	000a      	movs	r2, r1
 800331e:	1cbb      	adds	r3, r7, #2
 8003320:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	1cba      	adds	r2, r7, #2
 8003328:	8812      	ldrh	r2, [r2, #0]
 800332a:	4013      	ands	r3, r2
 800332c:	d004      	beq.n	8003338 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800332e:	230f      	movs	r3, #15
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e003      	b.n	8003340 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003338:	230f      	movs	r3, #15
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003340:	230f      	movs	r3, #15
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	781b      	ldrb	r3, [r3, #0]
}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b004      	add	sp, #16
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	0008      	movs	r0, r1
 8003358:	0011      	movs	r1, r2
 800335a:	1cbb      	adds	r3, r7, #2
 800335c:	1c02      	adds	r2, r0, #0
 800335e:	801a      	strh	r2, [r3, #0]
 8003360:	1c7b      	adds	r3, r7, #1
 8003362:	1c0a      	adds	r2, r1, #0
 8003364:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003366:	1c7b      	adds	r3, r7, #1
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800336e:	1cbb      	adds	r3, r7, #2
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003376:	e003      	b.n	8003380 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003378:	1cbb      	adds	r3, r7, #2
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	000a      	movs	r2, r1
 8003392:	1cbb      	adds	r3, r7, #2
 8003394:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	1cba      	adds	r2, r7, #2
 800339c:	8812      	ldrh	r2, [r2, #0]
 800339e:	4013      	ands	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033a2:	1cbb      	adds	r3, r7, #2
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80033aa:	e003      	b.n	80033b4 <HAL_GPIO_TogglePin+0x2c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ac:	1cbb      	adds	r3, r7, #2
 80033ae:	881a      	ldrh	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	619a      	str	r2, [r3, #24]
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80033c4:	4b19      	ldr	r3, [pc, #100]	; (800342c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	429a      	cmp	r2, r3
 80033de:	d11f      	bne.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	0013      	movs	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	189b      	adds	r3, r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4912      	ldr	r1, [pc, #72]	; (8003438 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7fc fe86 	bl	8000100 <__udivsi3>
 80033f4:	0003      	movs	r3, r0
 80033f6:	3301      	adds	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033fa:	e008      	b.n	800340e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3b01      	subs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e001      	b.n	800340e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e009      	b.n	8003422 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	401a      	ands	r2, r3
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	429a      	cmp	r2, r3
 800341e:	d0ed      	beq.n	80033fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	40007000 	.word	0x40007000
 8003430:	fffff9ff 	.word	0xfffff9ff
 8003434:	2000000c 	.word	0x2000000c
 8003438:	000f4240 	.word	0x000f4240

0800343c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	23e0      	movs	r3, #224	; 0xe0
 8003446:	01db      	lsls	r3, r3, #7
 8003448:	4013      	ands	r3, r2
}
 800344a:	0018      	movs	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000

08003454 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e2f9      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	d100      	bne.n	8003472 <HAL_RCC_OscConfig+0x1e>
 8003470:	e07c      	b.n	800356c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003472:	4bc3      	ldr	r3, [pc, #780]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2238      	movs	r2, #56	; 0x38
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800347c:	4bc0      	ldr	r3, [pc, #768]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2203      	movs	r2, #3
 8003482:	4013      	ands	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b10      	cmp	r3, #16
 800348a:	d102      	bne.n	8003492 <HAL_RCC_OscConfig+0x3e>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d002      	beq.n	8003498 <HAL_RCC_OscConfig+0x44>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d10b      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	4bb9      	ldr	r3, [pc, #740]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	029b      	lsls	r3, r3, #10
 80034a0:	4013      	ands	r3, r2
 80034a2:	d062      	beq.n	800356a <HAL_RCC_OscConfig+0x116>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d15e      	bne.n	800356a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e2d4      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	025b      	lsls	r3, r3, #9
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x78>
 80034bc:	4bb0      	ldr	r3, [pc, #704]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4baf      	ldr	r3, [pc, #700]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	0249      	lsls	r1, r1, #9
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e020      	b.n	800350e <HAL_RCC_OscConfig+0xba>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	23a0      	movs	r3, #160	; 0xa0
 80034d2:	02db      	lsls	r3, r3, #11
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d10e      	bne.n	80034f6 <HAL_RCC_OscConfig+0xa2>
 80034d8:	4ba9      	ldr	r3, [pc, #676]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4ba8      	ldr	r3, [pc, #672]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80034de:	2180      	movs	r1, #128	; 0x80
 80034e0:	02c9      	lsls	r1, r1, #11
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	4ba6      	ldr	r3, [pc, #664]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4ba5      	ldr	r3, [pc, #660]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	0249      	lsls	r1, r1, #9
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e00b      	b.n	800350e <HAL_RCC_OscConfig+0xba>
 80034f6:	4ba2      	ldr	r3, [pc, #648]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4ba1      	ldr	r3, [pc, #644]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80034fc:	49a1      	ldr	r1, [pc, #644]	; (8003784 <HAL_RCC_OscConfig+0x330>)
 80034fe:	400a      	ands	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	4b9f      	ldr	r3, [pc, #636]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b9e      	ldr	r3, [pc, #632]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003508:	499f      	ldr	r1, [pc, #636]	; (8003788 <HAL_RCC_OscConfig+0x334>)
 800350a:	400a      	ands	r2, r1
 800350c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d014      	beq.n	8003540 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7fd ff65 	bl	80013e4 <HAL_GetTick>
 800351a:	0003      	movs	r3, r0
 800351c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fd ff60 	bl	80013e4 <HAL_GetTick>
 8003524:	0002      	movs	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e293      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003532:	4b93      	ldr	r3, [pc, #588]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	029b      	lsls	r3, r3, #10
 800353a:	4013      	ands	r3, r2
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0xcc>
 800353e:	e015      	b.n	800356c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fd ff50 	bl	80013e4 <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354a:	f7fd ff4b 	bl	80013e4 <HAL_GetTick>
 800354e:	0002      	movs	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b64      	cmp	r3, #100	; 0x64
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e27e      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800355c:	4b88      	ldr	r3, [pc, #544]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	4013      	ands	r3, r2
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0xf6>
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2202      	movs	r2, #2
 8003572:	4013      	ands	r3, r2
 8003574:	d100      	bne.n	8003578 <HAL_RCC_OscConfig+0x124>
 8003576:	e099      	b.n	80036ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003578:	4b81      	ldr	r3, [pc, #516]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2238      	movs	r2, #56	; 0x38
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003582:	4b7f      	ldr	r3, [pc, #508]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2203      	movs	r2, #3
 8003588:	4013      	ands	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b10      	cmp	r3, #16
 8003590:	d102      	bne.n	8003598 <HAL_RCC_OscConfig+0x144>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d002      	beq.n	800359e <HAL_RCC_OscConfig+0x14a>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d135      	bne.n	800360a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800359e:	4b78      	ldr	r3, [pc, #480]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4013      	ands	r3, r2
 80035a8:	d005      	beq.n	80035b6 <HAL_RCC_OscConfig+0x162>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e251      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b6:	4b72      	ldr	r3, [pc, #456]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4a74      	ldr	r2, [pc, #464]	; (800378c <HAL_RCC_OscConfig+0x338>)
 80035bc:	4013      	ands	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	021a      	lsls	r2, r3, #8
 80035c6:	4b6e      	ldr	r3, [pc, #440]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80035c8:	430a      	orrs	r2, r1
 80035ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d112      	bne.n	80035f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035d2:	4b6b      	ldr	r3, [pc, #428]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6e      	ldr	r2, [pc, #440]	; (8003790 <HAL_RCC_OscConfig+0x33c>)
 80035d8:	4013      	ands	r3, r2
 80035da:	0019      	movs	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	4b67      	ldr	r3, [pc, #412]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80035e6:	4b66      	ldr	r3, [pc, #408]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0adb      	lsrs	r3, r3, #11
 80035ec:	2207      	movs	r2, #7
 80035ee:	4013      	ands	r3, r2
 80035f0:	4a68      	ldr	r2, [pc, #416]	; (8003794 <HAL_RCC_OscConfig+0x340>)
 80035f2:	40da      	lsrs	r2, r3
 80035f4:	4b68      	ldr	r3, [pc, #416]	; (8003798 <HAL_RCC_OscConfig+0x344>)
 80035f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x348>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7fd fe97 	bl	8001330 <HAL_InitTick>
 8003602:	1e03      	subs	r3, r0, #0
 8003604:	d051      	beq.n	80036aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e227      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d030      	beq.n	8003674 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003612:	4b5b      	ldr	r3, [pc, #364]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a5e      	ldr	r2, [pc, #376]	; (8003790 <HAL_RCC_OscConfig+0x33c>)
 8003618:	4013      	ands	r3, r2
 800361a:	0019      	movs	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	4b57      	ldr	r3, [pc, #348]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003626:	4b56      	ldr	r3, [pc, #344]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b55      	ldr	r3, [pc, #340]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800362c:	2180      	movs	r1, #128	; 0x80
 800362e:	0049      	lsls	r1, r1, #1
 8003630:	430a      	orrs	r2, r1
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd fed6 	bl	80013e4 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363e:	f7fd fed1 	bl	80013e4 <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e204      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003650:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4013      	ands	r3, r2
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365c:	4b48      	ldr	r3, [pc, #288]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a4a      	ldr	r2, [pc, #296]	; (800378c <HAL_RCC_OscConfig+0x338>)
 8003662:	4013      	ands	r3, r2
 8003664:	0019      	movs	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	021a      	lsls	r2, r3, #8
 800366c:	4b44      	ldr	r3, [pc, #272]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	e01b      	b.n	80036ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003674:	4b42      	ldr	r3, [pc, #264]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b41      	ldr	r3, [pc, #260]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800367a:	4949      	ldr	r1, [pc, #292]	; (80037a0 <HAL_RCC_OscConfig+0x34c>)
 800367c:	400a      	ands	r2, r1
 800367e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fd feb0 	bl	80013e4 <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368a:	f7fd feab 	bl	80013e4 <HAL_GetTick>
 800368e:	0002      	movs	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1de      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800369c:	4b38      	ldr	r3, [pc, #224]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4013      	ands	r3, r2
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0x236>
 80036a8:	e000      	b.n	80036ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2208      	movs	r2, #8
 80036b2:	4013      	ands	r3, r2
 80036b4:	d047      	beq.n	8003746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80036b6:	4b32      	ldr	r3, [pc, #200]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2238      	movs	r2, #56	; 0x38
 80036bc:	4013      	ands	r3, r2
 80036be:	2b18      	cmp	r3, #24
 80036c0:	d10a      	bne.n	80036d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80036c2:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80036c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c6:	2202      	movs	r2, #2
 80036c8:	4013      	ands	r3, r2
 80036ca:	d03c      	beq.n	8003746 <HAL_RCC_OscConfig+0x2f2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d138      	bne.n	8003746 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e1c0      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d019      	beq.n	8003714 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80036e0:	4b27      	ldr	r3, [pc, #156]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80036e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036e4:	4b26      	ldr	r3, [pc, #152]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 80036e6:	2101      	movs	r1, #1
 80036e8:	430a      	orrs	r2, r1
 80036ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fd fe7a 	bl	80013e4 <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fd fe75 	bl	80013e4 <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e1a8      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800370a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370c:	2202      	movs	r2, #2
 800370e:	4013      	ands	r3, r2
 8003710:	d0f1      	beq.n	80036f6 <HAL_RCC_OscConfig+0x2a2>
 8003712:	e018      	b.n	8003746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003716:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003718:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800371a:	2101      	movs	r1, #1
 800371c:	438a      	bics	r2, r1
 800371e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fd fe60 	bl	80013e4 <HAL_GetTick>
 8003724:	0003      	movs	r3, r0
 8003726:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372a:	f7fd fe5b 	bl	80013e4 <HAL_GetTick>
 800372e:	0002      	movs	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e18e      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800373e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003740:	2202      	movs	r2, #2
 8003742:	4013      	ands	r3, r2
 8003744:	d1f1      	bne.n	800372a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2204      	movs	r2, #4
 800374c:	4013      	ands	r3, r2
 800374e:	d100      	bne.n	8003752 <HAL_RCC_OscConfig+0x2fe>
 8003750:	e0c6      	b.n	80038e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	231f      	movs	r3, #31
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2238      	movs	r2, #56	; 0x38
 8003760:	4013      	ands	r3, r2
 8003762:	2b20      	cmp	r3, #32
 8003764:	d11e      	bne.n	80037a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_OscConfig+0x32c>)
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	2202      	movs	r2, #2
 800376c:	4013      	ands	r3, r2
 800376e:	d100      	bne.n	8003772 <HAL_RCC_OscConfig+0x31e>
 8003770:	e0b6      	b.n	80038e0 <HAL_RCC_OscConfig+0x48c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d000      	beq.n	800377c <HAL_RCC_OscConfig+0x328>
 800377a:	e0b1      	b.n	80038e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e16c      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
 8003780:	40021000 	.word	0x40021000
 8003784:	fffeffff 	.word	0xfffeffff
 8003788:	fffbffff 	.word	0xfffbffff
 800378c:	ffff80ff 	.word	0xffff80ff
 8003790:	ffffc7ff 	.word	0xffffc7ff
 8003794:	00f42400 	.word	0x00f42400
 8003798:	2000000c 	.word	0x2000000c
 800379c:	20000000 	.word	0x20000000
 80037a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037a4:	4baf      	ldr	r3, [pc, #700]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80037a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	055b      	lsls	r3, r3, #21
 80037ac:	4013      	ands	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_OscConfig+0x360>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_RCC_OscConfig+0x362>
 80037b4:	2300      	movs	r3, #0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d011      	beq.n	80037de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	4baa      	ldr	r3, [pc, #680]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80037bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037be:	4ba9      	ldr	r3, [pc, #676]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80037c0:	2180      	movs	r1, #128	; 0x80
 80037c2:	0549      	lsls	r1, r1, #21
 80037c4:	430a      	orrs	r2, r1
 80037c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80037c8:	4ba6      	ldr	r3, [pc, #664]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80037ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	055b      	lsls	r3, r3, #21
 80037d0:	4013      	ands	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80037d6:	231f      	movs	r3, #31
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037de:	4ba2      	ldr	r3, [pc, #648]	; (8003a68 <HAL_RCC_OscConfig+0x614>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4013      	ands	r3, r2
 80037e8:	d11a      	bne.n	8003820 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ea:	4b9f      	ldr	r3, [pc, #636]	; (8003a68 <HAL_RCC_OscConfig+0x614>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b9e      	ldr	r3, [pc, #632]	; (8003a68 <HAL_RCC_OscConfig+0x614>)
 80037f0:	2180      	movs	r1, #128	; 0x80
 80037f2:	0049      	lsls	r1, r1, #1
 80037f4:	430a      	orrs	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80037f8:	f7fd fdf4 	bl	80013e4 <HAL_GetTick>
 80037fc:	0003      	movs	r3, r0
 80037fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003802:	f7fd fdef 	bl	80013e4 <HAL_GetTick>
 8003806:	0002      	movs	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e122      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003814:	4b94      	ldr	r3, [pc, #592]	; (8003a68 <HAL_RCC_OscConfig+0x614>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4013      	ands	r3, r2
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d106      	bne.n	8003836 <HAL_RCC_OscConfig+0x3e2>
 8003828:	4b8e      	ldr	r3, [pc, #568]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 800382a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800382c:	4b8d      	ldr	r3, [pc, #564]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 800382e:	2101      	movs	r1, #1
 8003830:	430a      	orrs	r2, r1
 8003832:	65da      	str	r2, [r3, #92]	; 0x5c
 8003834:	e01c      	b.n	8003870 <HAL_RCC_OscConfig+0x41c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b05      	cmp	r3, #5
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0x404>
 800383e:	4b89      	ldr	r3, [pc, #548]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003842:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003844:	2104      	movs	r1, #4
 8003846:	430a      	orrs	r2, r1
 8003848:	65da      	str	r2, [r3, #92]	; 0x5c
 800384a:	4b86      	ldr	r3, [pc, #536]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 800384c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800384e:	4b85      	ldr	r3, [pc, #532]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003850:	2101      	movs	r1, #1
 8003852:	430a      	orrs	r2, r1
 8003854:	65da      	str	r2, [r3, #92]	; 0x5c
 8003856:	e00b      	b.n	8003870 <HAL_RCC_OscConfig+0x41c>
 8003858:	4b82      	ldr	r3, [pc, #520]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 800385a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800385c:	4b81      	ldr	r3, [pc, #516]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 800385e:	2101      	movs	r1, #1
 8003860:	438a      	bics	r2, r1
 8003862:	65da      	str	r2, [r3, #92]	; 0x5c
 8003864:	4b7f      	ldr	r3, [pc, #508]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003866:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003868:	4b7e      	ldr	r3, [pc, #504]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 800386a:	2104      	movs	r1, #4
 800386c:	438a      	bics	r2, r1
 800386e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d014      	beq.n	80038a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd fdb4 	bl	80013e4 <HAL_GetTick>
 800387c:	0003      	movs	r3, r0
 800387e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003880:	e009      	b.n	8003896 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fd fdaf 	bl	80013e4 <HAL_GetTick>
 8003886:	0002      	movs	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	4a77      	ldr	r2, [pc, #476]	; (8003a6c <HAL_RCC_OscConfig+0x618>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e0e1      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003896:	4b73      	ldr	r3, [pc, #460]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	2202      	movs	r2, #2
 800389c:	4013      	ands	r3, r2
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x42e>
 80038a0:	e013      	b.n	80038ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd fd9f 	bl	80013e4 <HAL_GetTick>
 80038a6:	0003      	movs	r3, r0
 80038a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038aa:	e009      	b.n	80038c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ac:	f7fd fd9a 	bl	80013e4 <HAL_GetTick>
 80038b0:	0002      	movs	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	4a6d      	ldr	r2, [pc, #436]	; (8003a6c <HAL_RCC_OscConfig+0x618>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e0cc      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c0:	4b68      	ldr	r3, [pc, #416]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	2202      	movs	r2, #2
 80038c6:	4013      	ands	r3, r2
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80038ca:	231f      	movs	r3, #31
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d105      	bne.n	80038e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80038d4:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80038d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d8:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80038da:	4965      	ldr	r1, [pc, #404]	; (8003a70 <HAL_RCC_OscConfig+0x61c>)
 80038dc:	400a      	ands	r2, r1
 80038de:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d100      	bne.n	80038ea <HAL_RCC_OscConfig+0x496>
 80038e8:	e0b6      	b.n	8003a58 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ea:	4b5e      	ldr	r3, [pc, #376]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2238      	movs	r2, #56	; 0x38
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d100      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4a4>
 80038f6:	e07e      	b.n	80039f6 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d153      	bne.n	80039a8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003900:	4b58      	ldr	r3, [pc, #352]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003906:	495b      	ldr	r1, [pc, #364]	; (8003a74 <HAL_RCC_OscConfig+0x620>)
 8003908:	400a      	ands	r2, r1
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd fd6a 	bl	80013e4 <HAL_GetTick>
 8003910:	0003      	movs	r3, r0
 8003912:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003916:	f7fd fd65 	bl	80013e4 <HAL_GetTick>
 800391a:	0002      	movs	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e098      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003928:	4b4e      	ldr	r3, [pc, #312]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	049b      	lsls	r3, r3, #18
 8003930:	4013      	ands	r3, r2
 8003932:	d1f0      	bne.n	8003916 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003934:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4a4f      	ldr	r2, [pc, #316]	; (8003a78 <HAL_RCC_OscConfig+0x624>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1a      	ldr	r2, [r3, #32]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	431a      	orrs	r2, r3
 800395c:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 800395e:	430a      	orrs	r2, r1
 8003960:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003962:	4b40      	ldr	r3, [pc, #256]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003968:	2180      	movs	r1, #128	; 0x80
 800396a:	0449      	lsls	r1, r1, #17
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003970:	4b3c      	ldr	r3, [pc, #240]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	0549      	lsls	r1, r1, #21
 800397a:	430a      	orrs	r2, r1
 800397c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7fd fd31 	bl	80013e4 <HAL_GetTick>
 8003982:	0003      	movs	r3, r0
 8003984:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003988:	f7fd fd2c 	bl	80013e4 <HAL_GetTick>
 800398c:	0002      	movs	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e05f      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	049b      	lsls	r3, r3, #18
 80039a2:	4013      	ands	r3, r2
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x534>
 80039a6:	e057      	b.n	8003a58 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a8:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80039ae:	4931      	ldr	r1, [pc, #196]	; (8003a74 <HAL_RCC_OscConfig+0x620>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80039b4:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80039ba:	2103      	movs	r1, #3
 80039bc:	438a      	bics	r2, r1
 80039be:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80039c0:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80039c6:	492d      	ldr	r1, [pc, #180]	; (8003a7c <HAL_RCC_OscConfig+0x628>)
 80039c8:	400a      	ands	r2, r1
 80039ca:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fd fd0a 	bl	80013e4 <HAL_GetTick>
 80039d0:	0003      	movs	r3, r0
 80039d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d6:	f7fd fd05 	bl	80013e4 <HAL_GetTick>
 80039da:	0002      	movs	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e038      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e8:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	049b      	lsls	r3, r3, #18
 80039f0:	4013      	ands	r3, r2
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCC_OscConfig+0x582>
 80039f4:	e030      	b.n	8003a58 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e02b      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a02:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <HAL_RCC_OscConfig+0x610>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d11e      	bne.n	8003a54 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2270      	movs	r2, #112	; 0x70
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d117      	bne.n	8003a54 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	23fe      	movs	r3, #254	; 0xfe
 8003a28:	01db      	lsls	r3, r3, #7
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d10e      	bne.n	8003a54 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	23f8      	movs	r3, #248	; 0xf8
 8003a3a:	039b      	lsls	r3, r3, #14
 8003a3c:	401a      	ands	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d106      	bne.n	8003a54 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	0f5b      	lsrs	r3, r3, #29
 8003a4a:	075a      	lsls	r2, r3, #29
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b008      	add	sp, #32
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40007000 	.word	0x40007000
 8003a6c:	00001388 	.word	0x00001388
 8003a70:	efffffff 	.word	0xefffffff
 8003a74:	feffffff 	.word	0xfeffffff
 8003a78:	1fc1808c 	.word	0x1fc1808c
 8003a7c:	effeffff 	.word	0xeffeffff

08003a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0e9      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a94:	4b76      	ldr	r3, [pc, #472]	; (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2207      	movs	r2, #7
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d91e      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b73      	ldr	r3, [pc, #460]	; (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2207      	movs	r2, #7
 8003aa8:	4393      	bics	r3, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	4b70      	ldr	r3, [pc, #448]	; (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ab4:	f7fd fc96 	bl	80013e4 <HAL_GetTick>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003abc:	e009      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abe:	f7fd fc91 	bl	80013e4 <HAL_GetTick>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	4a6a      	ldr	r2, [pc, #424]	; (8003c74 <HAL_RCC_ClockConfig+0x1f4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e0ca      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ad2:	4b67      	ldr	r3, [pc, #412]	; (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2207      	movs	r2, #7
 8003ad8:	4013      	ands	r3, r2
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1ee      	bne.n	8003abe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d015      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2204      	movs	r2, #4
 8003af0:	4013      	ands	r3, r2
 8003af2:	d006      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003af4:	4b60      	ldr	r3, [pc, #384]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4b5f      	ldr	r3, [pc, #380]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003afa:	21e0      	movs	r1, #224	; 0xe0
 8003afc:	01c9      	lsls	r1, r1, #7
 8003afe:	430a      	orrs	r2, r1
 8003b00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b02:	4b5d      	ldr	r3, [pc, #372]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	4a5d      	ldr	r2, [pc, #372]	; (8003c7c <HAL_RCC_ClockConfig+0x1fc>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	4b59      	ldr	r3, [pc, #356]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b12:	430a      	orrs	r2, r1
 8003b14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d057      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d107      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b28:	4b53      	ldr	r3, [pc, #332]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	029b      	lsls	r3, r3, #10
 8003b30:	4013      	ands	r3, r2
 8003b32:	d12b      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e097      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b40:	4b4d      	ldr	r3, [pc, #308]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	049b      	lsls	r3, r3, #18
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d11f      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e08b      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b58:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4013      	ands	r3, r2
 8003b62:	d113      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e07f      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b70:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b74:	2202      	movs	r2, #2
 8003b76:	4013      	ands	r3, r2
 8003b78:	d108      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e074      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7e:	4b3e      	ldr	r3, [pc, #248]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	2202      	movs	r2, #2
 8003b84:	4013      	ands	r3, r2
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e06d      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b8c:	4b3a      	ldr	r3, [pc, #232]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2207      	movs	r2, #7
 8003b92:	4393      	bics	r3, r2
 8003b94:	0019      	movs	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	4b37      	ldr	r3, [pc, #220]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba0:	f7fd fc20 	bl	80013e4 <HAL_GetTick>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba8:	e009      	b.n	8003bbe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003baa:	f7fd fc1b 	bl	80013e4 <HAL_GetTick>
 8003bae:	0002      	movs	r2, r0
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	4a2f      	ldr	r2, [pc, #188]	; (8003c74 <HAL_RCC_ClockConfig+0x1f4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e054      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2238      	movs	r2, #56	; 0x38
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d1ec      	bne.n	8003baa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2207      	movs	r2, #7
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d21e      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2207      	movs	r2, #7
 8003be4:	4393      	bics	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fbf8 	bl	80013e4 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bf8:	e009      	b.n	8003c0e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfa:	f7fd fbf3 	bl	80013e4 <HAL_GetTick>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	4a1b      	ldr	r2, [pc, #108]	; (8003c74 <HAL_RCC_ClockConfig+0x1f4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e02c      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c0e:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2207      	movs	r2, #7
 8003c14:	4013      	ands	r3, r2
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1ee      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2204      	movs	r2, #4
 8003c22:	4013      	ands	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <HAL_RCC_ClockConfig+0x200>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	0019      	movs	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003c36:	430a      	orrs	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c3a:	f000 f829 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003c3e:	0001      	movs	r1, r0
 8003c40:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <HAL_RCC_ClockConfig+0x1f8>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	220f      	movs	r2, #15
 8003c48:	401a      	ands	r2, r3
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x204>)
 8003c4c:	0092      	lsls	r2, r2, #2
 8003c4e:	58d3      	ldr	r3, [r2, r3]
 8003c50:	221f      	movs	r2, #31
 8003c52:	4013      	ands	r3, r2
 8003c54:	000a      	movs	r2, r1
 8003c56:	40da      	lsrs	r2, r3
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCC_ClockConfig+0x208>)
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_ClockConfig+0x20c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7fd fb65 	bl	8001330 <HAL_InitTick>
 8003c66:	0003      	movs	r3, r0
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b004      	add	sp, #16
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40022000 	.word	0x40022000
 8003c74:	00001388 	.word	0x00001388
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	fffff0ff 	.word	0xfffff0ff
 8003c80:	ffff8fff 	.word	0xffff8fff
 8003c84:	0800d260 	.word	0x0800d260
 8003c88:	2000000c 	.word	0x2000000c
 8003c8c:	20000000 	.word	0x20000000

08003c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c96:	4b3c      	ldr	r3, [pc, #240]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2238      	movs	r2, #56	; 0x38
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d10f      	bne.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003ca0:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0adb      	lsrs	r3, r3, #11
 8003ca6:	2207      	movs	r2, #7
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2201      	movs	r2, #1
 8003cac:	409a      	lsls	r2, r3
 8003cae:	0013      	movs	r3, r2
 8003cb0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	4835      	ldr	r0, [pc, #212]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cb6:	f7fc fa23 	bl	8000100 <__udivsi3>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e05d      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cc0:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2238      	movs	r2, #56	; 0x38
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d102      	bne.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ccc:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x100>)
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	e054      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2238      	movs	r2, #56	; 0x38
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d138      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003cde:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	2207      	movs	r2, #7
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d10d      	bne.n	8003d18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	4824      	ldr	r0, [pc, #144]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d00:	f7fc f9fe 	bl	8000100 <__udivsi3>
 8003d04:	0003      	movs	r3, r0
 8003d06:	0019      	movs	r1, r3
 8003d08:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	227f      	movs	r2, #127	; 0x7f
 8003d10:	4013      	ands	r3, r2
 8003d12:	434b      	muls	r3, r1
 8003d14:	617b      	str	r3, [r7, #20]
        break;
 8003d16:	e00d      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	481c      	ldr	r0, [pc, #112]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d1c:	f7fc f9f0 	bl	8000100 <__udivsi3>
 8003d20:	0003      	movs	r3, r0
 8003d22:	0019      	movs	r1, r3
 8003d24:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	227f      	movs	r2, #127	; 0x7f
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	434b      	muls	r3, r1
 8003d30:	617b      	str	r3, [r7, #20]
        break;
 8003d32:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d34:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	0f5b      	lsrs	r3, r3, #29
 8003d3a:	2207      	movs	r2, #7
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	3301      	adds	r3, #1
 8003d40:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	6978      	ldr	r0, [r7, #20]
 8003d46:	f7fc f9db 	bl	8000100 <__udivsi3>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e015      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2238      	movs	r2, #56	; 0x38
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d103      	bne.n	8003d64 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	e00b      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2238      	movs	r2, #56	; 0x38
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b18      	cmp	r3, #24
 8003d6e:	d103      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003d70:	23fa      	movs	r3, #250	; 0xfa
 8003d72:	01db      	lsls	r3, r3, #7
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e001      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d7c:	693b      	ldr	r3, [r7, #16]
}
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b006      	add	sp, #24
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	007a1200 	.word	0x007a1200

08003d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b02      	ldr	r3, [pc, #8]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	2000000c 	.word	0x2000000c

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003dac:	f7ff fff2 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db0:	0004      	movs	r4, r0
 8003db2:	f7ff fb43 	bl	800343c <LL_RCC_GetAPB1Prescaler>
 8003db6:	0003      	movs	r3, r0
 8003db8:	0b1a      	lsrs	r2, r3, #12
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dbc:	0092      	lsls	r2, r2, #2
 8003dbe:	58d3      	ldr	r3, [r2, r3]
 8003dc0:	221f      	movs	r2, #31
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	40dc      	lsrs	r4, r3
 8003dc6:	0023      	movs	r3, r4
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	0800d2a0 	.word	0x0800d2a0

08003dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003ddc:	2313      	movs	r3, #19
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de4:	2312      	movs	r3, #18
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	029b      	lsls	r3, r3, #10
 8003df4:	4013      	ands	r3, r2
 8003df6:	d100      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003df8:	e0a4      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfa:	2311      	movs	r3, #17
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b87      	ldr	r3, [pc, #540]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	055b      	lsls	r3, r3, #21
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d111      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4b84      	ldr	r3, [pc, #528]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e12:	4b83      	ldr	r3, [pc, #524]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003e14:	2180      	movs	r1, #128	; 0x80
 8003e16:	0549      	lsls	r1, r1, #21
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e1c:	4b80      	ldr	r3, [pc, #512]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	055b      	lsls	r3, r3, #21
 8003e24:	4013      	ands	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2a:	2311      	movs	r3, #17
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e32:	4b7c      	ldr	r3, [pc, #496]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b7b      	ldr	r3, [pc, #492]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003e38:	2180      	movs	r1, #128	; 0x80
 8003e3a:	0049      	lsls	r1, r1, #1
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e40:	f7fd fad0 	bl	80013e4 <HAL_GetTick>
 8003e44:	0003      	movs	r3, r0
 8003e46:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e48:	e00b      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fd facb 	bl	80013e4 <HAL_GetTick>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d904      	bls.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8003e58:	2313      	movs	r3, #19
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	701a      	strb	r2, [r3, #0]
        break;
 8003e60:	e005      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e62:	4b70      	ldr	r3, [pc, #448]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d0ed      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8003e6e:	2313      	movs	r3, #19
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d154      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e78:	4b69      	ldr	r3, [pc, #420]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003e7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e7c:	23c0      	movs	r3, #192	; 0xc0
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4013      	ands	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d019      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d014      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e94:	4b62      	ldr	r3, [pc, #392]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	4a63      	ldr	r2, [pc, #396]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e9e:	4b60      	ldr	r3, [pc, #384]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ea0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ea2:	4b5f      	ldr	r3, [pc, #380]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	0249      	lsls	r1, r1, #9
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eac:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003eae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eb0:	4b5b      	ldr	r3, [pc, #364]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003eb2:	495e      	ldr	r1, [pc, #376]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eb8:	4b59      	ldr	r3, [pc, #356]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d016      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec6:	f7fd fa8d 	bl	80013e4 <HAL_GetTick>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ece:	e00c      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fd fa88 	bl	80013e4 <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	4a55      	ldr	r2, [pc, #340]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d904      	bls.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8003ee0:	2313      	movs	r3, #19
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	701a      	strb	r2, [r3, #0]
            break;
 8003ee8:	e004      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eea:	4b4d      	ldr	r3, [pc, #308]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	2202      	movs	r2, #2
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d0ed      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8003ef4:	2313      	movs	r3, #19
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efe:	4b48      	ldr	r3, [pc, #288]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	4a49      	ldr	r2, [pc, #292]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699a      	ldr	r2, [r3, #24]
 8003f0c:	4b44      	ldr	r3, [pc, #272]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f12:	e00c      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f14:	2312      	movs	r3, #18
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	2213      	movs	r2, #19
 8003f1a:	18ba      	adds	r2, r7, r2
 8003f1c:	7812      	ldrb	r2, [r2, #0]
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e005      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f22:	2312      	movs	r3, #18
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	2213      	movs	r2, #19
 8003f28:	18ba      	adds	r2, r7, r2
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f2e:	2311      	movs	r3, #17
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b39      	ldr	r3, [pc, #228]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f3c:	4b38      	ldr	r3, [pc, #224]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f3e:	493d      	ldr	r1, [pc, #244]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f4e:	4b34      	ldr	r3, [pc, #208]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	2203      	movs	r2, #3
 8003f54:	4393      	bics	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4b30      	ldr	r3, [pc, #192]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2202      	movs	r2, #2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d009      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f6c:	4b2c      	ldr	r3, [pc, #176]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	220c      	movs	r2, #12
 8003f72:	4393      	bics	r3, r2
 8003f74:	0019      	movs	r1, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	4b29      	ldr	r3, [pc, #164]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2240      	movs	r2, #64	; 0x40
 8003f86:	4013      	ands	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f8a:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	0019      	movs	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	4b21      	ldr	r3, [pc, #132]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	01db      	lsls	r3, r3, #7
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d015      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003faa:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	0899      	lsrs	r1, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	05db      	lsls	r3, r3, #23
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003fce:	2180      	movs	r1, #128	; 0x80
 8003fd0:	0249      	lsls	r1, r1, #9
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d016      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	4a15      	ldr	r2, [pc, #84]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	01db      	lsls	r3, r3, #7
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d106      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	0249      	lsls	r1, r1, #9
 800400c:	430a      	orrs	r2, r1
 800400e:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8004010:	2312      	movs	r3, #18
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	781b      	ldrb	r3, [r3, #0]
}
 8004016:	0018      	movs	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	b006      	add	sp, #24
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	40021000 	.word	0x40021000
 8004024:	40007000 	.word	0x40007000
 8004028:	fffffcff 	.word	0xfffffcff
 800402c:	fffeffff 	.word	0xfffeffff
 8004030:	00001388 	.word	0x00001388
 8004034:	efffffff 	.word	0xefffffff
 8004038:	ffffcfff 	.word	0xffffcfff
 800403c:	ffff3fff 	.word	0xffff3fff

08004040 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	223d      	movs	r2, #61	; 0x3d
 800404c:	2102      	movs	r1, #2
 800404e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	4a0e      	ldr	r2, [pc, #56]	; (8004090 <HAL_TIM_Base_Start+0x50>)
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b06      	cmp	r3, #6
 8004060:	d00c      	beq.n	800407c <HAL_TIM_Base_Start+0x3c>
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	025b      	lsls	r3, r3, #9
 8004068:	429a      	cmp	r2, r3
 800406a:	d007      	beq.n	800407c <HAL_TIM_Base_Start+0x3c>
  {
    __HAL_TIM_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2101      	movs	r1, #1
 8004078:	430a      	orrs	r2, r1
 800407a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	223d      	movs	r2, #61	; 0x3d
 8004080:	2101      	movs	r1, #1
 8004082:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	b004      	add	sp, #16
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	00010007 	.word	0x00010007

08004094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e01e      	b.n	80040e4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	223d      	movs	r2, #61	; 0x3d
 80040aa:	5c9b      	ldrb	r3, [r3, r2]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	223c      	movs	r2, #60	; 0x3c
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	0018      	movs	r0, r3
 80040be:	f008 fa07 	bl	800c4d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	223d      	movs	r2, #61	; 0x3d
 80040c6:	2102      	movs	r1, #2
 80040c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	0019      	movs	r1, r3
 80040d4:	0010      	movs	r0, r2
 80040d6:	f000 f95b 	bl	8004390 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	223d      	movs	r2, #61	; 0x3d
 80040de:	2101      	movs	r1, #1
 80040e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b002      	add	sp, #8
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6839      	ldr	r1, [r7, #0]
 80040fc:	2201      	movs	r2, #1
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 fc80 	bl	8004a04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_TIM_PWM_Start+0x94>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_TIM_PWM_Start+0x40>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1c      	ldr	r2, [pc, #112]	; (8004184 <HAL_TIM_PWM_Start+0x98>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_TIM_PWM_Start+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <HAL_TIM_PWM_Start+0x9c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_PWM_Start+0x40>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a19      	ldr	r2, [pc, #100]	; (800418c <HAL_TIM_PWM_Start+0xa0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <HAL_TIM_PWM_Start+0x44>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_TIM_PWM_Start+0x46>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2180      	movs	r1, #128	; 0x80
 8004142:	0209      	lsls	r1, r1, #8
 8004144:	430a      	orrs	r2, r1
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	4a10      	ldr	r2, [pc, #64]	; (8004190 <HAL_TIM_PWM_Start+0xa4>)
 8004150:	4013      	ands	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d00c      	beq.n	8004174 <HAL_TIM_PWM_Start+0x88>
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	025b      	lsls	r3, r3, #9
 8004160:	429a      	cmp	r2, r3
 8004162:	d007      	beq.n	8004174 <HAL_TIM_PWM_Start+0x88>
  {
    __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2101      	movs	r1, #1
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	0018      	movs	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	b004      	add	sp, #16
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800
 8004190:	00010007 	.word	0x00010007

08004194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	223c      	movs	r2, #60	; 0x3c
 80041a4:	5c9b      	ldrb	r3, [r3, r2]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e0e7      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x1ea>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	223c      	movs	r2, #60	; 0x3c
 80041b2:	2101      	movs	r1, #1
 80041b4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	223d      	movs	r2, #61	; 0x3d
 80041ba:	2102      	movs	r1, #2
 80041bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b14      	cmp	r3, #20
 80041c2:	d900      	bls.n	80041c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80041c4:	e0d1      	b.n	800436a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	009a      	lsls	r2, r3, #2
 80041ca:	4b6f      	ldr	r3, [pc, #444]	; (8004388 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80041cc:	18d3      	adds	r3, r2, r3
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	0011      	movs	r1, r2
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 f94e 	bl	800447c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2108      	movs	r1, #8
 80041ec:	430a      	orrs	r2, r1
 80041ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2104      	movs	r1, #4
 80041fc:	438a      	bics	r2, r1
 80041fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6999      	ldr	r1, [r3, #24]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	619a      	str	r2, [r3, #24]
      break;
 8004212:	e0ab      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	0011      	movs	r1, r2
 800421c:	0018      	movs	r0, r3
 800421e:	f000 f9b7 	bl	8004590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2180      	movs	r1, #128	; 0x80
 800422e:	0109      	lsls	r1, r1, #4
 8004230:	430a      	orrs	r2, r1
 8004232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4953      	ldr	r1, [pc, #332]	; (800438c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004240:	400a      	ands	r2, r1
 8004242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	021a      	lsls	r2, r3, #8
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	619a      	str	r2, [r3, #24]
      break;
 8004258:	e088      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	0011      	movs	r1, r2
 8004262:	0018      	movs	r0, r3
 8004264:	f000 fa18 	bl	8004698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2108      	movs	r1, #8
 8004274:	430a      	orrs	r2, r1
 8004276:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2104      	movs	r1, #4
 8004284:	438a      	bics	r2, r1
 8004286:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69d9      	ldr	r1, [r3, #28]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	61da      	str	r2, [r3, #28]
      break;
 800429a:	e067      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	0011      	movs	r1, r2
 80042a4:	0018      	movs	r0, r3
 80042a6:	f000 fa7f 	bl	80047a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2180      	movs	r1, #128	; 0x80
 80042b6:	0109      	lsls	r1, r1, #4
 80042b8:	430a      	orrs	r2, r1
 80042ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69da      	ldr	r2, [r3, #28]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4931      	ldr	r1, [pc, #196]	; (800438c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80042c8:	400a      	ands	r2, r1
 80042ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69d9      	ldr	r1, [r3, #28]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	021a      	lsls	r2, r3, #8
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	61da      	str	r2, [r3, #28]
      break;
 80042e0:	e044      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	0011      	movs	r1, r2
 80042ea:	0018      	movs	r0, r3
 80042ec:	f000 fac6 	bl	800487c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2108      	movs	r1, #8
 80042fc:	430a      	orrs	r2, r1
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2104      	movs	r1, #4
 800430c:	438a      	bics	r2, r1
 800430e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004322:	e023      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	0011      	movs	r1, r2
 800432c:	0018      	movs	r0, r3
 800432e:	f000 fb05 	bl	800493c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2180      	movs	r1, #128	; 0x80
 800433e:	0109      	lsls	r1, r1, #4
 8004340:	430a      	orrs	r2, r1
 8004342:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	490f      	ldr	r1, [pc, #60]	; (800438c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004350:	400a      	ands	r2, r1
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	021a      	lsls	r2, r3, #8
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004368:	e000      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 800436a:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	223d      	movs	r2, #61	; 0x3d
 8004370:	2101      	movs	r1, #1
 8004372:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	223c      	movs	r2, #60	; 0x3c
 8004378:	2100      	movs	r1, #0
 800437a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b004      	add	sp, #16
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	0800d20c 	.word	0x0800d20c
 800438c:	fffffbff 	.word	0xfffffbff

08004390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <TIM_Base_SetConfig+0xd0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_Base_SetConfig+0x20>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a2e      	ldr	r2, [pc, #184]	; (8004464 <TIM_Base_SetConfig+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d108      	bne.n	80043c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2270      	movs	r2, #112	; 0x70
 80043b4:	4393      	bics	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a26      	ldr	r2, [pc, #152]	; (8004460 <TIM_Base_SetConfig+0xd0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <TIM_Base_SetConfig+0x62>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a25      	ldr	r2, [pc, #148]	; (8004464 <TIM_Base_SetConfig+0xd4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_Base_SetConfig+0x62>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a24      	ldr	r2, [pc, #144]	; (8004468 <TIM_Base_SetConfig+0xd8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_Base_SetConfig+0x62>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a23      	ldr	r2, [pc, #140]	; (800446c <TIM_Base_SetConfig+0xdc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_Base_SetConfig+0x62>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a22      	ldr	r2, [pc, #136]	; (8004470 <TIM_Base_SetConfig+0xe0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_Base_SetConfig+0x62>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a21      	ldr	r2, [pc, #132]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d108      	bne.n	8004404 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a20      	ldr	r2, [pc, #128]	; (8004478 <TIM_Base_SetConfig+0xe8>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	4393      	bics	r3, r2
 800440a:	001a      	movs	r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <TIM_Base_SetConfig+0xd0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00b      	beq.n	800444a <TIM_Base_SetConfig+0xba>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a0d      	ldr	r2, [pc, #52]	; (800446c <TIM_Base_SetConfig+0xdc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <TIM_Base_SetConfig+0xba>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a0c      	ldr	r2, [pc, #48]	; (8004470 <TIM_Base_SetConfig+0xe0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d003      	beq.n	800444a <TIM_Base_SetConfig+0xba>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a0b      	ldr	r2, [pc, #44]	; (8004474 <TIM_Base_SetConfig+0xe4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d103      	bne.n	8004452 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	615a      	str	r2, [r3, #20]
}
 8004458:	46c0      	nop			; (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b004      	add	sp, #16
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40000400 	.word	0x40000400
 8004468:	40002000 	.word	0x40002000
 800446c:	40014000 	.word	0x40014000
 8004470:	40014400 	.word	0x40014400
 8004474:	40014800 	.word	0x40014800
 8004478:	fffffcff 	.word	0xfffffcff

0800447c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	2201      	movs	r2, #1
 800448c:	4393      	bics	r3, r2
 800448e:	001a      	movs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a32      	ldr	r2, [pc, #200]	; (8004574 <TIM_OC1_SetConfig+0xf8>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2203      	movs	r2, #3
 80044b2:	4393      	bics	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2202      	movs	r2, #2
 80044c4:	4393      	bics	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a28      	ldr	r2, [pc, #160]	; (8004578 <TIM_OC1_SetConfig+0xfc>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <TIM_OC1_SetConfig+0x76>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a27      	ldr	r2, [pc, #156]	; (800457c <TIM_OC1_SetConfig+0x100>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <TIM_OC1_SetConfig+0x76>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a26      	ldr	r2, [pc, #152]	; (8004580 <TIM_OC1_SetConfig+0x104>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_OC1_SetConfig+0x76>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a25      	ldr	r2, [pc, #148]	; (8004584 <TIM_OC1_SetConfig+0x108>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d10c      	bne.n	800450c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2208      	movs	r2, #8
 80044f6:	4393      	bics	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2204      	movs	r2, #4
 8004508:	4393      	bics	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a1a      	ldr	r2, [pc, #104]	; (8004578 <TIM_OC1_SetConfig+0xfc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00b      	beq.n	800452c <TIM_OC1_SetConfig+0xb0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a19      	ldr	r2, [pc, #100]	; (800457c <TIM_OC1_SetConfig+0x100>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <TIM_OC1_SetConfig+0xb0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a18      	ldr	r2, [pc, #96]	; (8004580 <TIM_OC1_SetConfig+0x104>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_OC1_SetConfig+0xb0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a17      	ldr	r2, [pc, #92]	; (8004584 <TIM_OC1_SetConfig+0x108>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d111      	bne.n	8004550 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4a16      	ldr	r2, [pc, #88]	; (8004588 <TIM_OC1_SetConfig+0x10c>)
 8004530:	4013      	ands	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4a15      	ldr	r2, [pc, #84]	; (800458c <TIM_OC1_SetConfig+0x110>)
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b006      	add	sp, #24
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	fffeff8f 	.word	0xfffeff8f
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40014000 	.word	0x40014000
 8004580:	40014400 	.word	0x40014400
 8004584:	40014800 	.word	0x40014800
 8004588:	fffffeff 	.word	0xfffffeff
 800458c:	fffffdff 	.word	0xfffffdff

08004590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	2210      	movs	r2, #16
 80045a0:	4393      	bics	r3, r2
 80045a2:	001a      	movs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a2e      	ldr	r2, [pc, #184]	; (8004678 <TIM_OC2_SetConfig+0xe8>)
 80045be:	4013      	ands	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a2d      	ldr	r2, [pc, #180]	; (800467c <TIM_OC2_SetConfig+0xec>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2220      	movs	r2, #32
 80045da:	4393      	bics	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a24      	ldr	r2, [pc, #144]	; (8004680 <TIM_OC2_SetConfig+0xf0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10d      	bne.n	800460e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	4393      	bics	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2240      	movs	r2, #64	; 0x40
 800460a:	4393      	bics	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <TIM_OC2_SetConfig+0xf0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00b      	beq.n	800462e <TIM_OC2_SetConfig+0x9e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1a      	ldr	r2, [pc, #104]	; (8004684 <TIM_OC2_SetConfig+0xf4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d007      	beq.n	800462e <TIM_OC2_SetConfig+0x9e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a19      	ldr	r2, [pc, #100]	; (8004688 <TIM_OC2_SetConfig+0xf8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d003      	beq.n	800462e <TIM_OC2_SetConfig+0x9e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a18      	ldr	r2, [pc, #96]	; (800468c <TIM_OC2_SetConfig+0xfc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d113      	bne.n	8004656 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4a17      	ldr	r2, [pc, #92]	; (8004690 <TIM_OC2_SetConfig+0x100>)
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4a16      	ldr	r2, [pc, #88]	; (8004694 <TIM_OC2_SetConfig+0x104>)
 800463a:	4013      	ands	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	621a      	str	r2, [r3, #32]
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	b006      	add	sp, #24
 8004676:	bd80      	pop	{r7, pc}
 8004678:	feff8fff 	.word	0xfeff8fff
 800467c:	fffffcff 	.word	0xfffffcff
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800
 8004690:	fffffbff 	.word	0xfffffbff
 8004694:	fffff7ff 	.word	0xfffff7ff

08004698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	4a35      	ldr	r2, [pc, #212]	; (800477c <TIM_OC3_SetConfig+0xe4>)
 80046a8:	401a      	ands	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a2f      	ldr	r2, [pc, #188]	; (8004780 <TIM_OC3_SetConfig+0xe8>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2203      	movs	r2, #3
 80046cc:	4393      	bics	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <TIM_OC3_SetConfig+0xec>)
 80046de:	4013      	ands	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a25      	ldr	r2, [pc, #148]	; (8004788 <TIM_OC3_SetConfig+0xf0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10d      	bne.n	8004712 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4a24      	ldr	r2, [pc, #144]	; (800478c <TIM_OC3_SetConfig+0xf4>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4a20      	ldr	r2, [pc, #128]	; (8004790 <TIM_OC3_SetConfig+0xf8>)
 800470e:	4013      	ands	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1c      	ldr	r2, [pc, #112]	; (8004788 <TIM_OC3_SetConfig+0xf0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_OC3_SetConfig+0x9a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <TIM_OC3_SetConfig+0xfc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_OC3_SetConfig+0x9a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1c      	ldr	r2, [pc, #112]	; (8004798 <TIM_OC3_SetConfig+0x100>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_OC3_SetConfig+0x9a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1b      	ldr	r2, [pc, #108]	; (800479c <TIM_OC3_SetConfig+0x104>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d113      	bne.n	800475a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4a1a      	ldr	r2, [pc, #104]	; (80047a0 <TIM_OC3_SetConfig+0x108>)
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <TIM_OC3_SetConfig+0x10c>)
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	b006      	add	sp, #24
 800477a:	bd80      	pop	{r7, pc}
 800477c:	fffffeff 	.word	0xfffffeff
 8004780:	fffeff8f 	.word	0xfffeff8f
 8004784:	fffffdff 	.word	0xfffffdff
 8004788:	40012c00 	.word	0x40012c00
 800478c:	fffff7ff 	.word	0xfffff7ff
 8004790:	fffffbff 	.word	0xfffffbff
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400
 800479c:	40014800 	.word	0x40014800
 80047a0:	ffffefff 	.word	0xffffefff
 80047a4:	ffffdfff 	.word	0xffffdfff

080047a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	4a28      	ldr	r2, [pc, #160]	; (8004858 <TIM_OC4_SetConfig+0xb0>)
 80047b8:	401a      	ands	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a22      	ldr	r2, [pc, #136]	; (800485c <TIM_OC4_SetConfig+0xb4>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4a21      	ldr	r2, [pc, #132]	; (8004860 <TIM_OC4_SetConfig+0xb8>)
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	021b      	lsls	r3, r3, #8
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <TIM_OC4_SetConfig+0xbc>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	031b      	lsls	r3, r3, #12
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a19      	ldr	r2, [pc, #100]	; (8004868 <TIM_OC4_SetConfig+0xc0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00b      	beq.n	8004820 <TIM_OC4_SetConfig+0x78>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a18      	ldr	r2, [pc, #96]	; (800486c <TIM_OC4_SetConfig+0xc4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d007      	beq.n	8004820 <TIM_OC4_SetConfig+0x78>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a17      	ldr	r2, [pc, #92]	; (8004870 <TIM_OC4_SetConfig+0xc8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_OC4_SetConfig+0x78>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a16      	ldr	r2, [pc, #88]	; (8004874 <TIM_OC4_SetConfig+0xcc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d109      	bne.n	8004834 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4a15      	ldr	r2, [pc, #84]	; (8004878 <TIM_OC4_SetConfig+0xd0>)
 8004824:	4013      	ands	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	019b      	lsls	r3, r3, #6
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b006      	add	sp, #24
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	ffffefff 	.word	0xffffefff
 800485c:	feff8fff 	.word	0xfeff8fff
 8004860:	fffffcff 	.word	0xfffffcff
 8004864:	ffffdfff 	.word	0xffffdfff
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800
 8004878:	ffffbfff 	.word	0xffffbfff

0800487c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4a25      	ldr	r2, [pc, #148]	; (8004920 <TIM_OC5_SetConfig+0xa4>)
 800488c:	401a      	ands	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <TIM_OC5_SetConfig+0xa8>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <TIM_OC5_SetConfig+0xac>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	041b      	lsls	r3, r3, #16
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a17      	ldr	r2, [pc, #92]	; (800492c <TIM_OC5_SetConfig+0xb0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00b      	beq.n	80048ea <TIM_OC5_SetConfig+0x6e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a16      	ldr	r2, [pc, #88]	; (8004930 <TIM_OC5_SetConfig+0xb4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_OC5_SetConfig+0x6e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a15      	ldr	r2, [pc, #84]	; (8004934 <TIM_OC5_SetConfig+0xb8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_OC5_SetConfig+0x6e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a14      	ldr	r2, [pc, #80]	; (8004938 <TIM_OC5_SetConfig+0xbc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d109      	bne.n	80048fe <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	4a0c      	ldr	r2, [pc, #48]	; (8004920 <TIM_OC5_SetConfig+0xa4>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	621a      	str	r2, [r3, #32]
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b006      	add	sp, #24
 800491e:	bd80      	pop	{r7, pc}
 8004920:	fffeffff 	.word	0xfffeffff
 8004924:	fffeff8f 	.word	0xfffeff8f
 8004928:	fffdffff 	.word	0xfffdffff
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40014000 	.word	0x40014000
 8004934:	40014400 	.word	0x40014400
 8004938:	40014800 	.word	0x40014800

0800493c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <TIM_OC6_SetConfig+0xa8>)
 800494c:	401a      	ands	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <TIM_OC6_SetConfig+0xac>)
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <TIM_OC6_SetConfig+0xb0>)
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	051b      	lsls	r3, r3, #20
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a18      	ldr	r2, [pc, #96]	; (80049f0 <TIM_OC6_SetConfig+0xb4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00b      	beq.n	80049ac <TIM_OC6_SetConfig+0x70>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <TIM_OC6_SetConfig+0xb8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d007      	beq.n	80049ac <TIM_OC6_SetConfig+0x70>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <TIM_OC6_SetConfig+0xbc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_OC6_SetConfig+0x70>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a15      	ldr	r2, [pc, #84]	; (80049fc <TIM_OC6_SetConfig+0xc0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d109      	bne.n	80049c0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <TIM_OC6_SetConfig+0xc4>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	029b      	lsls	r3, r3, #10
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	b006      	add	sp, #24
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	ffefffff 	.word	0xffefffff
 80049e8:	feff8fff 	.word	0xfeff8fff
 80049ec:	ffdfffff 	.word	0xffdfffff
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40014400 	.word	0x40014400
 80049fc:	40014800 	.word	0x40014800
 8004a00:	fffbffff 	.word	0xfffbffff

08004a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	221f      	movs	r2, #31
 8004a14:	4013      	ands	r3, r2
 8004a16:	2201      	movs	r2, #1
 8004a18:	409a      	lsls	r2, r3
 8004a1a:	0013      	movs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	43d2      	mvns	r2, r2
 8004a26:	401a      	ands	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a1a      	ldr	r2, [r3, #32]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	211f      	movs	r1, #31
 8004a34:	400b      	ands	r3, r1
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4099      	lsls	r1, r3
 8004a3a:	000b      	movs	r3, r1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b006      	add	sp, #24
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	223c      	movs	r2, #60	; 0x3c
 8004a5a:	5c9b      	ldrb	r3, [r3, r2]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e040      	b.n	8004ae6 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	223c      	movs	r2, #60	; 0x3c
 8004a68:	2101      	movs	r1, #1
 8004a6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	223d      	movs	r2, #61	; 0x3d
 8004a70:	2102      	movs	r1, #2
 8004a72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d108      	bne.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2270      	movs	r2, #112	; 0x70
 8004aa4:	4393      	bics	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	4393      	bics	r3, r2
 8004ab8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	223d      	movs	r2, #61	; 0x3d
 8004ad8:	2101      	movs	r1, #1
 8004ada:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	223c      	movs	r2, #60	; 0x3c
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b004      	add	sp, #16
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	ff0fffff 	.word	0xff0fffff

08004af8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	223c      	movs	r2, #60	; 0x3c
 8004b0a:	5c9b      	ldrb	r3, [r3, r2]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e079      	b.n	8004c08 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	223c      	movs	r2, #60	; 0x3c
 8004b18:	2101      	movs	r1, #1
 8004b1a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	22ff      	movs	r2, #255	; 0xff
 8004b20:	4393      	bics	r3, r2
 8004b22:	001a      	movs	r2, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4a38      	ldr	r2, [pc, #224]	; (8004c10 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004b30:	401a      	ands	r2, r3
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a35      	ldr	r2, [pc, #212]	; (8004c14 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004b3e:	401a      	ands	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a33      	ldr	r2, [pc, #204]	; (8004c18 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004b4c:	401a      	ands	r2, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4a30      	ldr	r2, [pc, #192]	; (8004c1c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a2e      	ldr	r2, [pc, #184]	; (8004c20 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004b68:	401a      	ands	r2, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4a2b      	ldr	r2, [pc, #172]	; (8004c24 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004b76:	401a      	ands	r2, r3
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a29      	ldr	r2, [pc, #164]	; (8004c28 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004b84:	401a      	ands	r2, r3
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a25      	ldr	r2, [pc, #148]	; (8004c2c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d106      	bne.n	8004ba8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4a24      	ldr	r2, [pc, #144]	; (8004c30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d121      	bne.n	8004bf6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	051b      	lsls	r3, r3, #20
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a12      	ldr	r2, [pc, #72]	; (8004c2c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d106      	bne.n	8004bf6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004bec:	401a      	ands	r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	223c      	movs	r2, #60	; 0x3c
 8004c02:	2100      	movs	r1, #0
 8004c04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b004      	add	sp, #16
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	fffffcff 	.word	0xfffffcff
 8004c14:	fffffbff 	.word	0xfffffbff
 8004c18:	fffff7ff 	.word	0xfffff7ff
 8004c1c:	ffffefff 	.word	0xffffefff
 8004c20:	ffffdfff 	.word	0xffffdfff
 8004c24:	ffffbfff 	.word	0xffffbfff
 8004c28:	fff0ffff 	.word	0xfff0ffff
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	efffffff 	.word	0xefffffff
 8004c34:	ff0fffff 	.word	0xff0fffff
 8004c38:	feffffff 	.word	0xfeffffff
 8004c3c:	fdffffff 	.word	0xfdffffff
 8004c40:	dfffffff 	.word	0xdfffffff

08004c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e046      	b.n	8004ce4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2280      	movs	r2, #128	; 0x80
 8004c5a:	589b      	ldr	r3, [r3, r2]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	227c      	movs	r2, #124	; 0x7c
 8004c64:	2100      	movs	r1, #0
 8004c66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f007 fd18 	bl	800c6a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2280      	movs	r2, #128	; 0x80
 8004c74:	2124      	movs	r1, #36	; 0x24
 8004c76:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2101      	movs	r1, #1
 8004c84:	438a      	bics	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f000 fb36 	bl	80052fc <UART_SetConfig>
 8004c90:	0003      	movs	r3, r0
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e024      	b.n	8004ce4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f000 ffb1 	bl	8005c0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	490d      	ldr	r1, [pc, #52]	; (8004cec <HAL_UART_Init+0xa8>)
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	212a      	movs	r1, #42	; 0x2a
 8004cc6:	438a      	bics	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f001 f849 	bl	8005d74 <UART_CheckIdleState>
 8004ce2:	0003      	movs	r3, r0
}
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b002      	add	sp, #8
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	ffffb7ff 	.word	0xffffb7ff

08004cf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	1dbb      	adds	r3, r7, #6
 8004cfe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	589b      	ldr	r3, [r3, r2]
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d000      	beq.n	8004d0c <HAL_UART_Transmit+0x1c>
 8004d0a:	e097      	b.n	8004e3c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_UART_Transmit+0x2a>
 8004d12:	1dbb      	adds	r3, r7, #6
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e08f      	b.n	8004e3e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	2380      	movs	r3, #128	; 0x80
 8004d24:	015b      	lsls	r3, r3, #5
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d109      	bne.n	8004d3e <HAL_UART_Transmit+0x4e>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d105      	bne.n	8004d3e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2201      	movs	r2, #1
 8004d36:	4013      	ands	r3, r2
 8004d38:	d001      	beq.n	8004d3e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07f      	b.n	8004e3e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	227c      	movs	r2, #124	; 0x7c
 8004d42:	5c9b      	ldrb	r3, [r3, r2]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Transmit+0x5c>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e078      	b.n	8004e3e <HAL_UART_Transmit+0x14e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	227c      	movs	r2, #124	; 0x7c
 8004d50:	2101      	movs	r1, #1
 8004d52:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2288      	movs	r2, #136	; 0x88
 8004d58:	2100      	movs	r1, #0
 8004d5a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2280      	movs	r2, #128	; 0x80
 8004d60:	2121      	movs	r1, #33	; 0x21
 8004d62:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004d64:	f7fc fb3e 	bl	80013e4 <HAL_GetTick>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1dba      	adds	r2, r7, #6
 8004d70:	2154      	movs	r1, #84	; 0x54
 8004d72:	8812      	ldrh	r2, [r2, #0]
 8004d74:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1dba      	adds	r2, r7, #6
 8004d7a:	2156      	movs	r1, #86	; 0x56
 8004d7c:	8812      	ldrh	r2, [r2, #0]
 8004d7e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	015b      	lsls	r3, r3, #5
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d108      	bne.n	8004d9e <HAL_UART_Transmit+0xae>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d104      	bne.n	8004d9e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e003      	b.n	8004da6 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004da6:	e02c      	b.n	8004e02 <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	0013      	movs	r3, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	2180      	movs	r1, #128	; 0x80
 8004db6:	f001 f827 	bl	8005e08 <UART_WaitOnFlagUntilTimeout>
 8004dba:	1e03      	subs	r3, r0, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e03d      	b.n	8004e3e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10b      	bne.n	8004de0 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	001a      	movs	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	05d2      	lsls	r2, r2, #23
 8004dd4:	0dd2      	lsrs	r2, r2, #23
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	3302      	adds	r3, #2
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e007      	b.n	8004df0 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	781a      	ldrb	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3301      	adds	r3, #1
 8004dee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2256      	movs	r2, #86	; 0x56
 8004df4:	5a9b      	ldrh	r3, [r3, r2]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b299      	uxth	r1, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2256      	movs	r2, #86	; 0x56
 8004e00:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2256      	movs	r2, #86	; 0x56
 8004e06:	5a9b      	ldrh	r3, [r3, r2]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1cc      	bne.n	8004da8 <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	0013      	movs	r3, r2
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2140      	movs	r1, #64	; 0x40
 8004e1c:	f000 fff4 	bl	8005e08 <UART_WaitOnFlagUntilTimeout>
 8004e20:	1e03      	subs	r3, r0, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e00a      	b.n	8004e3e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2280      	movs	r2, #128	; 0x80
 8004e2c:	2120      	movs	r1, #32
 8004e2e:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	227c      	movs	r2, #124	; 0x7c
 8004e34:	2100      	movs	r1, #0
 8004e36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	0018      	movs	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b008      	add	sp, #32
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	1dbb      	adds	r3, r7, #6
 8004e54:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2284      	movs	r2, #132	; 0x84
 8004e5a:	589b      	ldr	r3, [r3, r2]
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d000      	beq.n	8004e62 <HAL_UART_Receive_IT+0x1a>
 8004e60:	e0d6      	b.n	8005010 <HAL_UART_Receive_IT+0x1c8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_UART_Receive_IT+0x28>
 8004e68:	1dbb      	adds	r3, r7, #6
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_UART_Receive_IT+0x2c>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0ce      	b.n	8005012 <HAL_UART_Receive_IT+0x1ca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	015b      	lsls	r3, r3, #5
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d109      	bne.n	8004e94 <HAL_UART_Receive_IT+0x4c>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d105      	bne.n	8004e94 <HAL_UART_Receive_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d001      	beq.n	8004e94 <HAL_UART_Receive_IT+0x4c>
      {
        return  HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0be      	b.n	8005012 <HAL_UART_Receive_IT+0x1ca>
      }
    }

    __HAL_LOCK(huart);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	227c      	movs	r2, #124	; 0x7c
 8004e98:	5c9b      	ldrb	r3, [r3, r2]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Receive_IT+0x5a>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e0b7      	b.n	8005012 <HAL_UART_Receive_IT+0x1ca>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	227c      	movs	r2, #124	; 0x7c
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	1dba      	adds	r2, r7, #6
 8004eb4:	215c      	movs	r1, #92	; 0x5c
 8004eb6:	8812      	ldrh	r2, [r2, #0]
 8004eb8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1dba      	adds	r2, r7, #6
 8004ebe:	215e      	movs	r1, #94	; 0x5e
 8004ec0:	8812      	ldrh	r2, [r2, #0]
 8004ec2:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	2380      	movs	r3, #128	; 0x80
 8004ed0:	015b      	lsls	r3, r3, #5
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d10d      	bne.n	8004ef2 <HAL_UART_Receive_IT+0xaa>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <HAL_UART_Receive_IT+0xa0>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2260      	movs	r2, #96	; 0x60
 8004ee2:	494e      	ldr	r1, [pc, #312]	; (800501c <HAL_UART_Receive_IT+0x1d4>)
 8004ee4:	5299      	strh	r1, [r3, r2]
 8004ee6:	e02e      	b.n	8004f46 <HAL_UART_Receive_IT+0xfe>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2260      	movs	r2, #96	; 0x60
 8004eec:	21ff      	movs	r1, #255	; 0xff
 8004eee:	5299      	strh	r1, [r3, r2]
 8004ef0:	e029      	b.n	8004f46 <HAL_UART_Receive_IT+0xfe>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10d      	bne.n	8004f16 <HAL_UART_Receive_IT+0xce>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d104      	bne.n	8004f0c <HAL_UART_Receive_IT+0xc4>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2260      	movs	r2, #96	; 0x60
 8004f06:	21ff      	movs	r1, #255	; 0xff
 8004f08:	5299      	strh	r1, [r3, r2]
 8004f0a:	e01c      	b.n	8004f46 <HAL_UART_Receive_IT+0xfe>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2260      	movs	r2, #96	; 0x60
 8004f10:	217f      	movs	r1, #127	; 0x7f
 8004f12:	5299      	strh	r1, [r3, r2]
 8004f14:	e017      	b.n	8004f46 <HAL_UART_Receive_IT+0xfe>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	055b      	lsls	r3, r3, #21
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d10d      	bne.n	8004f3e <HAL_UART_Receive_IT+0xf6>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <HAL_UART_Receive_IT+0xec>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2260      	movs	r2, #96	; 0x60
 8004f2e:	217f      	movs	r1, #127	; 0x7f
 8004f30:	5299      	strh	r1, [r3, r2]
 8004f32:	e008      	b.n	8004f46 <HAL_UART_Receive_IT+0xfe>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2260      	movs	r2, #96	; 0x60
 8004f38:	213f      	movs	r1, #63	; 0x3f
 8004f3a:	5299      	strh	r1, [r3, r2]
 8004f3c:	e003      	b.n	8004f46 <HAL_UART_Receive_IT+0xfe>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2260      	movs	r2, #96	; 0x60
 8004f42:	2100      	movs	r1, #0
 8004f44:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2288      	movs	r2, #136	; 0x88
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2284      	movs	r2, #132	; 0x84
 8004f52:	2122      	movs	r1, #34	; 0x22
 8004f54:	5099      	str	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2101      	movs	r1, #1
 8004f62:	430a      	orrs	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	059b      	lsls	r3, r3, #22
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d12e      	bne.n	8004fd0 <HAL_UART_Receive_IT+0x188>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2268      	movs	r2, #104	; 0x68
 8004f76:	5a9b      	ldrh	r3, [r3, r2]
 8004f78:	1dba      	adds	r2, r7, #6
 8004f7a:	8812      	ldrh	r2, [r2, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d327      	bcc.n	8004fd0 <HAL_UART_Receive_IT+0x188>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	015b      	lsls	r3, r3, #5
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d107      	bne.n	8004f9c <HAL_UART_Receive_IT+0x154>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <HAL_UART_Receive_IT+0x154>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a22      	ldr	r2, [pc, #136]	; (8005020 <HAL_UART_Receive_IT+0x1d8>)
 8004f98:	66da      	str	r2, [r3, #108]	; 0x6c
 8004f9a:	e002      	b.n	8004fa2 <HAL_UART_Receive_IT+0x15a>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4a21      	ldr	r2, [pc, #132]	; (8005024 <HAL_UART_Receive_IT+0x1dc>)
 8004fa0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	227c      	movs	r2, #124	; 0x7c
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	5499      	strb	r1, [r3, r2]

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	0049      	lsls	r1, r1, #1
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2180      	movs	r1, #128	; 0x80
 8004fc8:	0549      	lsls	r1, r1, #21
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	609a      	str	r2, [r3, #8]
 8004fce:	e01d      	b.n	800500c <HAL_UART_Receive_IT+0x1c4>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	015b      	lsls	r3, r3, #5
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d107      	bne.n	8004fec <HAL_UART_Receive_IT+0x1a4>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d103      	bne.n	8004fec <HAL_UART_Receive_IT+0x1a4>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4a10      	ldr	r2, [pc, #64]	; (8005028 <HAL_UART_Receive_IT+0x1e0>)
 8004fe8:	66da      	str	r2, [r3, #108]	; 0x6c
 8004fea:	e002      	b.n	8004ff2 <HAL_UART_Receive_IT+0x1aa>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a0f      	ldr	r2, [pc, #60]	; (800502c <HAL_UART_Receive_IT+0x1e4>)
 8004ff0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	227c      	movs	r2, #124	; 0x7c
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	5499      	strb	r1, [r3, r2]

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2190      	movs	r1, #144	; 0x90
 8005006:	0049      	lsls	r1, r1, #1
 8005008:	430a      	orrs	r2, r1
 800500a:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e000      	b.n	8005012 <HAL_UART_Receive_IT+0x1ca>
  }
  else
  {
    return HAL_BUSY;
 8005010:	2302      	movs	r3, #2
  }
}
 8005012:	0018      	movs	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	b004      	add	sp, #16
 8005018:	bd80      	pop	{r7, pc}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	000001ff 	.word	0x000001ff
 8005020:	08006209 	.word	0x08006209
 8005024:	080060cd 	.word	0x080060cd
 8005028:	0800600d 	.word	0x0800600d
 800502c:	08005f4d 	.word	0x08005f4d

08005030 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	220f      	movs	r2, #15
 8005054:	4013      	ands	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d117      	bne.n	800508e <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	2220      	movs	r2, #32
 8005062:	4013      	ands	r3, r2
 8005064:	d013      	beq.n	800508e <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2220      	movs	r2, #32
 800506a:	4013      	ands	r3, r2
 800506c:	d104      	bne.n	8005078 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	055b      	lsls	r3, r3, #21
 8005074:	4013      	ands	r3, r2
 8005076:	d00a      	beq.n	800508e <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d100      	bne.n	8005082 <HAL_UART_IRQHandler+0x52>
 8005080:	e127      	b.n	80052d2 <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	0010      	movs	r0, r2
 800508a:	4798      	blx	r3
      }
      return;
 800508c:	e121      	b.n	80052d2 <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d100      	bne.n	8005096 <HAL_UART_IRQHandler+0x66>
 8005094:	e0c8      	b.n	8005228 <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	4a92      	ldr	r2, [pc, #584]	; (80052e4 <HAL_UART_IRQHandler+0x2b4>)
 800509a:	4013      	ands	r3, r2
 800509c:	d105      	bne.n	80050aa <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	2390      	movs	r3, #144	; 0x90
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4013      	ands	r3, r2
 80050a6:	d100      	bne.n	80050aa <HAL_UART_IRQHandler+0x7a>
 80050a8:	e0be      	b.n	8005228 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	2201      	movs	r2, #1
 80050ae:	4013      	ands	r3, r2
 80050b0:	d010      	beq.n	80050d4 <HAL_UART_IRQHandler+0xa4>
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4013      	ands	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2201      	movs	r2, #1
 80050c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2288      	movs	r2, #136	; 0x88
 80050c8:	589b      	ldr	r3, [r3, r2]
 80050ca:	2201      	movs	r2, #1
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2188      	movs	r1, #136	; 0x88
 80050d2:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	2202      	movs	r2, #2
 80050d8:	4013      	ands	r3, r2
 80050da:	d00f      	beq.n	80050fc <HAL_UART_IRQHandler+0xcc>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2201      	movs	r2, #1
 80050e0:	4013      	ands	r3, r2
 80050e2:	d00b      	beq.n	80050fc <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2202      	movs	r2, #2
 80050ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2288      	movs	r2, #136	; 0x88
 80050f0:	589b      	ldr	r3, [r3, r2]
 80050f2:	2204      	movs	r2, #4
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2188      	movs	r1, #136	; 0x88
 80050fa:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2204      	movs	r2, #4
 8005100:	4013      	ands	r3, r2
 8005102:	d00f      	beq.n	8005124 <HAL_UART_IRQHandler+0xf4>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2201      	movs	r2, #1
 8005108:	4013      	ands	r3, r2
 800510a:	d00b      	beq.n	8005124 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2204      	movs	r2, #4
 8005112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2288      	movs	r2, #136	; 0x88
 8005118:	589b      	ldr	r3, [r3, r2]
 800511a:	2202      	movs	r2, #2
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2188      	movs	r1, #136	; 0x88
 8005122:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2208      	movs	r2, #8
 8005128:	4013      	ands	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2220      	movs	r2, #32
 8005130:	4013      	ands	r3, r2
 8005132:	d103      	bne.n	800513c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	4a6b      	ldr	r2, [pc, #428]	; (80052e4 <HAL_UART_IRQHandler+0x2b4>)
 8005138:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800513a:	d00b      	beq.n	8005154 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2208      	movs	r2, #8
 8005142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2288      	movs	r2, #136	; 0x88
 8005148:	589b      	ldr	r3, [r3, r2]
 800514a:	2208      	movs	r2, #8
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2188      	movs	r1, #136	; 0x88
 8005152:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2288      	movs	r2, #136	; 0x88
 8005158:	589b      	ldr	r3, [r3, r2]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d100      	bne.n	8005160 <HAL_UART_IRQHandler+0x130>
 800515e:	e0ba      	b.n	80052d6 <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2220      	movs	r2, #32
 8005164:	4013      	ands	r3, r2
 8005166:	d011      	beq.n	800518c <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2220      	movs	r2, #32
 800516c:	4013      	ands	r3, r2
 800516e:	d104      	bne.n	800517a <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	055b      	lsls	r3, r3, #21
 8005176:	4013      	ands	r3, r2
 8005178:	d008      	beq.n	800518c <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	0010      	movs	r0, r2
 800518a:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2288      	movs	r2, #136	; 0x88
 8005190:	589b      	ldr	r3, [r3, r2]
 8005192:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2240      	movs	r2, #64	; 0x40
 800519c:	4013      	ands	r3, r2
 800519e:	2b40      	cmp	r3, #64	; 0x40
 80051a0:	d003      	beq.n	80051aa <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2208      	movs	r2, #8
 80051a6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051a8:	d033      	beq.n	8005212 <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 fe77 	bl	8005ea0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2240      	movs	r2, #64	; 0x40
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d123      	bne.n	8005208 <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2140      	movs	r1, #64	; 0x40
 80051cc:	438a      	bics	r2, r1
 80051ce:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d012      	beq.n	80051fe <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051dc:	4a42      	ldr	r2, [pc, #264]	; (80052e8 <HAL_UART_IRQHandler+0x2b8>)
 80051de:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e4:	0018      	movs	r0, r3
 80051e6:	f7fd fd75 	bl	8002cd4 <HAL_DMA_Abort_IT>
 80051ea:	1e03      	subs	r3, r0, #0
 80051ec:	d01a      	beq.n	8005224 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051f8:	0018      	movs	r0, r3
 80051fa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fc:	e012      	b.n	8005224 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0018      	movs	r0, r3
 8005202:	f000 f873 	bl	80052ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005206:	e00d      	b.n	8005224 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	0018      	movs	r0, r3
 800520c:	f000 f86e 	bl	80052ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	e008      	b.n	8005224 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0018      	movs	r0, r3
 8005216:	f000 f869 	bl	80052ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2288      	movs	r2, #136	; 0x88
 800521e:	2100      	movs	r1, #0
 8005220:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005222:	e058      	b.n	80052d6 <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	46c0      	nop			; (mov r8, r8)
    return;
 8005226:	e056      	b.n	80052d6 <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	2380      	movs	r3, #128	; 0x80
 800522c:	035b      	lsls	r3, r3, #13
 800522e:	4013      	ands	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_UART_IRQHandler+0x220>
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	03db      	lsls	r3, r3, #15
 8005238:	4013      	ands	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2280      	movs	r2, #128	; 0x80
 8005242:	0352      	lsls	r2, r2, #13
 8005244:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	0018      	movs	r0, r3
 800524a:	f001 f87b 	bl	8006344 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800524e:	e045      	b.n	80052dc <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2280      	movs	r2, #128	; 0x80
 8005254:	4013      	ands	r3, r2
 8005256:	d012      	beq.n	800527e <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2280      	movs	r2, #128	; 0x80
 800525c:	4013      	ands	r3, r2
 800525e:	d104      	bne.n	800526a <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	041b      	lsls	r3, r3, #16
 8005266:	4013      	ands	r3, r2
 8005268:	d009      	beq.n	800527e <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	2b00      	cmp	r3, #0
 8005270:	d033      	beq.n	80052da <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	0010      	movs	r0, r2
 800527a:	4798      	blx	r3
    }
    return;
 800527c:	e02d      	b.n	80052da <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	2240      	movs	r2, #64	; 0x40
 8005282:	4013      	ands	r3, r2
 8005284:	d008      	beq.n	8005298 <HAL_UART_IRQHandler+0x268>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2240      	movs	r2, #64	; 0x40
 800528a:	4013      	ands	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	0018      	movs	r0, r3
 8005292:	f000 fe40 	bl	8005f16 <UART_EndTransmit_IT>
    return;
 8005296:	e021      	b.n	80052dc <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	4013      	ands	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_UART_IRQHandler+0x286>
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	05db      	lsls	r3, r3, #23
 80052a8:	4013      	ands	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	0018      	movs	r0, r3
 80052b0:	f001 f858 	bl	8006364 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052b4:	e012      	b.n	80052dc <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	045b      	lsls	r3, r3, #17
 80052bc:	4013      	ands	r3, r2
 80052be:	d00d      	beq.n	80052dc <HAL_UART_IRQHandler+0x2ac>
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	da0a      	bge.n	80052dc <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f001 f843 	bl	8006354 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	e004      	b.n	80052dc <HAL_UART_IRQHandler+0x2ac>
      return;
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	e002      	b.n	80052dc <HAL_UART_IRQHandler+0x2ac>
    return;
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	e000      	b.n	80052dc <HAL_UART_IRQHandler+0x2ac>
    return;
 80052da:	46c0      	nop			; (mov r8, r8)
  }
}
 80052dc:	46bd      	mov	sp, r7
 80052de:	b008      	add	sp, #32
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	10000001 	.word	0x10000001
 80052e8:	08005ee9 	.word	0x08005ee9

080052ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052f4:	46c0      	nop			; (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b002      	add	sp, #8
 80052fa:	bd80      	pop	{r7, pc}

080052fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005308:	231e      	movs	r3, #30
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	4313      	orrs	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4aba      	ldr	r2, [pc, #744]	; (8005628 <UART_SetConfig+0x32c>)
 800533e:	4013      	ands	r3, r2
 8005340:	0019      	movs	r1, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4ab6      	ldr	r2, [pc, #728]	; (800562c <UART_SetConfig+0x330>)
 8005354:	4013      	ands	r3, r2
 8005356:	0019      	movs	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4313      	orrs	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	4aad      	ldr	r2, [pc, #692]	; (8005630 <UART_SetConfig+0x334>)
 800537c:	4013      	ands	r3, r2
 800537e:	0019      	movs	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	430a      	orrs	r2, r1
 8005388:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	220f      	movs	r2, #15
 8005392:	4393      	bics	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4aa3      	ldr	r2, [pc, #652]	; (8005634 <UART_SetConfig+0x338>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d125      	bne.n	80053f8 <UART_SetConfig+0xfc>
 80053ac:	4ba2      	ldr	r3, [pc, #648]	; (8005638 <UART_SetConfig+0x33c>)
 80053ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b0:	2203      	movs	r2, #3
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d00f      	beq.n	80053d8 <UART_SetConfig+0xdc>
 80053b8:	d304      	bcc.n	80053c4 <UART_SetConfig+0xc8>
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d007      	beq.n	80053ce <UART_SetConfig+0xd2>
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d00f      	beq.n	80053e2 <UART_SetConfig+0xe6>
 80053c2:	e013      	b.n	80053ec <UART_SetConfig+0xf0>
 80053c4:	231f      	movs	r3, #31
 80053c6:	18fb      	adds	r3, r7, r3
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	e05a      	b.n	8005484 <UART_SetConfig+0x188>
 80053ce:	231f      	movs	r3, #31
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	2202      	movs	r2, #2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	e055      	b.n	8005484 <UART_SetConfig+0x188>
 80053d8:	231f      	movs	r3, #31
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	2204      	movs	r2, #4
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	e050      	b.n	8005484 <UART_SetConfig+0x188>
 80053e2:	231f      	movs	r3, #31
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	2208      	movs	r2, #8
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	e04b      	b.n	8005484 <UART_SetConfig+0x188>
 80053ec:	231f      	movs	r3, #31
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	2210      	movs	r2, #16
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	e045      	b.n	8005484 <UART_SetConfig+0x188>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a8f      	ldr	r2, [pc, #572]	; (800563c <UART_SetConfig+0x340>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d128      	bne.n	8005454 <UART_SetConfig+0x158>
 8005402:	4b8d      	ldr	r3, [pc, #564]	; (8005638 <UART_SetConfig+0x33c>)
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	220c      	movs	r2, #12
 8005408:	4013      	ands	r3, r2
 800540a:	2b04      	cmp	r3, #4
 800540c:	d012      	beq.n	8005434 <UART_SetConfig+0x138>
 800540e:	d802      	bhi.n	8005416 <UART_SetConfig+0x11a>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <UART_SetConfig+0x124>
 8005414:	e018      	b.n	8005448 <UART_SetConfig+0x14c>
 8005416:	2b08      	cmp	r3, #8
 8005418:	d007      	beq.n	800542a <UART_SetConfig+0x12e>
 800541a:	2b0c      	cmp	r3, #12
 800541c:	d00f      	beq.n	800543e <UART_SetConfig+0x142>
 800541e:	e013      	b.n	8005448 <UART_SetConfig+0x14c>
 8005420:	231f      	movs	r3, #31
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	e02c      	b.n	8005484 <UART_SetConfig+0x188>
 800542a:	231f      	movs	r3, #31
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	2202      	movs	r2, #2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e027      	b.n	8005484 <UART_SetConfig+0x188>
 8005434:	231f      	movs	r3, #31
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	2204      	movs	r2, #4
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	e022      	b.n	8005484 <UART_SetConfig+0x188>
 800543e:	231f      	movs	r3, #31
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	2208      	movs	r2, #8
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	e01d      	b.n	8005484 <UART_SetConfig+0x188>
 8005448:	231f      	movs	r3, #31
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2210      	movs	r2, #16
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	e017      	b.n	8005484 <UART_SetConfig+0x188>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a79      	ldr	r2, [pc, #484]	; (8005640 <UART_SetConfig+0x344>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d104      	bne.n	8005468 <UART_SetConfig+0x16c>
 800545e:	231f      	movs	r3, #31
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e00d      	b.n	8005484 <UART_SetConfig+0x188>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a75      	ldr	r2, [pc, #468]	; (8005644 <UART_SetConfig+0x348>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d104      	bne.n	800547c <UART_SetConfig+0x180>
 8005472:	231f      	movs	r3, #31
 8005474:	18fb      	adds	r3, r7, r3
 8005476:	2200      	movs	r2, #0
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e003      	b.n	8005484 <UART_SetConfig+0x188>
 800547c:	231f      	movs	r3, #31
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	2210      	movs	r2, #16
 8005482:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	429a      	cmp	r2, r3
 800548e:	d000      	beq.n	8005492 <UART_SetConfig+0x196>
 8005490:	e1de      	b.n	8005850 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 8005492:	231f      	movs	r3, #31
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d100      	bne.n	800549e <UART_SetConfig+0x1a2>
 800549c:	e06c      	b.n	8005578 <UART_SetConfig+0x27c>
 800549e:	dc02      	bgt.n	80054a6 <UART_SetConfig+0x1aa>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <UART_SetConfig+0x1b8>
 80054a4:	e1ab      	b.n	80057fe <UART_SetConfig+0x502>
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d100      	bne.n	80054ac <UART_SetConfig+0x1b0>
 80054aa:	e0e5      	b.n	8005678 <UART_SetConfig+0x37c>
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d100      	bne.n	80054b2 <UART_SetConfig+0x1b6>
 80054b0:	e144      	b.n	800573c <UART_SetConfig+0x440>
 80054b2:	e1a4      	b.n	80057fe <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b4:	f7fe fc78 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 80054b8:	0003      	movs	r3, r0
 80054ba:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d044      	beq.n	800554e <UART_SetConfig+0x252>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d03e      	beq.n	800554a <UART_SetConfig+0x24e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d038      	beq.n	8005546 <UART_SetConfig+0x24a>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d032      	beq.n	8005542 <UART_SetConfig+0x246>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d02c      	beq.n	800553e <UART_SetConfig+0x242>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2b05      	cmp	r3, #5
 80054ea:	d026      	beq.n	800553a <UART_SetConfig+0x23e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b06      	cmp	r3, #6
 80054f2:	d020      	beq.n	8005536 <UART_SetConfig+0x23a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b07      	cmp	r3, #7
 80054fa:	d01a      	beq.n	8005532 <UART_SetConfig+0x236>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2b08      	cmp	r3, #8
 8005502:	d014      	beq.n	800552e <UART_SetConfig+0x232>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b09      	cmp	r3, #9
 800550a:	d00e      	beq.n	800552a <UART_SetConfig+0x22e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	2b0a      	cmp	r3, #10
 8005512:	d008      	beq.n	8005526 <UART_SetConfig+0x22a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	2b0b      	cmp	r3, #11
 800551a:	d102      	bne.n	8005522 <UART_SetConfig+0x226>
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	e016      	b.n	8005550 <UART_SetConfig+0x254>
 8005522:	2301      	movs	r3, #1
 8005524:	e014      	b.n	8005550 <UART_SetConfig+0x254>
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	e012      	b.n	8005550 <UART_SetConfig+0x254>
 800552a:	2340      	movs	r3, #64	; 0x40
 800552c:	e010      	b.n	8005550 <UART_SetConfig+0x254>
 800552e:	2320      	movs	r3, #32
 8005530:	e00e      	b.n	8005550 <UART_SetConfig+0x254>
 8005532:	2310      	movs	r3, #16
 8005534:	e00c      	b.n	8005550 <UART_SetConfig+0x254>
 8005536:	230c      	movs	r3, #12
 8005538:	e00a      	b.n	8005550 <UART_SetConfig+0x254>
 800553a:	230a      	movs	r3, #10
 800553c:	e008      	b.n	8005550 <UART_SetConfig+0x254>
 800553e:	2308      	movs	r3, #8
 8005540:	e006      	b.n	8005550 <UART_SetConfig+0x254>
 8005542:	2306      	movs	r3, #6
 8005544:	e004      	b.n	8005550 <UART_SetConfig+0x254>
 8005546:	2304      	movs	r3, #4
 8005548:	e002      	b.n	8005550 <UART_SetConfig+0x254>
 800554a:	2302      	movs	r3, #2
 800554c:	e000      	b.n	8005550 <UART_SetConfig+0x254>
 800554e:	2301      	movs	r3, #1
 8005550:	0019      	movs	r1, r3
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7fa fdd4 	bl	8000100 <__udivsi3>
 8005558:	0003      	movs	r3, r0
 800555a:	005a      	lsls	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	085b      	lsrs	r3, r3, #1
 8005562:	18d2      	adds	r2, r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	0019      	movs	r1, r3
 800556a:	0010      	movs	r0, r2
 800556c:	f7fa fdc8 	bl	8000100 <__udivsi3>
 8005570:	0003      	movs	r3, r0
 8005572:	b29b      	uxth	r3, r3
 8005574:	617b      	str	r3, [r7, #20]
        break;
 8005576:	e147      	b.n	8005808 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	2b00      	cmp	r3, #0
 800557e:	d043      	beq.n	8005608 <UART_SetConfig+0x30c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	2b01      	cmp	r3, #1
 8005586:	d03d      	beq.n	8005604 <UART_SetConfig+0x308>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2b02      	cmp	r3, #2
 800558e:	d037      	beq.n	8005600 <UART_SetConfig+0x304>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	2b03      	cmp	r3, #3
 8005596:	d031      	beq.n	80055fc <UART_SetConfig+0x300>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	2b04      	cmp	r3, #4
 800559e:	d02b      	beq.n	80055f8 <UART_SetConfig+0x2fc>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	2b05      	cmp	r3, #5
 80055a6:	d025      	beq.n	80055f4 <UART_SetConfig+0x2f8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	2b06      	cmp	r3, #6
 80055ae:	d01f      	beq.n	80055f0 <UART_SetConfig+0x2f4>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2b07      	cmp	r3, #7
 80055b6:	d019      	beq.n	80055ec <UART_SetConfig+0x2f0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d013      	beq.n	80055e8 <UART_SetConfig+0x2ec>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b09      	cmp	r3, #9
 80055c6:	d00d      	beq.n	80055e4 <UART_SetConfig+0x2e8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	2b0a      	cmp	r3, #10
 80055ce:	d007      	beq.n	80055e0 <UART_SetConfig+0x2e4>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2b0b      	cmp	r3, #11
 80055d6:	d101      	bne.n	80055dc <UART_SetConfig+0x2e0>
 80055d8:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <UART_SetConfig+0x34c>)
 80055da:	e016      	b.n	800560a <UART_SetConfig+0x30e>
 80055dc:	4b1b      	ldr	r3, [pc, #108]	; (800564c <UART_SetConfig+0x350>)
 80055de:	e014      	b.n	800560a <UART_SetConfig+0x30e>
 80055e0:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <UART_SetConfig+0x354>)
 80055e2:	e012      	b.n	800560a <UART_SetConfig+0x30e>
 80055e4:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <UART_SetConfig+0x358>)
 80055e6:	e010      	b.n	800560a <UART_SetConfig+0x30e>
 80055e8:	4b1b      	ldr	r3, [pc, #108]	; (8005658 <UART_SetConfig+0x35c>)
 80055ea:	e00e      	b.n	800560a <UART_SetConfig+0x30e>
 80055ec:	4b1b      	ldr	r3, [pc, #108]	; (800565c <UART_SetConfig+0x360>)
 80055ee:	e00c      	b.n	800560a <UART_SetConfig+0x30e>
 80055f0:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <UART_SetConfig+0x364>)
 80055f2:	e00a      	b.n	800560a <UART_SetConfig+0x30e>
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <UART_SetConfig+0x368>)
 80055f6:	e008      	b.n	800560a <UART_SetConfig+0x30e>
 80055f8:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <UART_SetConfig+0x36c>)
 80055fa:	e006      	b.n	800560a <UART_SetConfig+0x30e>
 80055fc:	4b1b      	ldr	r3, [pc, #108]	; (800566c <UART_SetConfig+0x370>)
 80055fe:	e004      	b.n	800560a <UART_SetConfig+0x30e>
 8005600:	4b1b      	ldr	r3, [pc, #108]	; (8005670 <UART_SetConfig+0x374>)
 8005602:	e002      	b.n	800560a <UART_SetConfig+0x30e>
 8005604:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <UART_SetConfig+0x378>)
 8005606:	e000      	b.n	800560a <UART_SetConfig+0x30e>
 8005608:	4b10      	ldr	r3, [pc, #64]	; (800564c <UART_SetConfig+0x350>)
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6852      	ldr	r2, [r2, #4]
 800560e:	0852      	lsrs	r2, r2, #1
 8005610:	189a      	adds	r2, r3, r2
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	0019      	movs	r1, r3
 8005618:	0010      	movs	r0, r2
 800561a:	f7fa fd71 	bl	8000100 <__udivsi3>
 800561e:	0003      	movs	r3, r0
 8005620:	b29b      	uxth	r3, r3
 8005622:	617b      	str	r3, [r7, #20]
        break;
 8005624:	e0f0      	b.n	8005808 <UART_SetConfig+0x50c>
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	cfff69f3 	.word	0xcfff69f3
 800562c:	ffffcfff 	.word	0xffffcfff
 8005630:	11fff4ff 	.word	0x11fff4ff
 8005634:	40013800 	.word	0x40013800
 8005638:	40021000 	.word	0x40021000
 800563c:	40004400 	.word	0x40004400
 8005640:	40004800 	.word	0x40004800
 8005644:	40004c00 	.word	0x40004c00
 8005648:	0001e848 	.word	0x0001e848
 800564c:	01e84800 	.word	0x01e84800
 8005650:	0003d090 	.word	0x0003d090
 8005654:	0007a120 	.word	0x0007a120
 8005658:	000f4240 	.word	0x000f4240
 800565c:	001e8480 	.word	0x001e8480
 8005660:	0028b0aa 	.word	0x0028b0aa
 8005664:	0030d400 	.word	0x0030d400
 8005668:	003d0900 	.word	0x003d0900
 800566c:	00516154 	.word	0x00516154
 8005670:	007a1200 	.word	0x007a1200
 8005674:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005678:	f7fe fb0a 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 800567c:	0003      	movs	r3, r0
 800567e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	2b00      	cmp	r3, #0
 8005686:	d044      	beq.n	8005712 <UART_SetConfig+0x416>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	2b01      	cmp	r3, #1
 800568e:	d03e      	beq.n	800570e <UART_SetConfig+0x412>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	2b02      	cmp	r3, #2
 8005696:	d038      	beq.n	800570a <UART_SetConfig+0x40e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2b03      	cmp	r3, #3
 800569e:	d032      	beq.n	8005706 <UART_SetConfig+0x40a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d02c      	beq.n	8005702 <UART_SetConfig+0x406>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	2b05      	cmp	r3, #5
 80056ae:	d026      	beq.n	80056fe <UART_SetConfig+0x402>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d020      	beq.n	80056fa <UART_SetConfig+0x3fe>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	2b07      	cmp	r3, #7
 80056be:	d01a      	beq.n	80056f6 <UART_SetConfig+0x3fa>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d014      	beq.n	80056f2 <UART_SetConfig+0x3f6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	2b09      	cmp	r3, #9
 80056ce:	d00e      	beq.n	80056ee <UART_SetConfig+0x3f2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b0a      	cmp	r3, #10
 80056d6:	d008      	beq.n	80056ea <UART_SetConfig+0x3ee>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	2b0b      	cmp	r3, #11
 80056de:	d102      	bne.n	80056e6 <UART_SetConfig+0x3ea>
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	e016      	b.n	8005714 <UART_SetConfig+0x418>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e014      	b.n	8005714 <UART_SetConfig+0x418>
 80056ea:	2380      	movs	r3, #128	; 0x80
 80056ec:	e012      	b.n	8005714 <UART_SetConfig+0x418>
 80056ee:	2340      	movs	r3, #64	; 0x40
 80056f0:	e010      	b.n	8005714 <UART_SetConfig+0x418>
 80056f2:	2320      	movs	r3, #32
 80056f4:	e00e      	b.n	8005714 <UART_SetConfig+0x418>
 80056f6:	2310      	movs	r3, #16
 80056f8:	e00c      	b.n	8005714 <UART_SetConfig+0x418>
 80056fa:	230c      	movs	r3, #12
 80056fc:	e00a      	b.n	8005714 <UART_SetConfig+0x418>
 80056fe:	230a      	movs	r3, #10
 8005700:	e008      	b.n	8005714 <UART_SetConfig+0x418>
 8005702:	2308      	movs	r3, #8
 8005704:	e006      	b.n	8005714 <UART_SetConfig+0x418>
 8005706:	2306      	movs	r3, #6
 8005708:	e004      	b.n	8005714 <UART_SetConfig+0x418>
 800570a:	2304      	movs	r3, #4
 800570c:	e002      	b.n	8005714 <UART_SetConfig+0x418>
 800570e:	2302      	movs	r3, #2
 8005710:	e000      	b.n	8005714 <UART_SetConfig+0x418>
 8005712:	2301      	movs	r3, #1
 8005714:	0019      	movs	r1, r3
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7fa fcf2 	bl	8000100 <__udivsi3>
 800571c:	0003      	movs	r3, r0
 800571e:	005a      	lsls	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	085b      	lsrs	r3, r3, #1
 8005726:	18d2      	adds	r2, r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	0019      	movs	r1, r3
 800572e:	0010      	movs	r0, r2
 8005730:	f7fa fce6 	bl	8000100 <__udivsi3>
 8005734:	0003      	movs	r3, r0
 8005736:	b29b      	uxth	r3, r3
 8005738:	617b      	str	r3, [r7, #20]
        break;
 800573a:	e065      	b.n	8005808 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d04c      	beq.n	80057de <UART_SetConfig+0x4e2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b01      	cmp	r3, #1
 800574a:	d045      	beq.n	80057d8 <UART_SetConfig+0x4dc>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b02      	cmp	r3, #2
 8005752:	d03e      	beq.n	80057d2 <UART_SetConfig+0x4d6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	2b03      	cmp	r3, #3
 800575a:	d038      	beq.n	80057ce <UART_SetConfig+0x4d2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2b04      	cmp	r3, #4
 8005762:	d031      	beq.n	80057c8 <UART_SetConfig+0x4cc>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	2b05      	cmp	r3, #5
 800576a:	d02b      	beq.n	80057c4 <UART_SetConfig+0x4c8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2b06      	cmp	r3, #6
 8005772:	d025      	beq.n	80057c0 <UART_SetConfig+0x4c4>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2b07      	cmp	r3, #7
 800577a:	d01e      	beq.n	80057ba <UART_SetConfig+0x4be>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b08      	cmp	r3, #8
 8005782:	d017      	beq.n	80057b4 <UART_SetConfig+0x4b8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2b09      	cmp	r3, #9
 800578a:	d010      	beq.n	80057ae <UART_SetConfig+0x4b2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	2b0a      	cmp	r3, #10
 8005792:	d009      	beq.n	80057a8 <UART_SetConfig+0x4ac>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b0b      	cmp	r3, #11
 800579a:	d102      	bne.n	80057a2 <UART_SetConfig+0x4a6>
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	e01f      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057a2:	2380      	movs	r3, #128	; 0x80
 80057a4:	025b      	lsls	r3, r3, #9
 80057a6:	e01c      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	e019      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	e016      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057b4:	2380      	movs	r3, #128	; 0x80
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	e013      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057ba:	2380      	movs	r3, #128	; 0x80
 80057bc:	015b      	lsls	r3, r3, #5
 80057be:	e010      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057c0:	4bb9      	ldr	r3, [pc, #740]	; (8005aa8 <UART_SetConfig+0x7ac>)
 80057c2:	e00e      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057c4:	4bb9      	ldr	r3, [pc, #740]	; (8005aac <UART_SetConfig+0x7b0>)
 80057c6:	e00c      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	019b      	lsls	r3, r3, #6
 80057cc:	e009      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057ce:	4bb8      	ldr	r3, [pc, #736]	; (8005ab0 <UART_SetConfig+0x7b4>)
 80057d0:	e007      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	01db      	lsls	r3, r3, #7
 80057d6:	e004      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	e001      	b.n	80057e2 <UART_SetConfig+0x4e6>
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	025b      	lsls	r3, r3, #9
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6852      	ldr	r2, [r2, #4]
 80057e6:	0852      	lsrs	r2, r2, #1
 80057e8:	189a      	adds	r2, r3, r2
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	0019      	movs	r1, r3
 80057f0:	0010      	movs	r0, r2
 80057f2:	f7fa fc85 	bl	8000100 <__udivsi3>
 80057f6:	0003      	movs	r3, r0
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	617b      	str	r3, [r7, #20]
        break;
 80057fc:	e004      	b.n	8005808 <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 80057fe:	231e      	movs	r3, #30
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	2201      	movs	r2, #1
 8005804:	701a      	strb	r2, [r3, #0]
        break;
 8005806:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b0f      	cmp	r3, #15
 800580c:	d91b      	bls.n	8005846 <UART_SetConfig+0x54a>
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	4aa8      	ldr	r2, [pc, #672]	; (8005ab4 <UART_SetConfig+0x7b8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d817      	bhi.n	8005846 <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	b29a      	uxth	r2, r3
 800581a:	200a      	movs	r0, #10
 800581c:	183b      	adds	r3, r7, r0
 800581e:	210f      	movs	r1, #15
 8005820:	438a      	bics	r2, r1
 8005822:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	b29b      	uxth	r3, r3
 800582a:	2207      	movs	r2, #7
 800582c:	4013      	ands	r3, r2
 800582e:	b299      	uxth	r1, r3
 8005830:	183b      	adds	r3, r7, r0
 8005832:	183a      	adds	r2, r7, r0
 8005834:	8812      	ldrh	r2, [r2, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	183a      	adds	r2, r7, r0
 8005840:	8812      	ldrh	r2, [r2, #0]
 8005842:	60da      	str	r2, [r3, #12]
 8005844:	e1c5      	b.n	8005bd2 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 8005846:	231e      	movs	r3, #30
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	2201      	movs	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	e1c0      	b.n	8005bd2 <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 8005850:	231f      	movs	r3, #31
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d100      	bne.n	800585c <UART_SetConfig+0x560>
 800585a:	e06c      	b.n	8005936 <UART_SetConfig+0x63a>
 800585c:	dc02      	bgt.n	8005864 <UART_SetConfig+0x568>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d007      	beq.n	8005872 <UART_SetConfig+0x576>
 8005862:	e1a1      	b.n	8005ba8 <UART_SetConfig+0x8ac>
 8005864:	2b04      	cmp	r3, #4
 8005866:	d100      	bne.n	800586a <UART_SetConfig+0x56e>
 8005868:	e0bc      	b.n	80059e4 <UART_SetConfig+0x6e8>
 800586a:	2b08      	cmp	r3, #8
 800586c:	d100      	bne.n	8005870 <UART_SetConfig+0x574>
 800586e:	e13b      	b.n	8005ae8 <UART_SetConfig+0x7ec>
 8005870:	e19a      	b.n	8005ba8 <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005872:	f7fe fa99 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8005876:	0003      	movs	r3, r0
 8005878:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	2b00      	cmp	r3, #0
 8005880:	d044      	beq.n	800590c <UART_SetConfig+0x610>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b01      	cmp	r3, #1
 8005888:	d03e      	beq.n	8005908 <UART_SetConfig+0x60c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2b02      	cmp	r3, #2
 8005890:	d038      	beq.n	8005904 <UART_SetConfig+0x608>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b03      	cmp	r3, #3
 8005898:	d032      	beq.n	8005900 <UART_SetConfig+0x604>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d02c      	beq.n	80058fc <UART_SetConfig+0x600>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d026      	beq.n	80058f8 <UART_SetConfig+0x5fc>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	2b06      	cmp	r3, #6
 80058b0:	d020      	beq.n	80058f4 <UART_SetConfig+0x5f8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2b07      	cmp	r3, #7
 80058b8:	d01a      	beq.n	80058f0 <UART_SetConfig+0x5f4>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d014      	beq.n	80058ec <UART_SetConfig+0x5f0>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2b09      	cmp	r3, #9
 80058c8:	d00e      	beq.n	80058e8 <UART_SetConfig+0x5ec>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2b0a      	cmp	r3, #10
 80058d0:	d008      	beq.n	80058e4 <UART_SetConfig+0x5e8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b0b      	cmp	r3, #11
 80058d8:	d102      	bne.n	80058e0 <UART_SetConfig+0x5e4>
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	e016      	b.n	800590e <UART_SetConfig+0x612>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e014      	b.n	800590e <UART_SetConfig+0x612>
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	e012      	b.n	800590e <UART_SetConfig+0x612>
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	e010      	b.n	800590e <UART_SetConfig+0x612>
 80058ec:	2320      	movs	r3, #32
 80058ee:	e00e      	b.n	800590e <UART_SetConfig+0x612>
 80058f0:	2310      	movs	r3, #16
 80058f2:	e00c      	b.n	800590e <UART_SetConfig+0x612>
 80058f4:	230c      	movs	r3, #12
 80058f6:	e00a      	b.n	800590e <UART_SetConfig+0x612>
 80058f8:	230a      	movs	r3, #10
 80058fa:	e008      	b.n	800590e <UART_SetConfig+0x612>
 80058fc:	2308      	movs	r3, #8
 80058fe:	e006      	b.n	800590e <UART_SetConfig+0x612>
 8005900:	2306      	movs	r3, #6
 8005902:	e004      	b.n	800590e <UART_SetConfig+0x612>
 8005904:	2304      	movs	r3, #4
 8005906:	e002      	b.n	800590e <UART_SetConfig+0x612>
 8005908:	2302      	movs	r3, #2
 800590a:	e000      	b.n	800590e <UART_SetConfig+0x612>
 800590c:	2301      	movs	r3, #1
 800590e:	0019      	movs	r1, r3
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7fa fbf5 	bl	8000100 <__udivsi3>
 8005916:	0003      	movs	r3, r0
 8005918:	001a      	movs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	18d2      	adds	r2, r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	0019      	movs	r1, r3
 8005928:	0010      	movs	r0, r2
 800592a:	f7fa fbe9 	bl	8000100 <__udivsi3>
 800592e:	0003      	movs	r3, r0
 8005930:	b29b      	uxth	r3, r3
 8005932:	617b      	str	r3, [r7, #20]
        break;
 8005934:	e13d      	b.n	8005bb2 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	2b00      	cmp	r3, #0
 800593c:	d043      	beq.n	80059c6 <UART_SetConfig+0x6ca>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2b01      	cmp	r3, #1
 8005944:	d03d      	beq.n	80059c2 <UART_SetConfig+0x6c6>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	2b02      	cmp	r3, #2
 800594c:	d037      	beq.n	80059be <UART_SetConfig+0x6c2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2b03      	cmp	r3, #3
 8005954:	d031      	beq.n	80059ba <UART_SetConfig+0x6be>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b04      	cmp	r3, #4
 800595c:	d02b      	beq.n	80059b6 <UART_SetConfig+0x6ba>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2b05      	cmp	r3, #5
 8005964:	d025      	beq.n	80059b2 <UART_SetConfig+0x6b6>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b06      	cmp	r3, #6
 800596c:	d01f      	beq.n	80059ae <UART_SetConfig+0x6b2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b07      	cmp	r3, #7
 8005974:	d019      	beq.n	80059aa <UART_SetConfig+0x6ae>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b08      	cmp	r3, #8
 800597c:	d013      	beq.n	80059a6 <UART_SetConfig+0x6aa>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b09      	cmp	r3, #9
 8005984:	d00d      	beq.n	80059a2 <UART_SetConfig+0x6a6>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b0a      	cmp	r3, #10
 800598c:	d007      	beq.n	800599e <UART_SetConfig+0x6a2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b0b      	cmp	r3, #11
 8005994:	d101      	bne.n	800599a <UART_SetConfig+0x69e>
 8005996:	4b48      	ldr	r3, [pc, #288]	; (8005ab8 <UART_SetConfig+0x7bc>)
 8005998:	e016      	b.n	80059c8 <UART_SetConfig+0x6cc>
 800599a:	4b48      	ldr	r3, [pc, #288]	; (8005abc <UART_SetConfig+0x7c0>)
 800599c:	e014      	b.n	80059c8 <UART_SetConfig+0x6cc>
 800599e:	4b48      	ldr	r3, [pc, #288]	; (8005ac0 <UART_SetConfig+0x7c4>)
 80059a0:	e012      	b.n	80059c8 <UART_SetConfig+0x6cc>
 80059a2:	4b48      	ldr	r3, [pc, #288]	; (8005ac4 <UART_SetConfig+0x7c8>)
 80059a4:	e010      	b.n	80059c8 <UART_SetConfig+0x6cc>
 80059a6:	4b48      	ldr	r3, [pc, #288]	; (8005ac8 <UART_SetConfig+0x7cc>)
 80059a8:	e00e      	b.n	80059c8 <UART_SetConfig+0x6cc>
 80059aa:	4b48      	ldr	r3, [pc, #288]	; (8005acc <UART_SetConfig+0x7d0>)
 80059ac:	e00c      	b.n	80059c8 <UART_SetConfig+0x6cc>
 80059ae:	4b48      	ldr	r3, [pc, #288]	; (8005ad0 <UART_SetConfig+0x7d4>)
 80059b0:	e00a      	b.n	80059c8 <UART_SetConfig+0x6cc>
 80059b2:	4b48      	ldr	r3, [pc, #288]	; (8005ad4 <UART_SetConfig+0x7d8>)
 80059b4:	e008      	b.n	80059c8 <UART_SetConfig+0x6cc>
 80059b6:	4b48      	ldr	r3, [pc, #288]	; (8005ad8 <UART_SetConfig+0x7dc>)
 80059b8:	e006      	b.n	80059c8 <UART_SetConfig+0x6cc>
 80059ba:	4b48      	ldr	r3, [pc, #288]	; (8005adc <UART_SetConfig+0x7e0>)
 80059bc:	e004      	b.n	80059c8 <UART_SetConfig+0x6cc>
 80059be:	4b48      	ldr	r3, [pc, #288]	; (8005ae0 <UART_SetConfig+0x7e4>)
 80059c0:	e002      	b.n	80059c8 <UART_SetConfig+0x6cc>
 80059c2:	4b48      	ldr	r3, [pc, #288]	; (8005ae4 <UART_SetConfig+0x7e8>)
 80059c4:	e000      	b.n	80059c8 <UART_SetConfig+0x6cc>
 80059c6:	4b3d      	ldr	r3, [pc, #244]	; (8005abc <UART_SetConfig+0x7c0>)
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6852      	ldr	r2, [r2, #4]
 80059cc:	0852      	lsrs	r2, r2, #1
 80059ce:	189a      	adds	r2, r3, r2
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	0019      	movs	r1, r3
 80059d6:	0010      	movs	r0, r2
 80059d8:	f7fa fb92 	bl	8000100 <__udivsi3>
 80059dc:	0003      	movs	r3, r0
 80059de:	b29b      	uxth	r3, r3
 80059e0:	617b      	str	r3, [r7, #20]
        break;
 80059e2:	e0e6      	b.n	8005bb2 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e4:	f7fe f954 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 80059e8:	0003      	movs	r3, r0
 80059ea:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d044      	beq.n	8005a7e <UART_SetConfig+0x782>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d03e      	beq.n	8005a7a <UART_SetConfig+0x77e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d038      	beq.n	8005a76 <UART_SetConfig+0x77a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d032      	beq.n	8005a72 <UART_SetConfig+0x776>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d02c      	beq.n	8005a6e <UART_SetConfig+0x772>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	2b05      	cmp	r3, #5
 8005a1a:	d026      	beq.n	8005a6a <UART_SetConfig+0x76e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	2b06      	cmp	r3, #6
 8005a22:	d020      	beq.n	8005a66 <UART_SetConfig+0x76a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	2b07      	cmp	r3, #7
 8005a2a:	d01a      	beq.n	8005a62 <UART_SetConfig+0x766>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d014      	beq.n	8005a5e <UART_SetConfig+0x762>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	2b09      	cmp	r3, #9
 8005a3a:	d00e      	beq.n	8005a5a <UART_SetConfig+0x75e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	2b0a      	cmp	r3, #10
 8005a42:	d008      	beq.n	8005a56 <UART_SetConfig+0x75a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	2b0b      	cmp	r3, #11
 8005a4a:	d102      	bne.n	8005a52 <UART_SetConfig+0x756>
 8005a4c:	2380      	movs	r3, #128	; 0x80
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	e016      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e014      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	e012      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a5a:	2340      	movs	r3, #64	; 0x40
 8005a5c:	e010      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a5e:	2320      	movs	r3, #32
 8005a60:	e00e      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a62:	2310      	movs	r3, #16
 8005a64:	e00c      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a66:	230c      	movs	r3, #12
 8005a68:	e00a      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a6a:	230a      	movs	r3, #10
 8005a6c:	e008      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a6e:	2308      	movs	r3, #8
 8005a70:	e006      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a72:	2306      	movs	r3, #6
 8005a74:	e004      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a76:	2304      	movs	r3, #4
 8005a78:	e002      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e000      	b.n	8005a80 <UART_SetConfig+0x784>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	0019      	movs	r1, r3
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7fa fb3c 	bl	8000100 <__udivsi3>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	18d2      	adds	r2, r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	0019      	movs	r1, r3
 8005a9a:	0010      	movs	r0, r2
 8005a9c:	f7fa fb30 	bl	8000100 <__udivsi3>
 8005aa0:	0003      	movs	r3, r0
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	617b      	str	r3, [r7, #20]
        break;
 8005aa6:	e084      	b.n	8005bb2 <UART_SetConfig+0x8b6>
 8005aa8:	00001554 	.word	0x00001554
 8005aac:	00001998 	.word	0x00001998
 8005ab0:	00002aaa 	.word	0x00002aaa
 8005ab4:	0000ffff 	.word	0x0000ffff
 8005ab8:	0000f424 	.word	0x0000f424
 8005abc:	00f42400 	.word	0x00f42400
 8005ac0:	0001e848 	.word	0x0001e848
 8005ac4:	0003d090 	.word	0x0003d090
 8005ac8:	0007a120 	.word	0x0007a120
 8005acc:	000f4240 	.word	0x000f4240
 8005ad0:	00145855 	.word	0x00145855
 8005ad4:	00186a00 	.word	0x00186a00
 8005ad8:	001e8480 	.word	0x001e8480
 8005adc:	0028b0aa 	.word	0x0028b0aa
 8005ae0:	003d0900 	.word	0x003d0900
 8005ae4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d04b      	beq.n	8005b88 <UART_SetConfig+0x88c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d044      	beq.n	8005b82 <UART_SetConfig+0x886>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d03d      	beq.n	8005b7c <UART_SetConfig+0x880>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d037      	beq.n	8005b78 <UART_SetConfig+0x87c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d030      	beq.n	8005b72 <UART_SetConfig+0x876>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b05      	cmp	r3, #5
 8005b16:	d02a      	beq.n	8005b6e <UART_SetConfig+0x872>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	d024      	beq.n	8005b6a <UART_SetConfig+0x86e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b07      	cmp	r3, #7
 8005b26:	d01d      	beq.n	8005b64 <UART_SetConfig+0x868>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d016      	beq.n	8005b5e <UART_SetConfig+0x862>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	2b09      	cmp	r3, #9
 8005b36:	d00f      	beq.n	8005b58 <UART_SetConfig+0x85c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2b0a      	cmp	r3, #10
 8005b3e:	d008      	beq.n	8005b52 <UART_SetConfig+0x856>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	2b0b      	cmp	r3, #11
 8005b46:	d101      	bne.n	8005b4c <UART_SetConfig+0x850>
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	e01f      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	021b      	lsls	r3, r3, #8
 8005b50:	e01c      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	e019      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	e016      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	e013      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	e010      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b6a:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <UART_SetConfig+0x900>)
 8005b6c:	e00e      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b6e:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <UART_SetConfig+0x904>)
 8005b70:	e00c      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	015b      	lsls	r3, r3, #5
 8005b76:	e009      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b78:	4b22      	ldr	r3, [pc, #136]	; (8005c04 <UART_SetConfig+0x908>)
 8005b7a:	e007      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	019b      	lsls	r3, r3, #6
 8005b80:	e004      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b82:	2380      	movs	r3, #128	; 0x80
 8005b84:	01db      	lsls	r3, r3, #7
 8005b86:	e001      	b.n	8005b8c <UART_SetConfig+0x890>
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6852      	ldr	r2, [r2, #4]
 8005b90:	0852      	lsrs	r2, r2, #1
 8005b92:	189a      	adds	r2, r3, r2
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	0019      	movs	r1, r3
 8005b9a:	0010      	movs	r0, r2
 8005b9c:	f7fa fab0 	bl	8000100 <__udivsi3>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	617b      	str	r3, [r7, #20]
        break;
 8005ba6:	e004      	b.n	8005bb2 <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 8005ba8:	231e      	movs	r3, #30
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	2201      	movs	r2, #1
 8005bae:	701a      	strb	r2, [r3, #0]
        break;
 8005bb0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b0f      	cmp	r3, #15
 8005bb6:	d908      	bls.n	8005bca <UART_SetConfig+0x8ce>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <UART_SetConfig+0x90c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d804      	bhi.n	8005bca <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	60da      	str	r2, [r3, #12]
 8005bc8:	e003      	b.n	8005bd2 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 8005bca:	231e      	movs	r3, #30
 8005bcc:	18fb      	adds	r3, r7, r3
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	226a      	movs	r2, #106	; 0x6a
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2268      	movs	r2, #104	; 0x68
 8005bde:	2101      	movs	r1, #1
 8005be0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005bee:	231e      	movs	r3, #30
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	781b      	ldrb	r3, [r3, #0]
}
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b008      	add	sp, #32
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	00000aaa 	.word	0x00000aaa
 8005c00:	00000ccc 	.word	0x00000ccc
 8005c04:	00001555 	.word	0x00001555
 8005c08:	0000ffff 	.word	0x0000ffff

08005c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	2201      	movs	r2, #1
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d00b      	beq.n	8005c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4a4a      	ldr	r2, [pc, #296]	; (8005d50 <UART_AdvFeatureConfig+0x144>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4a43      	ldr	r2, [pc, #268]	; (8005d54 <UART_AdvFeatureConfig+0x148>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	0019      	movs	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4a3b      	ldr	r2, [pc, #236]	; (8005d58 <UART_AdvFeatureConfig+0x14c>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	2208      	movs	r2, #8
 8005c80:	4013      	ands	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4a34      	ldr	r2, [pc, #208]	; (8005d5c <UART_AdvFeatureConfig+0x150>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	0019      	movs	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d00b      	beq.n	8005cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4a2c      	ldr	r2, [pc, #176]	; (8005d60 <UART_AdvFeatureConfig+0x154>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	4a25      	ldr	r2, [pc, #148]	; (8005d64 <UART_AdvFeatureConfig+0x158>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	2240      	movs	r2, #64	; 0x40
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d01d      	beq.n	8005d26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <UART_AdvFeatureConfig+0x15c>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	0019      	movs	r1, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d06:	2380      	movs	r3, #128	; 0x80
 8005d08:	035b      	lsls	r3, r3, #13
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d10b      	bne.n	8005d26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <UART_AdvFeatureConfig+0x160>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	0019      	movs	r1, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	2280      	movs	r2, #128	; 0x80
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4a0e      	ldr	r2, [pc, #56]	; (8005d70 <UART_AdvFeatureConfig+0x164>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }
}
 8005d48:	46c0      	nop			; (mov r8, r8)
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b002      	add	sp, #8
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	fffdffff 	.word	0xfffdffff
 8005d54:	fffeffff 	.word	0xfffeffff
 8005d58:	fffbffff 	.word	0xfffbffff
 8005d5c:	ffff7fff 	.word	0xffff7fff
 8005d60:	ffffefff 	.word	0xffffefff
 8005d64:	ffffdfff 	.word	0xffffdfff
 8005d68:	ffefffff 	.word	0xffefffff
 8005d6c:	ff9fffff 	.word	0xff9fffff
 8005d70:	fff7ffff 	.word	0xfff7ffff

08005d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2288      	movs	r2, #136	; 0x88
 8005d80:	2100      	movs	r1, #0
 8005d82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005d84:	f7fb fb2e 	bl	80013e4 <HAL_GetTick>
 8005d88:	0003      	movs	r3, r0
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2208      	movs	r2, #8
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d10d      	bne.n	8005db6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	0399      	lsls	r1, r3, #14
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <UART_CheckIdleState+0x90>)
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	0013      	movs	r3, r2
 8005da8:	2200      	movs	r2, #0
 8005daa:	f000 f82d 	bl	8005e08 <UART_WaitOnFlagUntilTimeout>
 8005dae:	1e03      	subs	r3, r0, #0
 8005db0:	d001      	beq.n	8005db6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e021      	b.n	8005dfa <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d10d      	bne.n	8005de0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	2380      	movs	r3, #128	; 0x80
 8005dc8:	03d9      	lsls	r1, r3, #15
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <UART_CheckIdleState+0x90>)
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	0013      	movs	r3, r2
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f000 f818 	bl	8005e08 <UART_WaitOnFlagUntilTimeout>
 8005dd8:	1e03      	subs	r3, r0, #0
 8005dda:	d001      	beq.n	8005de0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e00c      	b.n	8005dfa <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2280      	movs	r2, #128	; 0x80
 8005de4:	2120      	movs	r1, #32
 8005de6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2284      	movs	r2, #132	; 0x84
 8005dec:	2120      	movs	r1, #32
 8005dee:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	227c      	movs	r2, #124	; 0x7c
 8005df4:	2100      	movs	r1, #0
 8005df6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b004      	add	sp, #16
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	01ffffff 	.word	0x01ffffff

08005e08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	1dfb      	adds	r3, r7, #7
 8005e16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e18:	e02b      	b.n	8005e72 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	d028      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e20:	f7fb fae0 	bl	80013e4 <HAL_GetTick>
 8005e24:	0002      	movs	r2, r0
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d302      	bcc.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d11d      	bne.n	8005e72 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4916      	ldr	r1, [pc, #88]	; (8005e9c <UART_WaitOnFlagUntilTimeout+0x94>)
 8005e42:	400a      	ands	r2, r1
 8005e44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2101      	movs	r1, #1
 8005e52:	438a      	bics	r2, r1
 8005e54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2280      	movs	r2, #128	; 0x80
 8005e5a:	2120      	movs	r1, #32
 8005e5c:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2284      	movs	r2, #132	; 0x84
 8005e62:	2120      	movs	r1, #32
 8005e64:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	227c      	movs	r2, #124	; 0x7c
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e00f      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	425a      	negs	r2, r3
 8005e82:	4153      	adcs	r3, r2
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	001a      	movs	r2, r3
 8005e88:	1dfb      	adds	r3, r7, #7
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d0c4      	beq.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	0018      	movs	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b004      	add	sp, #16
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	fffffe5f 	.word	0xfffffe5f

08005ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	490b      	ldr	r1, [pc, #44]	; (8005ee0 <UART_EndRxTransfer+0x40>)
 8005eb4:	400a      	ands	r2, r1
 8005eb6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4908      	ldr	r1, [pc, #32]	; (8005ee4 <UART_EndRxTransfer+0x44>)
 8005ec4:	400a      	ands	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2284      	movs	r2, #132	; 0x84
 8005ecc:	2120      	movs	r1, #32
 8005ece:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b002      	add	sp, #8
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	fffffedf 	.word	0xfffffedf
 8005ee4:	effffffe 	.word	0xeffffffe

08005ee8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	225e      	movs	r2, #94	; 0x5e
 8005efa:	2100      	movs	r1, #0
 8005efc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2256      	movs	r2, #86	; 0x56
 8005f02:	2100      	movs	r1, #0
 8005f04:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f7ff f9ef 	bl	80052ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	46bd      	mov	sp, r7
 8005f12:	b004      	add	sp, #16
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2140      	movs	r1, #64	; 0x40
 8005f2a:	438a      	bics	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2280      	movs	r2, #128	; 0x80
 8005f32:	2120      	movs	r1, #32
 8005f34:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f005 f884 	bl	800b04c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f44:	46c0      	nop			; (mov r8, r8)
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f54:	230e      	movs	r3, #14
 8005f56:	18fb      	adds	r3, r7, r3
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	2160      	movs	r1, #96	; 0x60
 8005f5c:	5a52      	ldrh	r2, [r2, r1]
 8005f5e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2284      	movs	r2, #132	; 0x84
 8005f64:	589b      	ldr	r3, [r3, r2]
 8005f66:	2b22      	cmp	r3, #34	; 0x22
 8005f68:	d141      	bne.n	8005fee <UART_RxISR_8BIT+0xa2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f70:	210c      	movs	r1, #12
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	230e      	movs	r3, #14
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b2d9      	uxtb	r1, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f88:	400a      	ands	r2, r1
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	225e      	movs	r2, #94	; 0x5e
 8005f9c:	5a9b      	ldrh	r3, [r3, r2]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b299      	uxth	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	225e      	movs	r2, #94	; 0x5e
 8005fa8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	225e      	movs	r2, #94	; 0x5e
 8005fae:	5a9b      	ldrh	r3, [r3, r2]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d123      	bne.n	8005ffe <UART_RxISR_8BIT+0xb2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4911      	ldr	r1, [pc, #68]	; (8006008 <UART_RxISR_8BIT+0xbc>)
 8005fc2:	400a      	ands	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	438a      	bics	r2, r1
 8005fd4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2284      	movs	r2, #132	; 0x84
 8005fda:	2120      	movs	r1, #32
 8005fdc:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f005 f83a 	bl	800b060 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fec:	e007      	b.n	8005ffe <UART_RxISR_8BIT+0xb2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2108      	movs	r1, #8
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	619a      	str	r2, [r3, #24]
}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	46bd      	mov	sp, r7
 8006002:	b004      	add	sp, #16
 8006004:	bd80      	pop	{r7, pc}
 8006006:	46c0      	nop			; (mov r8, r8)
 8006008:	fffffedf 	.word	0xfffffedf

0800600c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006014:	230e      	movs	r3, #14
 8006016:	18fb      	adds	r3, r7, r3
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	2160      	movs	r1, #96	; 0x60
 800601c:	5a52      	ldrh	r2, [r2, r1]
 800601e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2284      	movs	r2, #132	; 0x84
 8006024:	589b      	ldr	r3, [r3, r2]
 8006026:	2b22      	cmp	r3, #34	; 0x22
 8006028:	d141      	bne.n	80060ae <UART_RxISR_16BIT+0xa2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006030:	210c      	movs	r1, #12
 8006032:	187b      	adds	r3, r7, r1
 8006034:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800603c:	187b      	adds	r3, r7, r1
 800603e:	220e      	movs	r2, #14
 8006040:	18ba      	adds	r2, r7, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	8812      	ldrh	r2, [r2, #0]
 8006046:	4013      	ands	r3, r2
 8006048:	b29a      	uxth	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006052:	1c9a      	adds	r2, r3, #2
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	225e      	movs	r2, #94	; 0x5e
 800605c:	5a9b      	ldrh	r3, [r3, r2]
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b299      	uxth	r1, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	225e      	movs	r2, #94	; 0x5e
 8006068:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	225e      	movs	r2, #94	; 0x5e
 800606e:	5a9b      	ldrh	r3, [r3, r2]
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d123      	bne.n	80060be <UART_RxISR_16BIT+0xb2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4911      	ldr	r1, [pc, #68]	; (80060c8 <UART_RxISR_16BIT+0xbc>)
 8006082:	400a      	ands	r2, r1
 8006084:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2101      	movs	r1, #1
 8006092:	438a      	bics	r2, r1
 8006094:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2284      	movs	r2, #132	; 0x84
 800609a:	2120      	movs	r1, #32
 800609c:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	0018      	movs	r0, r3
 80060a8:	f004 ffda 	bl	800b060 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060ac:	e007      	b.n	80060be <UART_RxISR_16BIT+0xb2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2108      	movs	r1, #8
 80060ba:	430a      	orrs	r2, r1
 80060bc:	619a      	str	r2, [r3, #24]
}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	46bd      	mov	sp, r7
 80060c2:	b004      	add	sp, #16
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	fffffedf 	.word	0xfffffedf

080060cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80060d4:	230c      	movs	r3, #12
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	2160      	movs	r1, #96	; 0x60
 80060dc:	5a52      	ldrh	r2, [r2, r1]
 80060de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2284      	movs	r2, #132	; 0x84
 80060e4:	589b      	ldr	r3, [r3, r2]
 80060e6:	2b22      	cmp	r3, #34	; 0x22
 80060e8:	d000      	beq.n	80060ec <UART_RxISR_8BIT_FIFOEN+0x20>
 80060ea:	e078      	b.n	80061de <UART_RxISR_8BIT_FIFOEN+0x112>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80060ec:	230e      	movs	r3, #14
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	2168      	movs	r1, #104	; 0x68
 80060f4:	5a52      	ldrh	r2, [r2, r1]
 80060f6:	801a      	strh	r2, [r3, #0]
 80060f8:	e046      	b.n	8006188 <UART_RxISR_8BIT_FIFOEN+0xbc>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006100:	2108      	movs	r1, #8
 8006102:	187b      	adds	r3, r7, r1
 8006104:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006106:	187b      	adds	r3, r7, r1
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b2da      	uxtb	r2, r3
 800610c:	230c      	movs	r3, #12
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b2d9      	uxtb	r1, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006118:	400a      	ands	r2, r1
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	225e      	movs	r2, #94	; 0x5e
 800612c:	5a9b      	ldrh	r3, [r3, r2]
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b299      	uxth	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	225e      	movs	r2, #94	; 0x5e
 8006138:	5299      	strh	r1, [r3, r2]

      if (huart->RxXferCount == 0U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	225e      	movs	r2, #94	; 0x5e
 800613e:	5a9b      	ldrh	r3, [r3, r2]
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11a      	bne.n	800617c <UART_RxISR_8BIT_FIFOEN+0xb0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4929      	ldr	r1, [pc, #164]	; (80061f8 <UART_RxISR_8BIT_FIFOEN+0x12c>)
 8006152:	400a      	ands	r2, r1
 8006154:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4926      	ldr	r1, [pc, #152]	; (80061fc <UART_RxISR_8BIT_FIFOEN+0x130>)
 8006162:	400a      	ands	r2, r1
 8006164:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2284      	movs	r2, #132	; 0x84
 800616a:	2120      	movs	r1, #32
 800616c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	0018      	movs	r0, r3
 8006178:	f004 ff72 	bl	800b060 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800617c:	210e      	movs	r1, #14
 800617e:	187b      	adds	r3, r7, r1
 8006180:	881a      	ldrh	r2, [r3, #0]
 8006182:	187b      	adds	r3, r7, r1
 8006184:	3a01      	subs	r2, #1
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	230e      	movs	r3, #14
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1b3      	bne.n	80060fa <UART_RxISR_8BIT_FIFOEN+0x2e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006192:	200a      	movs	r0, #10
 8006194:	183b      	adds	r3, r7, r0
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	215e      	movs	r1, #94	; 0x5e
 800619a:	5a52      	ldrh	r2, [r2, r1]
 800619c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800619e:	183b      	adds	r3, r7, r0
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d023      	beq.n	80061ee <UART_RxISR_8BIT_FIFOEN+0x122>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2268      	movs	r2, #104	; 0x68
 80061aa:	5a9b      	ldrh	r3, [r3, r2]
 80061ac:	220a      	movs	r2, #10
 80061ae:	18ba      	adds	r2, r7, r2
 80061b0:	8812      	ldrh	r2, [r2, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d21b      	bcs.n	80061ee <UART_RxISR_8BIT_FIFOEN+0x122>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	490f      	ldr	r1, [pc, #60]	; (8006200 <UART_RxISR_8BIT_FIFOEN+0x134>)
 80061c2:	400a      	ands	r2, r1
 80061c4:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a0e      	ldr	r2, [pc, #56]	; (8006204 <UART_RxISR_8BIT_FIFOEN+0x138>)
 80061ca:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2120      	movs	r1, #32
 80061d8:	430a      	orrs	r2, r1
 80061da:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061dc:	e007      	b.n	80061ee <UART_RxISR_8BIT_FIFOEN+0x122>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2108      	movs	r1, #8
 80061ea:	430a      	orrs	r2, r1
 80061ec:	619a      	str	r2, [r3, #24]
}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b004      	add	sp, #16
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	fffffeff 	.word	0xfffffeff
 80061fc:	effffffe 	.word	0xeffffffe
 8006200:	efffffff 	.word	0xefffffff
 8006204:	08005f4d 	.word	0x08005f4d

08006208 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006210:	2314      	movs	r3, #20
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	2160      	movs	r1, #96	; 0x60
 8006218:	5a52      	ldrh	r2, [r2, r1]
 800621a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2284      	movs	r2, #132	; 0x84
 8006220:	589b      	ldr	r3, [r3, r2]
 8006222:	2b22      	cmp	r3, #34	; 0x22
 8006224:	d000      	beq.n	8006228 <UART_RxISR_16BIT_FIFOEN+0x20>
 8006226:	e078      	b.n	800631a <UART_RxISR_16BIT_FIFOEN+0x112>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006228:	2316      	movs	r3, #22
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	2168      	movs	r1, #104	; 0x68
 8006230:	5a52      	ldrh	r2, [r2, r1]
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	e046      	b.n	80062c4 <UART_RxISR_16BIT_FIFOEN+0xbc>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800623c:	2110      	movs	r1, #16
 800623e:	187b      	adds	r3, r7, r1
 8006240:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006246:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006248:	187b      	adds	r3, r7, r1
 800624a:	2214      	movs	r2, #20
 800624c:	18ba      	adds	r2, r7, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	8812      	ldrh	r2, [r2, #0]
 8006252:	4013      	ands	r3, r2
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625e:	1c9a      	adds	r2, r3, #2
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	225e      	movs	r2, #94	; 0x5e
 8006268:	5a9b      	ldrh	r3, [r3, r2]
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b01      	subs	r3, #1
 800626e:	b299      	uxth	r1, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	225e      	movs	r2, #94	; 0x5e
 8006274:	5299      	strh	r1, [r3, r2]

      if (huart->RxXferCount == 0U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	225e      	movs	r2, #94	; 0x5e
 800627a:	5a9b      	ldrh	r3, [r3, r2]
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d11a      	bne.n	80062b8 <UART_RxISR_16BIT_FIFOEN+0xb0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4929      	ldr	r1, [pc, #164]	; (8006334 <UART_RxISR_16BIT_FIFOEN+0x12c>)
 800628e:	400a      	ands	r2, r1
 8006290:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4926      	ldr	r1, [pc, #152]	; (8006338 <UART_RxISR_16BIT_FIFOEN+0x130>)
 800629e:	400a      	ands	r2, r1
 80062a0:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2284      	movs	r2, #132	; 0x84
 80062a6:	2120      	movs	r1, #32
 80062a8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	0018      	movs	r0, r3
 80062b4:	f004 fed4 	bl	800b060 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80062b8:	2116      	movs	r1, #22
 80062ba:	187b      	adds	r3, r7, r1
 80062bc:	881a      	ldrh	r2, [r3, #0]
 80062be:	187b      	adds	r3, r7, r1
 80062c0:	3a01      	subs	r2, #1
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	2316      	movs	r3, #22
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1b3      	bne.n	8006236 <UART_RxISR_16BIT_FIFOEN+0x2e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80062ce:	2012      	movs	r0, #18
 80062d0:	183b      	adds	r3, r7, r0
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	215e      	movs	r1, #94	; 0x5e
 80062d6:	5a52      	ldrh	r2, [r2, r1]
 80062d8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80062da:	183b      	adds	r3, r7, r0
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d023      	beq.n	800632a <UART_RxISR_16BIT_FIFOEN+0x122>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2268      	movs	r2, #104	; 0x68
 80062e6:	5a9b      	ldrh	r3, [r3, r2]
 80062e8:	2212      	movs	r2, #18
 80062ea:	18ba      	adds	r2, r7, r2
 80062ec:	8812      	ldrh	r2, [r2, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d21b      	bcs.n	800632a <UART_RxISR_16BIT_FIFOEN+0x122>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	490f      	ldr	r1, [pc, #60]	; (800633c <UART_RxISR_16BIT_FIFOEN+0x134>)
 80062fe:	400a      	ands	r2, r1
 8006300:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <UART_RxISR_16BIT_FIFOEN+0x138>)
 8006306:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2120      	movs	r1, #32
 8006314:	430a      	orrs	r2, r1
 8006316:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006318:	e007      	b.n	800632a <UART_RxISR_16BIT_FIFOEN+0x122>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699a      	ldr	r2, [r3, #24]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2108      	movs	r1, #8
 8006326:	430a      	orrs	r2, r1
 8006328:	619a      	str	r2, [r3, #24]
}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	46bd      	mov	sp, r7
 800632e:	b006      	add	sp, #24
 8006330:	bd80      	pop	{r7, pc}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	fffffeff 	.word	0xfffffeff
 8006338:	effffffe 	.word	0xeffffffe
 800633c:	efffffff 	.word	0xefffffff
 8006340:	0800600d 	.word	0x0800600d

08006344 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800634c:	46c0      	nop			; (mov r8, r8)
 800634e:	46bd      	mov	sp, r7
 8006350:	b002      	add	sp, #8
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800635c:	46c0      	nop			; (mov r8, r8)
 800635e:	46bd      	mov	sp, r7
 8006360:	b002      	add	sp, #8
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800636c:	46c0      	nop			; (mov r8, r8)
 800636e:	46bd      	mov	sp, r7
 8006370:	b002      	add	sp, #8
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	227c      	movs	r2, #124	; 0x7c
 8006380:	5c9b      	ldrb	r3, [r3, r2]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <HAL_UARTEx_DisableFifoMode+0x16>
 8006386:	2302      	movs	r3, #2
 8006388:	e027      	b.n	80063da <HAL_UARTEx_DisableFifoMode+0x66>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	227c      	movs	r2, #124	; 0x7c
 800638e:	2101      	movs	r1, #1
 8006390:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2280      	movs	r2, #128	; 0x80
 8006396:	2124      	movs	r1, #36	; 0x24
 8006398:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2101      	movs	r1, #1
 80063ae:	438a      	bics	r2, r1
 80063b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2280      	movs	r2, #128	; 0x80
 80063cc:	2120      	movs	r1, #32
 80063ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	227c      	movs	r2, #124	; 0x7c
 80063d4:	2100      	movs	r1, #0
 80063d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	0018      	movs	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	b004      	add	sp, #16
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	dfffffff 	.word	0xdfffffff

080063e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	227c      	movs	r2, #124	; 0x7c
 80063f6:	5c9b      	ldrb	r3, [r3, r2]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e02e      	b.n	800645e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	227c      	movs	r2, #124	; 0x7c
 8006404:	2101      	movs	r1, #1
 8006406:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2280      	movs	r2, #128	; 0x80
 800640c:	2124      	movs	r1, #36	; 0x24
 800640e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2101      	movs	r1, #1
 8006424:	438a      	bics	r2, r1
 8006426:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	08d9      	lsrs	r1, r3, #3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	0018      	movs	r0, r3
 8006440:	f000 f854 	bl	80064ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2280      	movs	r2, #128	; 0x80
 8006450:	2120      	movs	r1, #32
 8006452:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	227c      	movs	r2, #124	; 0x7c
 8006458:	2100      	movs	r1, #0
 800645a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	0018      	movs	r0, r3
 8006460:	46bd      	mov	sp, r7
 8006462:	b004      	add	sp, #16
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	227c      	movs	r2, #124	; 0x7c
 8006476:	5c9b      	ldrb	r3, [r3, r2]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800647c:	2302      	movs	r3, #2
 800647e:	e02f      	b.n	80064e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	227c      	movs	r2, #124	; 0x7c
 8006484:	2101      	movs	r1, #1
 8006486:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2280      	movs	r2, #128	; 0x80
 800648c:	2124      	movs	r1, #36	; 0x24
 800648e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2101      	movs	r1, #1
 80064a4:	438a      	bics	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	4a0e      	ldr	r2, [pc, #56]	; (80064e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	0019      	movs	r1, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	0018      	movs	r0, r3
 80064c2:	f000 f813 	bl	80064ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2280      	movs	r2, #128	; 0x80
 80064d2:	2120      	movs	r1, #32
 80064d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	227c      	movs	r2, #124	; 0x7c
 80064da:	2100      	movs	r1, #0
 80064dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	0018      	movs	r0, r3
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b004      	add	sp, #16
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	f1ffffff 	.word	0xf1ffffff

080064ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ee:	b089      	sub	sp, #36	; 0x24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80064f4:	2314      	movs	r3, #20
 80064f6:	18fb      	adds	r3, r7, r3
 80064f8:	4a2f      	ldr	r2, [pc, #188]	; (80065b8 <UARTEx_SetNbDataToProcess+0xcc>)
 80064fa:	ca03      	ldmia	r2!, {r0, r1}
 80064fc:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80064fe:	230c      	movs	r3, #12
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	4a2e      	ldr	r2, [pc, #184]	; (80065bc <UARTEx_SetNbDataToProcess+0xd0>)
 8006504:	ca03      	ldmia	r2!, {r0, r1}
 8006506:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650c:	2b00      	cmp	r3, #0
 800650e:	d108      	bne.n	8006522 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	226a      	movs	r2, #106	; 0x6a
 8006514:	2101      	movs	r1, #1
 8006516:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2268      	movs	r2, #104	; 0x68
 800651c:	2101      	movs	r1, #1
 800651e:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006520:	e046      	b.n	80065b0 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006522:	261f      	movs	r6, #31
 8006524:	19bb      	adds	r3, r7, r6
 8006526:	2208      	movs	r2, #8
 8006528:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800652a:	201e      	movs	r0, #30
 800652c:	183b      	adds	r3, r7, r0
 800652e:	2208      	movs	r2, #8
 8006530:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	0e5b      	lsrs	r3, r3, #25
 800653a:	b2da      	uxtb	r2, r3
 800653c:	241d      	movs	r4, #29
 800653e:	193b      	adds	r3, r7, r4
 8006540:	2107      	movs	r1, #7
 8006542:	400a      	ands	r2, r1
 8006544:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	0f5b      	lsrs	r3, r3, #29
 800654e:	b2da      	uxtb	r2, r3
 8006550:	251c      	movs	r5, #28
 8006552:	197b      	adds	r3, r7, r5
 8006554:	2107      	movs	r1, #7
 8006556:	400a      	ands	r2, r1
 8006558:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800655a:	183b      	adds	r3, r7, r0
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	197a      	adds	r2, r7, r5
 8006560:	7812      	ldrb	r2, [r2, #0]
 8006562:	2114      	movs	r1, #20
 8006564:	1879      	adds	r1, r7, r1
 8006566:	5c8a      	ldrb	r2, [r1, r2]
 8006568:	435a      	muls	r2, r3
 800656a:	0010      	movs	r0, r2
 800656c:	197b      	adds	r3, r7, r5
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	250c      	movs	r5, #12
 8006572:	197a      	adds	r2, r7, r5
 8006574:	5cd3      	ldrb	r3, [r2, r3]
 8006576:	0019      	movs	r1, r3
 8006578:	f7f9 fe4c 	bl	8000214 <__divsi3>
 800657c:	0003      	movs	r3, r0
 800657e:	b299      	uxth	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	226a      	movs	r2, #106	; 0x6a
 8006584:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006586:	19bb      	adds	r3, r7, r6
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	193a      	adds	r2, r7, r4
 800658c:	7812      	ldrb	r2, [r2, #0]
 800658e:	2114      	movs	r1, #20
 8006590:	1879      	adds	r1, r7, r1
 8006592:	5c8a      	ldrb	r2, [r1, r2]
 8006594:	435a      	muls	r2, r3
 8006596:	0010      	movs	r0, r2
 8006598:	193b      	adds	r3, r7, r4
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	197a      	adds	r2, r7, r5
 800659e:	5cd3      	ldrb	r3, [r2, r3]
 80065a0:	0019      	movs	r1, r3
 80065a2:	f7f9 fe37 	bl	8000214 <__divsi3>
 80065a6:	0003      	movs	r3, r0
 80065a8:	b299      	uxth	r1, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2268      	movs	r2, #104	; 0x68
 80065ae:	5299      	strh	r1, [r3, r2]
}
 80065b0:	46c0      	nop			; (mov r8, r8)
 80065b2:	46bd      	mov	sp, r7
 80065b4:	b009      	add	sp, #36	; 0x24
 80065b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b8:	0800d12c 	.word	0x0800d12c
 80065bc:	0800d134 	.word	0x0800d134

080065c0 <standardInitExtCaptor>:
 *  Created on: 16 janv. 2020
 *      Author: Samuel
 */
#include "ext_captor.h"

void standardInitExtCaptor(ExtCaptor* xc){
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	xc->measuring = 0 ;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	705a      	strb	r2, [r3, #1]
}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	46bd      	mov	sp, r7
 80065d2:	b002      	add	sp, #8
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <initGroups>:
 */

#include "group_manager.h"

void initGroups(params* gp)
{
 80065d6:	b590      	push	{r4, r7, lr}
 80065d8:	b0a1      	sub	sp, #132	; 0x84
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
	for(int i = 0 ; i < NUMGROUPS ; i++)
 80065de:	2300      	movs	r3, #0
 80065e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065e2:	e014      	b.n	800660e <initGroups+0x38>
	{
		GroupSynchro gs ;
		initGroup(&(gs)) ;
 80065e4:	240c      	movs	r4, #12
 80065e6:	193b      	adds	r3, r7, r4
 80065e8:	0018      	movs	r0, r3
 80065ea:	f000 fa01 	bl	80069f0 <initGroup>
		gp->gss[i] = gs ;
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80065f2:	0013      	movs	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	193a      	adds	r2, r7, r4
 80065fc:	18cb      	adds	r3, r1, r3
 80065fe:	0011      	movs	r1, r2
 8006600:	2270      	movs	r2, #112	; 0x70
 8006602:	0018      	movs	r0, r3
 8006604:	f006 fd74 	bl	800d0f0 <memcpy>
	for(int i = 0 ; i < NUMGROUPS ; i++)
 8006608:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800660a:	3301      	adds	r3, #1
 800660c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800660e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006610:	2b07      	cmp	r3, #7
 8006612:	dde7      	ble.n	80065e4 <initGroups+0xe>
	}
}
 8006614:	46c0      	nop			; (mov r8, r8)
 8006616:	46bd      	mov	sp, r7
 8006618:	b021      	add	sp, #132	; 0x84
 800661a:	bd90      	pop	{r4, r7, pc}

0800661c <update>:

void update(params* gp, uint32_t time_us)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
	updateGroupSynchros(gp, time_us) ;
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	0011      	movs	r1, r2
 800662c:	0018      	movs	r0, r3
 800662e:	f000 f810 	bl	8006652 <updateGroupSynchros>
	updateVCaptors(gp, time_us) ;
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	0011      	movs	r1, r2
 8006638:	0018      	movs	r0, r3
 800663a:	f000 f831 	bl	80066a0 <updateVCaptors>
	updateMotors(gp, time_us) ;
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	0011      	movs	r1, r2
 8006644:	0018      	movs	r0, r3
 8006646:	f000 f859 	bl	80066fc <updateMotors>
}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	46bd      	mov	sp, r7
 800664e:	b002      	add	sp, #8
 8006650:	bd80      	pop	{r7, pc}

08006652 <updateGroupSynchros>:

void updateGroupSynchros(params* gp, uint32_t time_us)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
	for(int i = 0 ; i < NUMGROUPS ; i++)
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	e017      	b.n	8006692 <updateGroupSynchros+0x40>
	{
		if(gp->gss[i].type != GROUP_TYPE_OFF)
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	0013      	movs	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	5c5b      	ldrb	r3, [r3, r1]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <updateGroupSynchros+0x3a>
			updateSynchro(&(gp->gss[i]), time_us) ;
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	0013      	movs	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	18d3      	adds	r3, r2, r3
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	0011      	movs	r1, r2
 8006686:	0018      	movs	r0, r3
 8006688:	f000 fa04 	bl	8006a94 <updateSynchro>
	for(int i = 0 ; i < NUMGROUPS ; i++)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3301      	adds	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b07      	cmp	r3, #7
 8006696:	dde4      	ble.n	8006662 <updateGroupSynchros+0x10>
	}
}
 8006698:	46c0      	nop			; (mov r8, r8)
 800669a:	46bd      	mov	sp, r7
 800669c:	b004      	add	sp, #16
 800669e:	bd80      	pop	{r7, pc}

080066a0 <updateVCaptors>:

void updateVCaptors(params* gp, uint32_t time_us)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
	int i = 0 ;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
//	if(time_us - time_start >= 100)
//	{
		for(i = 0 ; i < NUMVCAPTORS ; i++)
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	e01a      	b.n	80066ea <updateVCaptors+0x4a>
		{
			if (gp->vcs[i].measuring > 0 )
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	490f      	ldr	r1, [pc, #60]	; (80066f8 <updateVCaptors+0x58>)
 80066ba:	2054      	movs	r0, #84	; 0x54
 80066bc:	4343      	muls	r3, r0
 80066be:	18d3      	adds	r3, r2, r3
 80066c0:	185b      	adds	r3, r3, r1
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00d      	beq.n	80066e4 <updateVCaptors+0x44>
					{
							updateVCaptor(&(gp->vcs[i]), time_us) ;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2254      	movs	r2, #84	; 0x54
 80066cc:	4353      	muls	r3, r2
 80066ce:	22e0      	movs	r2, #224	; 0xe0
 80066d0:	0092      	lsls	r2, r2, #2
 80066d2:	4694      	mov	ip, r2
 80066d4:	4463      	add	r3, ip
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	18d3      	adds	r3, r2, r3
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	0011      	movs	r1, r2
 80066de:	0018      	movs	r0, r3
 80066e0:	f006 f90c 	bl	800c8fc <updateVCaptor>
		for(i = 0 ; i < NUMVCAPTORS ; i++)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b07      	cmp	r3, #7
 80066ee:	dde1      	ble.n	80066b4 <updateVCaptors+0x14>
					}
		}
//		time_start = time_us ;
//	}
}
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b004      	add	sp, #16
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	00000381 	.word	0x00000381

080066fc <updateMotors>:

void updateMotors(params* gp, uint32_t time_us)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	int i = 0 ;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
	for(i = 0 ; i < NUMMOTORS ; i++){
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	e012      	b.n	8006736 <updateMotors+0x3a>
		updateMotor(&(gp->motors[i]), time_us) ;
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	0013      	movs	r3, r2
 8006714:	015b      	lsls	r3, r3, #5
 8006716:	189b      	adds	r3, r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	22c4      	movs	r2, #196	; 0xc4
 800671c:	00d2      	lsls	r2, r2, #3
 800671e:	4694      	mov	ip, r2
 8006720:	4463      	add	r3, ip
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	18d3      	adds	r3, r2, r3
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	0011      	movs	r1, r2
 800672a:	0018      	movs	r0, r3
 800672c:	f004 fe42 	bl	800b3b4 <updateMotor>
	for(i = 0 ; i < NUMMOTORS ; i++){
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b07      	cmp	r3, #7
 800673a:	dde9      	ble.n	8006710 <updateMotors+0x14>
	}
}
 800673c:	46c0      	nop			; (mov r8, r8)
 800673e:	46bd      	mov	sp, r7
 8006740:	b004      	add	sp, #16
 8006742:	bd80      	pop	{r7, pc}

08006744 <eraseGroup>:

void eraseGroup(params* gp, uint8_t i)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	000a      	movs	r2, r1
 800674e:	1cfb      	adds	r3, r7, #3
 8006750:	701a      	strb	r2, [r3, #0]
		initGroup(&(gp->gss[i])) ;
 8006752:	1cfb      	adds	r3, r7, #3
 8006754:	781a      	ldrb	r2, [r3, #0]
 8006756:	0013      	movs	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	18d3      	adds	r3, r2, r3
 8006762:	0018      	movs	r0, r3
 8006764:	f000 f944 	bl	80069f0 <initGroup>
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}

08006770 <collapseGroups>:

uint8_t collapseGroups(params* gp, uint8_t gId1, uint8_t gId2)
{
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	0008      	movs	r0, r1
 800677a:	0011      	movs	r1, r2
 800677c:	1cfb      	adds	r3, r7, #3
 800677e:	1c02      	adds	r2, r0, #0
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	1cbb      	adds	r3, r7, #2
 8006784:	1c0a      	adds	r2, r1, #0
 8006786:	701a      	strb	r2, [r3, #0]
	if(gp->gss[gId1].type == gp->gss[gId2].type)
 8006788:	1cfb      	adds	r3, r7, #3
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	0013      	movs	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	1a9b      	subs	r3, r3, r2
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	5c59      	ldrb	r1, [r3, r1]
 8006798:	1cbb      	adds	r3, r7, #2
 800679a:	781a      	ldrb	r2, [r3, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	0013      	movs	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	5c1b      	ldrb	r3, [r3, r0]
 80067a8:	4299      	cmp	r1, r3
 80067aa:	d000      	beq.n	80067ae <collapseGroups+0x3e>
 80067ac:	e087      	b.n	80068be <collapseGroups+0x14e>
	{
		if(gp->gss[gId1].type == GROUP_TYPE_CAPTOR)
 80067ae:	1cfb      	adds	r3, r7, #3
 80067b0:	781a      	ldrb	r2, [r3, #0]
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	0013      	movs	r3, r2
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	1a9b      	subs	r3, r3, r2
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	5c5b      	ldrb	r3, [r3, r1]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d177      	bne.n	80068b2 <collapseGroups+0x142>
		{
			for(int i = gp->gss[gId1].size ; i < gp->gss[gId1].size + gp->gss[gId2].size ; i++)
 80067c2:	1cfb      	adds	r3, r7, #3
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	0013      	movs	r3, r2
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	18cb      	adds	r3, r1, r3
 80067d2:	3302      	adds	r3, #2
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e028      	b.n	800682c <collapseGroups+0xbc>
			{
				gp->gss[gId1].vcs[i] = gp->gss[gId2].vcs[i-gp->gss[gId1].size] ;
 80067da:	1cbb      	adds	r3, r7, #2
 80067dc:	7819      	ldrb	r1, [r3, #0]
 80067de:	1cfb      	adds	r3, r7, #3
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	0013      	movs	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	18c3      	adds	r3, r0, r3
 80067ee:	3302      	adds	r3, #2
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	001a      	movs	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1a9c      	subs	r4, r3, r2
 80067f8:	1cfb      	adds	r3, r7, #3
 80067fa:	781a      	ldrb	r2, [r3, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	000b      	movs	r3, r1
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	1a5b      	subs	r3, r3, r1
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	191b      	adds	r3, r3, r4
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	18c3      	adds	r3, r0, r3
 800680c:	3304      	adds	r3, #4
 800680e:	6819      	ldr	r1, [r3, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	0013      	movs	r3, r2
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	189b      	adds	r3, r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	18c3      	adds	r3, r0, r3
 8006822:	3304      	adds	r3, #4
 8006824:	6019      	str	r1, [r3, #0]
			for(int i = gp->gss[gId1].size ; i < gp->gss[gId1].size + gp->gss[gId2].size ; i++)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3301      	adds	r3, #1
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	1cfb      	adds	r3, r7, #3
 800682e:	781a      	ldrb	r2, [r3, #0]
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	0013      	movs	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	18cb      	adds	r3, r1, r3
 800683c:	3302      	adds	r3, #2
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	0018      	movs	r0, r3
 8006842:	1cbb      	adds	r3, r7, #2
 8006844:	781a      	ldrb	r2, [r3, #0]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	0013      	movs	r3, r2
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	1a9b      	subs	r3, r3, r2
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	18cb      	adds	r3, r1, r3
 8006852:	3302      	adds	r3, #2
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	18c3      	adds	r3, r0, r3
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	429a      	cmp	r2, r3
 800685c:	dbbd      	blt.n	80067da <collapseGroups+0x6a>
			}
			gp->gss[gId1].size += gp->gss[gId2].size ;
 800685e:	1cfb      	adds	r3, r7, #3
 8006860:	781a      	ldrb	r2, [r3, #0]
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	0013      	movs	r3, r2
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	18cb      	adds	r3, r1, r3
 800686e:	3302      	adds	r3, #2
 8006870:	7819      	ldrb	r1, [r3, #0]
 8006872:	1cbb      	adds	r3, r7, #2
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	0013      	movs	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	18c3      	adds	r3, r0, r3
 8006882:	3302      	adds	r3, #2
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	1cfa      	adds	r2, r7, #3
 8006888:	7812      	ldrb	r2, [r2, #0]
 800688a:	18cb      	adds	r3, r1, r3
 800688c:	b2d8      	uxtb	r0, r3
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	0013      	movs	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	18cb      	adds	r3, r1, r3
 800689a:	3302      	adds	r3, #2
 800689c:	1c02      	adds	r2, r0, #0
 800689e:	701a      	strb	r2, [r3, #0]
			eraseGroup(gp, gId2) ;
 80068a0:	1cbb      	adds	r3, r7, #2
 80068a2:	781a      	ldrb	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0011      	movs	r1, r2
 80068a8:	0018      	movs	r0, r3
 80068aa:	f7ff ff4b 	bl	8006744 <eraseGroup>
			return 1 ;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e006      	b.n	80068c0 <collapseGroups+0x150>
		}
		if(gp->gss[gId1].type == GROUP_TYPE_MOTOR)
 80068b2:	1cfb      	adds	r3, r7, #3
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	0013      	movs	r3, r2
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	011b      	lsls	r3, r3, #4
		{
			//TODO
		}
	}
	return 0 ;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	0018      	movs	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b005      	add	sp, #20
 80068c6:	bd90      	pop	{r4, r7, pc}

080068c8 <addGroup>:

void addGroup(params* gp,  uint8_t type, uint8_t gId, uint8_t* ids, uint8_t length)
{
 80068c8:	b590      	push	{r4, r7, lr}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	0008      	movs	r0, r1
 80068d2:	0011      	movs	r1, r2
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	240b      	movs	r4, #11
 80068d8:	193b      	adds	r3, r7, r4
 80068da:	1c02      	adds	r2, r0, #0
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	200a      	movs	r0, #10
 80068e0:	183b      	adds	r3, r7, r0
 80068e2:	1c0a      	adds	r2, r1, #0
 80068e4:	701a      	strb	r2, [r3, #0]
	gp->gss[gId].type = type ;
 80068e6:	183b      	adds	r3, r7, r0
 80068e8:	781a      	ldrb	r2, [r3, #0]
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	0013      	movs	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	193a      	adds	r2, r7, r4
 80068f6:	7812      	ldrb	r2, [r2, #0]
 80068f8:	545a      	strb	r2, [r3, r1]
	gp->gss[gId].size = length ;
 80068fa:	183b      	adds	r3, r7, r0
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	0013      	movs	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	18cb      	adds	r3, r1, r3
 800690a:	3302      	adds	r3, #2
 800690c:	2220      	movs	r2, #32
 800690e:	2108      	movs	r1, #8
 8006910:	468c      	mov	ip, r1
 8006912:	44bc      	add	ip, r7
 8006914:	4462      	add	r2, ip
 8006916:	7812      	ldrb	r2, [r2, #0]
 8006918:	701a      	strb	r2, [r3, #0]
	gp->gss[gId].id = gId ;
 800691a:	183b      	adds	r3, r7, r0
 800691c:	781a      	ldrb	r2, [r3, #0]
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	0013      	movs	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	18cb      	adds	r3, r1, r3
 800692a:	3301      	adds	r3, #1
 800692c:	183a      	adds	r2, r7, r0
 800692e:	7812      	ldrb	r2, [r2, #0]
 8006930:	701a      	strb	r2, [r3, #0]
	if(type == GROUP_TYPE_CAPTOR)
 8006932:	193b      	adds	r3, r7, r4
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d129      	bne.n	800698e <addGroup+0xc6>
	{
		for(int i = 0 ; i < length ; i++)
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	e01d      	b.n	800697c <addGroup+0xb4>
		{
			gp->gss[gId].vcs[i] = &(gp->vcs[ids[i]]) ;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	18d3      	adds	r3, r2, r3
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	0019      	movs	r1, r3
 800694a:	230a      	movs	r3, #10
 800694c:	18fb      	adds	r3, r7, r3
 800694e:	781a      	ldrb	r2, [r3, #0]
 8006950:	2354      	movs	r3, #84	; 0x54
 8006952:	434b      	muls	r3, r1
 8006954:	21e0      	movs	r1, #224	; 0xe0
 8006956:	0089      	lsls	r1, r1, #2
 8006958:	468c      	mov	ip, r1
 800695a:	4463      	add	r3, ip
 800695c:	68f9      	ldr	r1, [r7, #12]
 800695e:	18c9      	adds	r1, r1, r3
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	0013      	movs	r3, r2
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	1a9b      	subs	r3, r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	189b      	adds	r3, r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	18c3      	adds	r3, r0, r3
 8006972:	3304      	adds	r3, #4
 8006974:	6019      	str	r1, [r3, #0]
		for(int i = 0 ; i < length ; i++)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	3301      	adds	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	2320      	movs	r3, #32
 800697e:	2208      	movs	r2, #8
 8006980:	4694      	mov	ip, r2
 8006982:	44bc      	add	ip, r7
 8006984:	4463      	add	r3, ip
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	429a      	cmp	r2, r3
 800698c:	dbd8      	blt.n	8006940 <addGroup+0x78>
		}
	}
	if(type == GROUP_TYPE_MOTOR||GROUP_TYPE_XMOTOR)
	{
		for(int i = 0 ; i < length ; i++)
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	e020      	b.n	80069d6 <addGroup+0x10e>
		{
			gp->gss[gId].ms[i] = &(gp->motors[ids[i]]) ;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	18d3      	adds	r3, r2, r3
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	0019      	movs	r1, r3
 800699e:	230a      	movs	r3, #10
 80069a0:	18fb      	adds	r3, r7, r3
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	000b      	movs	r3, r1
 80069a6:	015b      	lsls	r3, r3, #5
 80069a8:	185b      	adds	r3, r3, r1
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	21c4      	movs	r1, #196	; 0xc4
 80069ae:	00c9      	lsls	r1, r1, #3
 80069b0:	468c      	mov	ip, r1
 80069b2:	4463      	add	r3, ip
 80069b4:	68f9      	ldr	r1, [r7, #12]
 80069b6:	18c9      	adds	r1, r1, r3
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	0013      	movs	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	189b      	adds	r3, r3, r2
 80069c6:	3304      	adds	r3, #4
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	18c3      	adds	r3, r0, r3
 80069cc:	3304      	adds	r3, #4
 80069ce:	6019      	str	r1, [r3, #0]
		for(int i = 0 ; i < length ; i++)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	3301      	adds	r3, #1
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	2320      	movs	r3, #32
 80069d8:	2208      	movs	r2, #8
 80069da:	4694      	mov	ip, r2
 80069dc:	44bc      	add	ip, r7
 80069de:	4463      	add	r3, ip
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	dbd5      	blt.n	8006994 <addGroup+0xcc>
		}
	}

}
 80069e8:	46c0      	nop			; (mov r8, r8)
 80069ea:	46bd      	mov	sp, r7
 80069ec:	b007      	add	sp, #28
 80069ee:	bd90      	pop	{r4, r7, pc}

080069f0 <initGroup>:
 */

#include "group_synchro.h"
//____________________________________________GESTION DE DONNÉES_____________________________________________
void initGroup(GroupSynchro* gs)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
		gs->type = GROUP_TYPE_OFF ;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]
		for(int j = 0 ; j < MAX_GROUP_LENGTH ; j++) {
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e026      	b.n	8006a52 <initGroup+0x62>
			gs->vcs[j] = 0 ;
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	18d3      	adds	r3, r2, r3
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]
			gs->speeds[j] = 0 ;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	320e      	adds	r2, #14
 8006a18:	0092      	lsls	r2, r2, #2
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	50d1      	str	r1, [r2, r3]
			gs->ms[j] = 0 ;
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3304      	adds	r3, #4
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	18d3      	adds	r3, r2, r3
 8006a28:	3304      	adds	r3, #4
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]
			gs->powers[j] = 0 ;
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3324      	adds	r3, #36	; 0x24
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	18d3      	adds	r3, r2, r3
 8006a38:	3304      	adds	r3, #4
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	801a      	strh	r2, [r3, #0]
			gs->senses[j] = 0 ;
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	2154      	movs	r1, #84	; 0x54
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	18d3      	adds	r3, r2, r3
 8006a46:	185b      	adds	r3, r3, r1
 8006a48:	2200      	movs	r2, #0
 8006a4a:	701a      	strb	r2, [r3, #0]
		for(int j = 0 ; j < MAX_GROUP_LENGTH ; j++) {
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	ddd5      	ble.n	8006a04 <initGroup+0x14>
		}

		gs->avSpeed = HIGH_AVSPEED ;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a0d      	ldr	r2, [pc, #52]	; (8006a90 <initGroup+0xa0>)
 8006a5c:	649a      	str	r2, [r3, #72]	; 0x48
//		gs->proc_token = 0 ;
		gs->target_time = 0 ;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	661a      	str	r2, [r3, #96]	; 0x60
		gs->mr_token = 0 ;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2258      	movs	r2, #88	; 0x58
 8006a68:	2100      	movs	r1, #0
 8006a6a:	5499      	strb	r1, [r3, r2]
		gs->hl_token = 0 ;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2259      	movs	r2, #89	; 0x59
 8006a70:	2100      	movs	r1, #0
 8006a72:	5499      	strb	r1, [r3, r2]
		gs->time_token = 0 ;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	65da      	str	r2, [r3, #92]	; 0x5c
		gs->mode = MODE_IDLE ;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2264      	movs	r2, #100	; 0x64
 8006a7e:	2100      	movs	r1, #0
 8006a80:	5499      	strb	r1, [r3, r2]
		gs->size = 0 ;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	709a      	strb	r2, [r3, #2]
}
 8006a88:	46c0      	nop			; (mov r8, r8)
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b004      	add	sp, #16
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	42be999a 	.word	0x42be999a

08006a94 <updateSynchro>:

void updateSynchro(GroupSynchro* gs, uint32_t time_us)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
	if(gs->type == GROUP_TYPE_CAPTOR)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d11c      	bne.n	8006ae0 <updateSynchro+0x4c>
	{
		if(gs->mode == MODE_CALIB)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2264      	movs	r2, #100	; 0x64
 8006aaa:	5c9b      	ldrb	r3, [r3, r2]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d103      	bne.n	8006ab8 <updateSynchro+0x24>
				GS_autoCalibrate(gs) ;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f000 f9c8 	bl	8006e48 <GS_autoCalibrate>
		if (gs->mode == MODE_TARGET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2264      	movs	r2, #100	; 0x64
 8006abc:	5c9b      	ldrb	r3, [r3, r2]
 8006abe:	2b0a      	cmp	r3, #10
 8006ac0:	d103      	bne.n	8006aca <updateSynchro+0x36>
				GS_reachPosition(gs) ;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f000 f8d7 	bl	8006c78 <GS_reachPosition>
		if (gs->mode == MODE_TARGET_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2264      	movs	r2, #100	; 0x64
 8006ace:	5c9b      	ldrb	r3, [r3, r2]
 8006ad0:	2b0b      	cmp	r3, #11
 8006ad2:	d105      	bne.n	8006ae0 <updateSynchro+0x4c>
				GS_resetPosition(gs, time_us) ;
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	0011      	movs	r1, r2
 8006ada:	0018      	movs	r0, r3
 8006adc:	f000 f975 	bl	8006dca <GS_resetPosition>

	if(gs->type == GROUP_TYPE_XMOTOR)
	{

	}
}
 8006ae0:	46c0      	nop			; (mov r8, r8)
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b002      	add	sp, #8
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <GS_startMotors>:

//
void GS_startMotors(GroupSynchro* gs, uint16_t* powers, uint8_t* senses){
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
	if(gs->type == GROUP_TYPE_MOTOR || GROUP_TYPE_XMOTOR)
		for(int i = 0 ; i < gs->size ; i++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e01f      	b.n	8006b3a <GS_startMotors+0x52>
		{
			setMotorTPower(gs->ms[i], powers[i]) ;
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3304      	adds	r3, #4
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	18d3      	adds	r3, r2, r3
 8006b04:	3304      	adds	r3, #4
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	18d3      	adds	r3, r2, r3
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	0019      	movs	r1, r3
 8006b14:	f004 fb96 	bl	800b244 <setMotorTPower>
			setMotorTSense(gs->ms[i], senses[i]) ;
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	18d3      	adds	r3, r2, r3
 8006b22:	3304      	adds	r3, #4
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	18d3      	adds	r3, r2, r3
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	0019      	movs	r1, r3
 8006b30:	f004 fc31 	bl	800b396 <setMotorTSense>
		for(int i = 0 ; i < gs->size ; i++)
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	3301      	adds	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	789b      	ldrb	r3, [r3, #2]
 8006b3e:	001a      	movs	r2, r3
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	4293      	cmp	r3, r2
 8006b44:	dbd9      	blt.n	8006afa <GS_startMotors+0x12>
		}
	if(gs->type == GROUP_TYPE_CAPTOR)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d128      	bne.n	8006ba0 <GS_startMotors+0xb8>
		for(int i = 0 ; i < gs->size ; i++)
 8006b4e:	2300      	movs	r3, #0
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	e01f      	b.n	8006b94 <GS_startMotors+0xac>
		{
			setMotorTPower(gs->vcs[i]->mot, powers[i]) ;
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	18d3      	adds	r3, r2, r3
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	18d3      	adds	r3, r2, r3
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	0019      	movs	r1, r3
 8006b6e:	f004 fb69 	bl	800b244 <setMotorTPower>
			setMotorTSense(gs->vcs[i]->mot, senses[i]) ;
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	18d3      	adds	r3, r2, r3
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	18d3      	adds	r3, r2, r3
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	0019      	movs	r1, r3
 8006b8a:	f004 fc04 	bl	800b396 <setMotorTSense>
		for(int i = 0 ; i < gs->size ; i++)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3301      	adds	r3, #1
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	789b      	ldrb	r3, [r3, #2]
 8006b98:	001a      	movs	r2, r3
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	dbd9      	blt.n	8006b54 <GS_startMotors+0x6c>
		}
}
 8006ba0:	46c0      	nop			; (mov r8, r8)
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b006      	add	sp, #24
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <GS_stopMotors>:

void GS_stopMotors(GroupSynchro* gs)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_MOTOR || GROUP_TYPE_XMOTOR)
		for(int i = 0 ; i < gs->size ; i++)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e00d      	b.n	8006bd2 <GS_stopMotors+0x2a>
		{
			setMotorTPower(gs->ms[i], 0) ;
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	18d3      	adds	r3, r2, r3
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f004 fb3c 	bl	800b244 <setMotorTPower>
		for(int i = 0 ; i < gs->size ; i++)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	789b      	ldrb	r3, [r3, #2]
 8006bd6:	001a      	movs	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	dbeb      	blt.n	8006bb6 <GS_stopMotors+0xe>
		}
	if(gs->type == GROUP_TYPE_CAPTOR)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d116      	bne.n	8006c14 <GS_stopMotors+0x6c>
		for(int i = 0 ; i < gs->size ; i++)
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	e00d      	b.n	8006c08 <GS_stopMotors+0x60>
		{
			setMotorTPower(gs->vcs[i]->mot, 0) ;
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	18d3      	adds	r3, r2, r3
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f004 fb21 	bl	800b244 <setMotorTPower>
		for(int i = 0 ; i < gs->size ; i++)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60bb      	str	r3, [r7, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	789b      	ldrb	r3, [r3, #2]
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4293      	cmp	r3, r2
 8006c12:	dbeb      	blt.n	8006bec <GS_stopMotors+0x44>
		}
}
 8006c14:	46c0      	nop			; (mov r8, r8)
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b004      	add	sp, #16
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <GS_startTargeting>:

//______________________________________________________ATTEINDRE POSITION______________________________________________

void GS_startTargeting(GroupSynchro* gs, float avSpeed, uint16_t tTour)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	1dbb      	adds	r3, r7, #6
 8006c28:	801a      	strh	r2, [r3, #0]
	if(gs->type == GROUP_TYPE_CAPTOR)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d11e      	bne.n	8006c70 <GS_startTargeting+0x54>
	{
		for(int i = 0 ; i < gs->size ; i++)
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	e00e      	b.n	8006c56 <GS_startTargeting+0x3a>
		{
			startTargeting(gs->vcs[i], tTour) ;
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	18d3      	adds	r3, r2, r3
 8006c40:	3304      	adds	r3, #4
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	1dbb      	adds	r3, r7, #6
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	0019      	movs	r1, r3
 8006c4a:	0010      	movs	r0, r2
 8006c4c:	f006 f81d 	bl	800cc8a <startTargeting>
		for(int i = 0 ; i < gs->size ; i++)
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	3301      	adds	r3, #1
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	789b      	ldrb	r3, [r3, #2]
 8006c5a:	001a      	movs	r2, r3
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	dbea      	blt.n	8006c38 <GS_startTargeting+0x1c>
		}
		gs->avSpeed = avSpeed ;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	649a      	str	r2, [r3, #72]	; 0x48
		gs->mode = MODE_TARGET ;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2264      	movs	r2, #100	; 0x64
 8006c6c:	210a      	movs	r1, #10
 8006c6e:	5499      	strb	r1, [r3, r2]
	}
}
 8006c70:	46c0      	nop			; (mov r8, r8)
 8006c72:	46bd      	mov	sp, r7
 8006c74:	b006      	add	sp, #24
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <GS_reachPosition>:

void GS_reachPosition(GroupSynchro* gs)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_CAPTOR)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d000      	beq.n	8006c8a <GS_reachPosition+0x12>
 8006c88:	e076      	b.n	8006d78 <GS_reachPosition+0x100>
	{
		uint8_t barrier = 1 ;
 8006c8a:	2317      	movs	r3, #23
 8006c8c:	18fb      	adds	r3, r7, r3
 8006c8e:	2201      	movs	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
		uint8_t update_barrier = 1 ;
 8006c92:	2316      	movs	r3, #22
 8006c94:	18fb      	adds	r3, r7, r3
 8006c96:	2201      	movs	r2, #1
 8006c98:	701a      	strb	r2, [r3, #0]
//		if()
		for(int i = 0 ; i < gs->size ; i++)
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	e02c      	b.n	8006cfa <GS_reachPosition+0x82>
				{
					if(gs->vcs[i]->mode == MODE_TARGET)
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	18d3      	adds	r3, r2, r3
 8006ca8:	3304      	adds	r3, #4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2221      	movs	r2, #33	; 0x21
 8006cae:	5c9b      	ldrb	r3, [r3, r2]
 8006cb0:	2b0a      	cmp	r3, #10
 8006cb2:	d11f      	bne.n	8006cf4 <GS_reachPosition+0x7c>
						{
							reachPosition(gs->vcs[i], gs->speeds[i]) ;
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	18d3      	adds	r3, r2, r3
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	320e      	adds	r2, #14
 8006cc6:	0092      	lsls	r2, r2, #2
 8006cc8:	58d3      	ldr	r3, [r2, r3]
 8006cca:	1c19      	adds	r1, r3, #0
 8006ccc:	f006 f820 	bl	800cd10 <reachPosition>
							if(gs->vcs[i]->calib_update == 0)
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	18d3      	adds	r3, r2, r3
 8006cd8:	3304      	adds	r3, #4
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2222      	movs	r2, #34	; 0x22
 8006cde:	5c9b      	ldrb	r3, [r3, r2]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <GS_reachPosition+0x74>
								update_barrier = 0 ;
 8006ce4:	2316      	movs	r3, #22
 8006ce6:	18fb      	adds	r3, r7, r3
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
							barrier = 0 ;
 8006cec:	2317      	movs	r3, #23
 8006cee:	18fb      	adds	r3, r7, r3
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < gs->size ; i++)
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	789b      	ldrb	r3, [r3, #2]
 8006cfe:	001a      	movs	r2, r3
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4293      	cmp	r3, r2
 8006d04:	dbcc      	blt.n	8006ca0 <GS_reachPosition+0x28>
						}
				}
		if(barrier > 0)
 8006d06:	2317      	movs	r3, #23
 8006d08:	18fb      	adds	r3, r7, r3
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <GS_reachPosition+0xa0>
			gs->mode = MODE_IDLE ;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2264      	movs	r2, #100	; 0x64
 8006d14:	2100      	movs	r1, #0
 8006d16:	5499      	strb	r1, [r3, r2]

		if(update_barrier > 0)
 8006d18:	2316      	movs	r3, #22
 8006d1a:	18fb      	adds	r3, r7, r3
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d02a      	beq.n	8006d78 <GS_reachPosition+0x100>
		{
			computeSpeeds (gs, gs->avSpeed) ;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	1c11      	adds	r1, r2, #0
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	f000 f8c8 	bl	8006ec0 <computeSpeeds>
			for(int i = 0 ; i < gs->size ; i++)
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e01a      	b.n	8006d6c <GS_reachPosition+0xf4>
							{
								if(gs->vcs[i]->mode == MODE_TARGET) {
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	18d3      	adds	r3, r2, r3
 8006d3e:	3304      	adds	r3, #4
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2221      	movs	r2, #33	; 0x21
 8006d44:	5c9b      	ldrb	r3, [r3, r2]
 8006d46:	2b0a      	cmp	r3, #10
 8006d48:	d10d      	bne.n	8006d66 <GS_reachPosition+0xee>
										keepTSpeed(gs->vcs[i], gs->speeds[i]) ;
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	18d3      	adds	r3, r2, r3
 8006d52:	3304      	adds	r3, #4
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	320e      	adds	r2, #14
 8006d5c:	0092      	lsls	r2, r2, #2
 8006d5e:	58d3      	ldr	r3, [r2, r3]
 8006d60:	1c19      	adds	r1, r3, #0
 8006d62:	f006 f8f1 	bl	800cf48 <keepTSpeed>
			for(int i = 0 ; i < gs->size ; i++)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	789b      	ldrb	r3, [r3, #2]
 8006d70:	001a      	movs	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4293      	cmp	r3, r2
 8006d76:	dbde      	blt.n	8006d36 <GS_reachPosition+0xbe>
						}
			}
		}
	}
}
 8006d78:	46c0      	nop			; (mov r8, r8)
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b006      	add	sp, #24
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <GS_startResetPosition>:

//______________________________________________________RESET POSITION______________________________________________

void GS_startResetPosition(GroupSynchro* gs)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_CAPTOR)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d118      	bne.n	8006dc2 <GS_startResetPosition+0x42>
	{
		for(int i = 0 ; i < gs->size ; i++)
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e00b      	b.n	8006dae <GS_startResetPosition+0x2e>
		{
			startResetPosition(gs->vcs[i]) ;
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	18d3      	adds	r3, r2, r3
 8006d9e:	3304      	adds	r3, #4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	0018      	movs	r0, r3
 8006da4:	f005 ffe5 	bl	800cd72 <startResetPosition>
		for(int i = 0 ; i < gs->size ; i++)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3301      	adds	r3, #1
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	789b      	ldrb	r3, [r3, #2]
 8006db2:	001a      	movs	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4293      	cmp	r3, r2
 8006db8:	dbed      	blt.n	8006d96 <GS_startResetPosition+0x16>
		}
		gs->mode = MODE_TARGET_RESET ;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2264      	movs	r2, #100	; 0x64
 8006dbe:	210b      	movs	r1, #11
 8006dc0:	5499      	strb	r1, [r3, r2]
	}
}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b004      	add	sp, #16
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <GS_resetPosition>:

void GS_resetPosition(GroupSynchro* gs, uint32_t time_us)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
	if(gs->type == GROUP_TYPE_CAPTOR)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d131      	bne.n	8006e40 <GS_resetPosition+0x76>
	{
		uint8_t barrier = 1 ;
 8006ddc:	230f      	movs	r3, #15
 8006dde:	18fb      	adds	r3, r7, r3
 8006de0:	2201      	movs	r2, #1
 8006de2:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < gs->size ; i++)
 8006de4:	2300      	movs	r3, #0
 8006de6:	60bb      	str	r3, [r7, #8]
 8006de8:	e01b      	b.n	8006e22 <GS_resetPosition+0x58>
				{
					if(gs->vcs[i]->mode == MODE_TARGET_RESET)
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	18d3      	adds	r3, r2, r3
 8006df2:	3304      	adds	r3, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2221      	movs	r2, #33	; 0x21
 8006df8:	5c9b      	ldrb	r3, [r3, r2]
 8006dfa:	2b0b      	cmp	r3, #11
 8006dfc:	d10e      	bne.n	8006e1c <GS_resetPosition+0x52>
						{
							resetPosition(gs->vcs[i], time_us) ;
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	18d3      	adds	r3, r2, r3
 8006e06:	3304      	adds	r3, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	0011      	movs	r1, r2
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f005 ffc0 	bl	800cd94 <resetPosition>
							barrier = 0 ;
 8006e14:	230f      	movs	r3, #15
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < gs->size ; i++)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	789b      	ldrb	r3, [r3, #2]
 8006e26:	001a      	movs	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	dbdd      	blt.n	8006dea <GS_resetPosition+0x20>
						}
				}
		if(barrier)
 8006e2e:	230f      	movs	r3, #15
 8006e30:	18fb      	adds	r3, r7, r3
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <GS_resetPosition+0x76>
			gs->mode = MODE_IDLE ;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2264      	movs	r2, #100	; 0x64
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	5499      	strb	r1, [r3, r2]
	}
}
 8006e40:	46c0      	nop			; (mov r8, r8)
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b004      	add	sp, #16
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <GS_autoCalibrate>:
		gs->mode = MODE_CALIB ;
	}
}

void GS_autoCalibrate(GroupSynchro* gs)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_CAPTOR)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d12f      	bne.n	8006eb8 <GS_autoCalibrate+0x70>
	{
		uint8_t barrier = 1 ;
 8006e58:	230f      	movs	r3, #15
 8006e5a:	18fb      	adds	r3, r7, r3
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < gs->size ; i++)
 8006e60:	2300      	movs	r3, #0
 8006e62:	60bb      	str	r3, [r7, #8]
 8006e64:	e019      	b.n	8006e9a <GS_autoCalibrate+0x52>
				{
					if(gs->vcs[i]->mode == MODE_CALIB)
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	18d3      	adds	r3, r2, r3
 8006e6e:	3304      	adds	r3, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2221      	movs	r2, #33	; 0x21
 8006e74:	5c9b      	ldrb	r3, [r3, r2]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d10c      	bne.n	8006e94 <GS_autoCalibrate+0x4c>
						{
							autoCalibrate(gs->vcs[i]) ;
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	18d3      	adds	r3, r2, r3
 8006e82:	3304      	adds	r3, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	0018      	movs	r0, r3
 8006e88:	f005 ffce 	bl	800ce28 <autoCalibrate>
							barrier = 0 ;
 8006e8c:	230f      	movs	r3, #15
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	2200      	movs	r2, #0
 8006e92:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < gs->size ; i++)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	3301      	adds	r3, #1
 8006e98:	60bb      	str	r3, [r7, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	789b      	ldrb	r3, [r3, #2]
 8006e9e:	001a      	movs	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	dbdf      	blt.n	8006e66 <GS_autoCalibrate+0x1e>
						}
				}
		if(barrier)
 8006ea6:	230f      	movs	r3, #15
 8006ea8:	18fb      	adds	r3, r7, r3
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <GS_autoCalibrate+0x70>
			gs->mode = MODE_IDLE ;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2264      	movs	r2, #100	; 0x64
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	5499      	strb	r1, [r3, r2]
	}
}
 8006eb8:	46c0      	nop			; (mov r8, r8)
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	b004      	add	sp, #16
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <computeSpeeds>:

//______________________________________________________ASSERVISSEMENT GLOBAL______________________________________________

void computeSpeeds(GroupSynchro* gs, float tSpeed)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
	float avTour = 0 ;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
	for(int i = 0 ; i < gs->size ; i++)
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	e014      	b.n	8006efe <computeSpeeds+0x3e>
	{
		avTour = avTour + (float)(gs->vcs[i]->target_currTour) ;
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	18d3      	adds	r3, r2, r3
 8006edc:	3304      	adds	r3, #4
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	224a      	movs	r2, #74	; 0x4a
 8006ee2:	5a9b      	ldrh	r3, [r3, r2]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f7fa f9a5 	bl	8001234 <__aeabi_ui2f>
 8006eea:	1c03      	adds	r3, r0, #0
 8006eec:	1c19      	adds	r1, r3, #0
 8006eee:	69f8      	ldr	r0, [r7, #28]
 8006ef0:	f7f9 face 	bl	8000490 <__aeabi_fadd>
 8006ef4:	1c03      	adds	r3, r0, #0
 8006ef6:	61fb      	str	r3, [r7, #28]
	for(int i = 0 ; i < gs->size ; i++)
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	3301      	adds	r3, #1
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	789b      	ldrb	r3, [r3, #2]
 8006f02:	001a      	movs	r2, r3
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	4293      	cmp	r3, r2
 8006f08:	dbe4      	blt.n	8006ed4 <computeSpeeds+0x14>
	}
	avTour /= gs->size ;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	789b      	ldrb	r3, [r3, #2]
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f7fa f946 	bl	80011a0 <__aeabi_i2f>
 8006f14:	1c03      	adds	r3, r0, #0
 8006f16:	1c19      	adds	r1, r3, #0
 8006f18:	69f8      	ldr	r0, [r7, #28]
 8006f1a:	f7f9 fc53 	bl	80007c4 <__aeabi_fdiv>
 8006f1e:	1c03      	adds	r3, r0, #0
 8006f20:	61fb      	str	r3, [r7, #28]
	float k = 1.1 ;
 8006f22:	4b59      	ldr	r3, [pc, #356]	; (8007088 <computeSpeeds+0x1c8>)
 8006f24:	613b      	str	r3, [r7, #16]
	for(int i = 0 ; i < gs->size ; i++)
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	e0a1      	b.n	8007070 <computeSpeeds+0x1b0>
	{
		uint16_t diffTour = 0 ;
 8006f2c:	230e      	movs	r3, #14
 8006f2e:	18fb      	adds	r3, r7, r3
 8006f30:	2200      	movs	r2, #0
 8006f32:	801a      	strh	r2, [r3, #0]

		if(gs->vcs[i]->target_currTour < gs->vcs[i]->target_tTour)
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	18d3      	adds	r3, r2, r3
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	224a      	movs	r2, #74	; 0x4a
 8006f42:	5a9a      	ldrh	r2, [r3, r2]
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	18cb      	adds	r3, r1, r3
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	214c      	movs	r1, #76	; 0x4c
 8006f52:	5a5b      	ldrh	r3, [r3, r1]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d214      	bcs.n	8006f82 <computeSpeeds+0xc2>
			diffTour = gs->vcs[i]->target_tTour - gs->vcs[i]->target_currTour ;
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	18d3      	adds	r3, r2, r3
 8006f60:	3304      	adds	r3, #4
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	224c      	movs	r2, #76	; 0x4c
 8006f66:	5a99      	ldrh	r1, [r3, r2]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	18d3      	adds	r3, r2, r3
 8006f70:	3304      	adds	r3, #4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	224a      	movs	r2, #74	; 0x4a
 8006f76:	5a9a      	ldrh	r2, [r3, r2]
 8006f78:	230e      	movs	r3, #14
 8006f7a:	18fb      	adds	r3, r7, r3
 8006f7c:	1a8a      	subs	r2, r1, r2
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	e013      	b.n	8006faa <computeSpeeds+0xea>
		else
			diffTour = gs->vcs[i]->target_currTour - gs->vcs[i]->target_tTour ;
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	18d3      	adds	r3, r2, r3
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	224a      	movs	r2, #74	; 0x4a
 8006f90:	5a99      	ldrh	r1, [r3, r2]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	18d3      	adds	r3, r2, r3
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	224c      	movs	r2, #76	; 0x4c
 8006fa0:	5a9a      	ldrh	r2, [r3, r2]
 8006fa2:	230e      	movs	r3, #14
 8006fa4:	18fb      	adds	r3, r7, r3
 8006fa6:	1a8a      	subs	r2, r1, r2
 8006fa8:	801a      	strh	r2, [r3, #0]
//			if(gs->vcs[i]->mot->sense == SENSE_UP)
//				gs->vcs[i]->mot->sPowers[0] = gs->vcs[i]->mot->tpower ;
//			else
//				gs->vcs[i]->mot->sPowers[1] = gs->vcs[i]->mot->tpower ;
//		}
		float speed = tSpeed ;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	60bb      	str	r3, [r7, #8]
//		if(diffTour < 20)
//			speed = 30 ;

		if(gs->vcs[i]->mot->sense == SENSE_UP)
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	18d3      	adds	r3, r2, r3
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbc:	7b1b      	ldrb	r3, [r3, #12]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d121      	bne.n	8007006 <computeSpeeds+0x146>
			gs->speeds[i] = speed + k*(avTour - (float)(gs->vcs[i]->target_currTour)) ;
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	18d3      	adds	r3, r2, r3
 8006fca:	3304      	adds	r3, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	224a      	movs	r2, #74	; 0x4a
 8006fd0:	5a9b      	ldrh	r3, [r3, r2]
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7fa f92e 	bl	8001234 <__aeabi_ui2f>
 8006fd8:	1c03      	adds	r3, r0, #0
 8006fda:	1c19      	adds	r1, r3, #0
 8006fdc:	69f8      	ldr	r0, [r7, #28]
 8006fde:	f7f9 fefb 	bl	8000dd8 <__aeabi_fsub>
 8006fe2:	1c03      	adds	r3, r0, #0
 8006fe4:	6939      	ldr	r1, [r7, #16]
 8006fe6:	1c18      	adds	r0, r3, #0
 8006fe8:	f7f9 fdc4 	bl	8000b74 <__aeabi_fmul>
 8006fec:	1c03      	adds	r3, r0, #0
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	1c18      	adds	r0, r3, #0
 8006ff2:	f7f9 fa4d 	bl	8000490 <__aeabi_fadd>
 8006ff6:	1c03      	adds	r3, r0, #0
 8006ff8:	1c19      	adds	r1, r3, #0
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	320e      	adds	r2, #14
 8007000:	0092      	lsls	r2, r2, #2
 8007002:	50d1      	str	r1, [r2, r3]
 8007004:	e020      	b.n	8007048 <computeSpeeds+0x188>
		else
			gs->speeds[i] = speed + k*((float)(gs->vcs[i]->target_currTour)- avTour) ;
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	18d3      	adds	r3, r2, r3
 800700e:	3304      	adds	r3, #4
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	224a      	movs	r2, #74	; 0x4a
 8007014:	5a9b      	ldrh	r3, [r3, r2]
 8007016:	0018      	movs	r0, r3
 8007018:	f7fa f90c 	bl	8001234 <__aeabi_ui2f>
 800701c:	1c03      	adds	r3, r0, #0
 800701e:	69f9      	ldr	r1, [r7, #28]
 8007020:	1c18      	adds	r0, r3, #0
 8007022:	f7f9 fed9 	bl	8000dd8 <__aeabi_fsub>
 8007026:	1c03      	adds	r3, r0, #0
 8007028:	6939      	ldr	r1, [r7, #16]
 800702a:	1c18      	adds	r0, r3, #0
 800702c:	f7f9 fda2 	bl	8000b74 <__aeabi_fmul>
 8007030:	1c03      	adds	r3, r0, #0
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	1c18      	adds	r0, r3, #0
 8007036:	f7f9 fa2b 	bl	8000490 <__aeabi_fadd>
 800703a:	1c03      	adds	r3, r0, #0
 800703c:	1c19      	adds	r1, r3, #0
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	320e      	adds	r2, #14
 8007044:	0092      	lsls	r2, r2, #2
 8007046:	50d1      	str	r1, [r2, r3]

		if(gs->speeds[i] < 0)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	320e      	adds	r2, #14
 800704e:	0092      	lsls	r2, r2, #2
 8007050:	58d3      	ldr	r3, [r2, r3]
 8007052:	2100      	movs	r1, #0
 8007054:	1c18      	adds	r0, r3, #0
 8007056:	f7f9 f9db 	bl	8000410 <__aeabi_fcmplt>
 800705a:	1e03      	subs	r3, r0, #0
 800705c:	d005      	beq.n	800706a <computeSpeeds+0x1aa>
			gs->speeds[i] = 0 ;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	320e      	adds	r2, #14
 8007064:	0092      	lsls	r2, r2, #2
 8007066:	2100      	movs	r1, #0
 8007068:	50d1      	str	r1, [r2, r3]
	for(int i = 0 ; i < gs->size ; i++)
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	3301      	adds	r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	789b      	ldrb	r3, [r3, #2]
 8007074:	001a      	movs	r2, r3
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	4293      	cmp	r3, r2
 800707a:	da00      	bge.n	800707e <computeSpeeds+0x1be>
 800707c:	e756      	b.n	8006f2c <computeSpeeds+0x6c>
	}
}
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	46bd      	mov	sp, r7
 8007082:	b008      	add	sp, #32
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	3f8ccccd 	.word	0x3f8ccccd

0800708c <GS_isOut>:

uint8_t GS_isOut(GroupSynchro* gs)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	uint8_t barrier = 0 ;
 8007094:	230f      	movs	r3, #15
 8007096:	18fb      	adds	r3, r7, r3
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < gs->size ; i++)
 800709c:	2300      	movs	r3, #0
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	e013      	b.n	80070ca <GS_isOut+0x3e>
	{
		if(gs->type == GROUP_TYPE_MOTOR || GROUP_TYPE_XMOTOR)
		{
			if(gs->ms[i]->trans.state != STATE_IN){
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3304      	adds	r3, #4
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	18d3      	adds	r3, r2, r3
 80070ac:	3304      	adds	r3, #4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	227d      	movs	r2, #125	; 0x7d
 80070b2:	5c9b      	ldrb	r3, [r3, r2]
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d005      	beq.n	80070c4 <GS_isOut+0x38>
				barrier ++ ;
 80070b8:	210f      	movs	r1, #15
 80070ba:	187b      	adds	r3, r7, r1
 80070bc:	781a      	ldrb	r2, [r3, #0]
 80070be:	187b      	adds	r3, r7, r1
 80070c0:	3201      	adds	r2, #1
 80070c2:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < gs->size ; i++)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60bb      	str	r3, [r7, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	789b      	ldrb	r3, [r3, #2]
 80070ce:	001a      	movs	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4293      	cmp	r3, r2
 80070d4:	dbe5      	blt.n	80070a2 <GS_isOut+0x16>
			}
		}
	}
	return barrier ;
 80070d6:	230f      	movs	r3, #15
 80070d8:	18fb      	adds	r3, r7, r3
 80070da:	781b      	ldrb	r3, [r3, #0]
}
 80070dc:	0018      	movs	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	b004      	add	sp, #16
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HL_initGroups>:
 */
#include "hl_manager.h"



void HL_initGroups(params* gp){
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]

	MR_initGroups(gp) ;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	0018      	movs	r0, r3
 80070f0:	f004 fa24 	bl	800b53c <MR_initGroups>
	for(int i = 0 ; i < NUMGROUPS ; i++)
 80070f4:	2300      	movs	r3, #0
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	e023      	b.n	8007142 <HL_initGroups+0x5e>
	{
		gp->gss[i].HL_mode = HL_MODE_IDLE ;
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	2066      	movs	r0, #102	; 0x66
 8007100:	0013      	movs	r3, r2
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	1a9b      	subs	r3, r3, r2
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	18cb      	adds	r3, r1, r3
 800710a:	181b      	adds	r3, r3, r0
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
		gp->gss[i].HL_arg = 0 ;
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	206a      	movs	r0, #106	; 0x6a
 8007116:	0013      	movs	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	18cb      	adds	r3, r1, r3
 8007120:	181b      	adds	r3, r3, r0
 8007122:	2200      	movs	r2, #0
 8007124:	801a      	strh	r2, [r3, #0]
		gp->gss[i].hl_token = 0 ;
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	2059      	movs	r0, #89	; 0x59
 800712c:	0013      	movs	r3, r2
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	1a9b      	subs	r3, r3, r2
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	18cb      	adds	r3, r1, r3
 8007136:	181b      	adds	r3, r3, r0
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < NUMGROUPS ; i++)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b07      	cmp	r3, #7
 8007146:	ddd8      	ble.n	80070fa <HL_initGroups+0x16>
	}
}
 8007148:	46c0      	nop			; (mov r8, r8)
 800714a:	46bd      	mov	sp, r7
 800714c:	b004      	add	sp, #16
 800714e:	bd80      	pop	{r7, pc}

08007150 <HL_update>:

void HL_update(params* gp, uint32_t time_us){
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
	for(int i = 0 ; i < NUMGROUPS ; i++)
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	e13e      	b.n	80073de <HL_update+0x28e>
	{
		if(gp->gss[i].type == GROUP_TYPE_CAPTOR)
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	0013      	movs	r3, r2
 8007166:	00db      	lsls	r3, r3, #3
 8007168:	1a9b      	subs	r3, r3, r2
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	5c5b      	ldrb	r3, [r3, r1]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d15f      	bne.n	8007232 <HL_update+0xe2>
		{
			if(gp->gss[i].HL_mode == HL_MODE_GO_UP)
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	2066      	movs	r0, #102	; 0x66
 8007178:	0013      	movs	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	1a9b      	subs	r3, r3, r2
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	18cb      	adds	r3, r1, r3
 8007182:	181b      	adds	r3, r3, r0
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d10b      	bne.n	80071a2 <HL_update+0x52>
				HL_GoUp(gp, &(gp->gss[i])) ;
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	0013      	movs	r3, r2
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	1a9b      	subs	r3, r3, r2
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	18d2      	adds	r2, r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	0011      	movs	r1, r2
 800719c:	0018      	movs	r0, r3
 800719e:	f000 f941 	bl	8007424 <HL_GoUp>
			if(gp->gss[i].HL_mode == HL_MODE_GET_FROM_UP)
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	2066      	movs	r0, #102	; 0x66
 80071a8:	0013      	movs	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	18cb      	adds	r3, r1, r3
 80071b2:	181b      	adds	r3, r3, r0
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b0b      	cmp	r3, #11
 80071b8:	d10b      	bne.n	80071d2 <HL_update+0x82>
				HL_GetFromUp(gp, &(gp->gss[i])) ;
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	0013      	movs	r3, r2
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	18d2      	adds	r2, r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	0011      	movs	r1, r2
 80071cc:	0018      	movs	r0, r3
 80071ce:	f000 fe59 	bl	8007e84 <HL_GetFromUp>

			if(gp->gss[i].HL_mode == HL_MODE_GO_DOWN)
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	2066      	movs	r0, #102	; 0x66
 80071d8:	0013      	movs	r3, r2
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	18cb      	adds	r3, r1, r3
 80071e2:	181b      	adds	r3, r3, r0
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d10b      	bne.n	8007202 <HL_update+0xb2>
				HL_GoDown(gp, &(gp->gss[i])) ;
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	0013      	movs	r3, r2
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	1a9b      	subs	r3, r3, r2
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	18d2      	adds	r2, r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	0011      	movs	r1, r2
 80071fc:	0018      	movs	r0, r3
 80071fe:	f000 fb9b 	bl	8007938 <HL_GoDown>
			if(gp->gss[i].HL_mode == HL_MODE_GET_FROM_DOWN)
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	2066      	movs	r0, #102	; 0x66
 8007208:	0013      	movs	r3, r2
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	1a9b      	subs	r3, r3, r2
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	18cb      	adds	r3, r1, r3
 8007212:	181b      	adds	r3, r3, r0
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b0a      	cmp	r3, #10
 8007218:	d10b      	bne.n	8007232 <HL_update+0xe2>
				HL_GetFromDown(gp, &(gp->gss[i])) ;
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	0013      	movs	r3, r2
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	18d2      	adds	r2, r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	0011      	movs	r1, r2
 800722c:	0018      	movs	r0, r3
 800722e:	f000 fa99 	bl	8007764 <HL_GetFromDown>
		}

		if(gp->gss[i].type == GROUP_TYPE_MOTOR || gp->gss[i].type == GROUP_TYPE_XMOTOR)
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	0013      	movs	r3, r2
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	1a9b      	subs	r3, r3, r2
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	5c5b      	ldrb	r3, [r3, r1]
 8007240:	2b02      	cmp	r3, #2
 8007242:	d009      	beq.n	8007258 <HL_update+0x108>
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	0013      	movs	r3, r2
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	5c5b      	ldrb	r3, [r3, r1]
 8007252:	2b03      	cmp	r3, #3
 8007254:	d000      	beq.n	8007258 <HL_update+0x108>
 8007256:	e0bf      	b.n	80073d8 <HL_update+0x288>
		{
					if(gp->gss[i].HL_mode == HL_MODE_GO_LEFT)
 8007258:	6879      	ldr	r1, [r7, #4]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	2066      	movs	r0, #102	; 0x66
 800725e:	0013      	movs	r3, r2
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	18cb      	adds	r3, r1, r3
 8007268:	181b      	adds	r3, r3, r0
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b15      	cmp	r3, #21
 800726e:	d10b      	bne.n	8007288 <HL_update+0x138>
						HL_GoLeft(gp, &(gp->gss[i])) ;
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	0013      	movs	r3, r2
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	18d2      	adds	r2, r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	0011      	movs	r1, r2
 8007282:	0018      	movs	r0, r3
 8007284:	f001 f814 	bl	80082b0 <HL_GoLeft>
					if(gp->gss[i].HL_mode == HL_MODE_GET_FROM_LEFT)
 8007288:	6879      	ldr	r1, [r7, #4]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	2066      	movs	r0, #102	; 0x66
 800728e:	0013      	movs	r3, r2
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	18cb      	adds	r3, r1, r3
 8007298:	181b      	adds	r3, r3, r0
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b1f      	cmp	r3, #31
 800729e:	d10b      	bne.n	80072b8 <HL_update+0x168>
						HL_GetFromLeft(gp, &(gp->gss[i])) ;
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	0013      	movs	r3, r2
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	1a9b      	subs	r3, r3, r2
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	18d2      	adds	r2, r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	0011      	movs	r1, r2
 80072b2:	0018      	movs	r0, r3
 80072b4:	f000 ffb0 	bl	8008218 <HL_GetFromLeft>

					if(gp->gss[i].HL_mode == HL_MODE_GO_RIGHT)
 80072b8:	6879      	ldr	r1, [r7, #4]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	2066      	movs	r0, #102	; 0x66
 80072be:	0013      	movs	r3, r2
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	1a9b      	subs	r3, r3, r2
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	18cb      	adds	r3, r1, r3
 80072c8:	181b      	adds	r3, r3, r0
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b14      	cmp	r3, #20
 80072ce:	d10b      	bne.n	80072e8 <HL_update+0x198>
						HL_GoRight(gp, &(gp->gss[i])) ;
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	0013      	movs	r3, r2
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	18d2      	adds	r2, r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	0011      	movs	r1, r2
 80072e2:	0018      	movs	r0, r3
 80072e4:	f000 fe7e 	bl	8007fe4 <HL_GoRight>
					if(gp->gss[i].HL_mode == HL_MODE_GET_FROM_RIGHT)
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	2066      	movs	r0, #102	; 0x66
 80072ee:	0013      	movs	r3, r2
 80072f0:	00db      	lsls	r3, r3, #3
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	18cb      	adds	r3, r1, r3
 80072f8:	181b      	adds	r3, r3, r0
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b1e      	cmp	r3, #30
 80072fe:	d10b      	bne.n	8007318 <HL_update+0x1c8>
						HL_GetFromRight(gp, &(gp->gss[i])) ;
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	0013      	movs	r3, r2
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	18d2      	adds	r2, r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	0011      	movs	r1, r2
 8007312:	0018      	movs	r0, r3
 8007314:	f001 f924 	bl	8008560 <HL_GetFromRight>

					if(gp->gss[i].HL_mode == HL_MODE_GO_FORWARD)
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	2066      	movs	r0, #102	; 0x66
 800731e:	0013      	movs	r3, r2
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	18cb      	adds	r3, r1, r3
 8007328:	181b      	adds	r3, r3, r0
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b16      	cmp	r3, #22
 800732e:	d10b      	bne.n	8007348 <HL_update+0x1f8>
						HL_GoForward(gp, &(gp->gss[i])) ;
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	0013      	movs	r3, r2
 8007334:	00db      	lsls	r3, r3, #3
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	18d2      	adds	r2, r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	0011      	movs	r1, r2
 8007342:	0018      	movs	r0, r3
 8007344:	f001 f958 	bl	80085f8 <HL_GoForward>
					if(gp->gss[i].HL_mode == HL_MODE_GET_FROM_FORWARD)
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	2066      	movs	r0, #102	; 0x66
 800734e:	0013      	movs	r3, r2
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	1a9b      	subs	r3, r3, r2
 8007354:	011b      	lsls	r3, r3, #4
 8007356:	18cb      	adds	r3, r1, r3
 8007358:	181b      	adds	r3, r3, r0
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b20      	cmp	r3, #32
 800735e:	d10b      	bne.n	8007378 <HL_update+0x228>
						HL_GetFromForward(gp, &(gp->gss[i])) ;
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	0013      	movs	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	1a9b      	subs	r3, r3, r2
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	18d2      	adds	r2, r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	0011      	movs	r1, r2
 8007372:	0018      	movs	r0, r3
 8007374:	f001 fb70 	bl	8008a58 <HL_GetFromForward>

					if(gp->gss[i].HL_mode == HL_MODE_GO_BACKWARD)
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	2066      	movs	r0, #102	; 0x66
 800737e:	0013      	movs	r3, r2
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	18cb      	adds	r3, r1, r3
 8007388:	181b      	adds	r3, r3, r0
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b17      	cmp	r3, #23
 800738e:	d10b      	bne.n	80073a8 <HL_update+0x258>
						HL_GoBackward(gp, &(gp->gss[i])) ;
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	0013      	movs	r3, r2
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	1a9b      	subs	r3, r3, r2
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	18d2      	adds	r2, r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	0011      	movs	r1, r2
 80073a2:	0018      	movs	r0, r3
 80073a4:	f001 faa4 	bl	80088f0 <HL_GoBackward>
					if(gp->gss[i].HL_mode == HL_MODE_GET_FROM_BACKWARD)
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	2066      	movs	r0, #102	; 0x66
 80073ae:	0013      	movs	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	1a9b      	subs	r3, r3, r2
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	18cb      	adds	r3, r1, r3
 80073b8:	181b      	adds	r3, r3, r0
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b21      	cmp	r3, #33	; 0x21
 80073be:	d10b      	bne.n	80073d8 <HL_update+0x288>
						HL_GetFromBackward(gp, &(gp->gss[i])) ;
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	0013      	movs	r3, r2
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	1a9b      	subs	r3, r3, r2
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	18d2      	adds	r2, r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	0011      	movs	r1, r2
 80073d2:	0018      	movs	r0, r3
 80073d4:	f001 f9b0 	bl	8008738 <HL_GetFromBackward>
	for(int i = 0 ; i < NUMGROUPS ; i++)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b07      	cmp	r3, #7
 80073e2:	dc00      	bgt.n	80073e6 <HL_update+0x296>
 80073e4:	e6bc      	b.n	8007160 <HL_update+0x10>
		}
	}
	MR_update(gp, time_us) ;
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	0011      	movs	r1, r2
 80073ec:	0018      	movs	r0, r3
 80073ee:	f004 f8d0 	bl	800b592 <MR_update>
}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b004      	add	sp, #16
 80073f8:	bd80      	pop	{r7, pc}

080073fa <HL_StartGoUp>:
}

//_______________________________________________________________GO UP___________________________________________________________

void HL_StartGoUp(GroupSynchro* gs)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_CAPTOR)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d107      	bne.n	800741a <HL_StartGoUp+0x20>
		{
			gs->hl_token = 1 ;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2259      	movs	r2, #89	; 0x59
 800740e:	2101      	movs	r1, #1
 8007410:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GO_UP ;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2266      	movs	r2, #102	; 0x66
 8007416:	2101      	movs	r1, #1
 8007418:	5499      	strb	r1, [r3, r2]
		}
}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	46bd      	mov	sp, r7
 800741e:	b002      	add	sp, #8
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <HL_GoUp>:

//
void HL_GoUp(params* gp, GroupSynchro* gs)
{
 8007424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007426:	b09d      	sub	sp, #116	; 0x74
 8007428:	af00      	add	r7, sp, #0
 800742a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800742c:	63b9      	str	r1, [r7, #56]	; 0x38
		if(gs->hl_token == 1 && gs->mode == MODE_IDLE)
 800742e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007430:	2359      	movs	r3, #89	; 0x59
 8007432:	5cd3      	ldrb	r3, [r2, r3]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d14c      	bne.n	80074d2 <HL_GoUp+0xae>
 8007438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800743a:	2364      	movs	r3, #100	; 0x64
 800743c:	5cd3      	ldrb	r3, [r2, r3]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d147      	bne.n	80074d2 <HL_GoUp+0xae>
		{
			uint8_t barrier = 0 ;
 8007442:	2327      	movs	r3, #39	; 0x27
 8007444:	2238      	movs	r2, #56	; 0x38
 8007446:	18ba      	adds	r2, r7, r2
 8007448:	18d2      	adds	r2, r2, r3
 800744a:	2300      	movs	r3, #0
 800744c:	7013      	strb	r3, [r2, #0]
			for(int i = 0 ; i < gs->size ; i++)
 800744e:	2300      	movs	r3, #0
 8007450:	663b      	str	r3, [r7, #96]	; 0x60
 8007452:	e013      	b.n	800747c <HL_GoUp+0x58>
			{
				if(gs->vcs[i]->mot->trans.state != STATE_IN)
 8007454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	18d3      	adds	r3, r2, r3
 800745c:	3304      	adds	r3, #4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007462:	237d      	movs	r3, #125	; 0x7d
 8007464:	5cd3      	ldrb	r3, [r2, r3]
 8007466:	2b03      	cmp	r3, #3
 8007468:	d005      	beq.n	8007476 <HL_GoUp+0x52>
					barrier = 1 ;
 800746a:	2327      	movs	r3, #39	; 0x27
 800746c:	2238      	movs	r2, #56	; 0x38
 800746e:	18ba      	adds	r2, r7, r2
 8007470:	18d2      	adds	r2, r2, r3
 8007472:	2301      	movs	r3, #1
 8007474:	7013      	strb	r3, [r2, #0]
			for(int i = 0 ; i < gs->size ; i++)
 8007476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007478:	3301      	adds	r3, #1
 800747a:	663b      	str	r3, [r7, #96]	; 0x60
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	789b      	ldrb	r3, [r3, #2]
 8007480:	001a      	movs	r2, r3
 8007482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007484:	4293      	cmp	r3, r2
 8007486:	dbe5      	blt.n	8007454 <HL_GoUp+0x30>
			}
			if(barrier == 1)
 8007488:	2327      	movs	r3, #39	; 0x27
 800748a:	2238      	movs	r2, #56	; 0x38
 800748c:	4694      	mov	ip, r2
 800748e:	44bc      	add	ip, r7
 8007490:	4463      	add	r3, ip
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d105      	bne.n	80074a4 <HL_GoUp+0x80>
				MR_startTargetLeft(gp, gs, 21) ;
 8007498:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	2215      	movs	r2, #21
 800749e:	0018      	movs	r0, r3
 80074a0:	f004 f94e 	bl	800b740 <MR_startTargetLeft>

			uint8_t tx1[] = {COM_1} ;
 80074a4:	2110      	movs	r1, #16
 80074a6:	2338      	movs	r3, #56	; 0x38
 80074a8:	18fb      	adds	r3, r7, r3
 80074aa:	185a      	adds	r2, r3, r1
 80074ac:	2331      	movs	r3, #49	; 0x31
 80074ae:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit(&(gp->huarts[2]), tx1, 1, 1000) ;
 80074b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b2:	22b8      	movs	r2, #184	; 0xb8
 80074b4:	0112      	lsls	r2, r2, #4
 80074b6:	1898      	adds	r0, r3, r2
 80074b8:	23fa      	movs	r3, #250	; 0xfa
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	2238      	movs	r2, #56	; 0x38
 80074be:	4694      	mov	ip, r2
 80074c0:	44bc      	add	ip, r7
 80074c2:	4461      	add	r1, ip
 80074c4:	2201      	movs	r2, #1
 80074c6:	f7fd fc13 	bl	8004cf0 <HAL_UART_Transmit>
			gs->hl_token = 2 ;
 80074ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074cc:	2259      	movs	r2, #89	; 0x59
 80074ce:	2302      	movs	r3, #2
 80074d0:	548b      	strb	r3, [r1, r2]
		}
		if(gs->hl_token == 2 && gs->MR_mode == MR_MODE_IDLE)
 80074d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074d4:	2359      	movs	r3, #89	; 0x59
 80074d6:	5cd3      	ldrb	r3, [r2, r3]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d10c      	bne.n	80074f6 <HL_GoUp+0xd2>
 80074dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074de:	2365      	movs	r3, #101	; 0x65
 80074e0:	5cd3      	ldrb	r3, [r2, r3]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d107      	bne.n	80074f6 <HL_GoUp+0xd2>
		{
			MR_startReachTop(gs) ;
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	0018      	movs	r0, r3
 80074ea:	f004 fbbd 	bl	800bc68 <MR_startReachTop>
			gs->hl_token = 3 ;
 80074ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074f0:	2259      	movs	r2, #89	; 0x59
 80074f2:	2303      	movs	r3, #3
 80074f4:	548b      	strb	r3, [r1, r2]
		}
		if(gs->hl_token == 3 && gs->MR_mode == MR_MODE_IDLE)
 80074f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074f8:	2359      	movs	r3, #89	; 0x59
 80074fa:	5cd3      	ldrb	r3, [r2, r3]
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d000      	beq.n	8007502 <HL_GoUp+0xde>
 8007500:	e0b4      	b.n	800766c <HL_GoUp+0x248>
 8007502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007504:	2365      	movs	r3, #101	; 0x65
 8007506:	5cd3      	ldrb	r3, [r2, r3]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d000      	beq.n	800750e <HL_GoUp+0xea>
 800750c:	e0ae      	b.n	800766c <HL_GoUp+0x248>
		{
			for(int i = 0 ; i < gs->size ; i++)
 800750e:	2300      	movs	r3, #0
 8007510:	667b      	str	r3, [r7, #100]	; 0x64
 8007512:	e00c      	b.n	800752e <HL_GoUp+0x10a>
			{
				gs->vcs[i]->mot->trans.state = STATE_IN ;
 8007514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	18d3      	adds	r3, r2, r3
 800751c:	3304      	adds	r3, #4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007522:	227d      	movs	r2, #125	; 0x7d
 8007524:	2303      	movs	r3, #3
 8007526:	548b      	strb	r3, [r1, r2]
			for(int i = 0 ; i < gs->size ; i++)
 8007528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800752a:	3301      	adds	r3, #1
 800752c:	667b      	str	r3, [r7, #100]	; 0x64
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	789b      	ldrb	r3, [r3, #2]
 8007532:	001a      	movs	r2, r3
 8007534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007536:	4293      	cmp	r3, r2
 8007538:	dbec      	blt.n	8007514 <HL_GoUp+0xf0>
			}
			uint16_t powers[gs->size] ;
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	789a      	ldrb	r2, [r3, #2]
 800753e:	466b      	mov	r3, sp
 8007540:	001e      	movs	r6, r3
 8007542:	0013      	movs	r3, r2
 8007544:	3b01      	subs	r3, #1
 8007546:	65bb      	str	r3, [r7, #88]	; 0x58
 8007548:	61ba      	str	r2, [r7, #24]
 800754a:	2300      	movs	r3, #0
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	69b8      	ldr	r0, [r7, #24]
 8007550:	69f9      	ldr	r1, [r7, #28]
 8007552:	0003      	movs	r3, r0
 8007554:	0f1b      	lsrs	r3, r3, #28
 8007556:	469c      	mov	ip, r3
 8007558:	000b      	movs	r3, r1
 800755a:	011d      	lsls	r5, r3, #4
 800755c:	4663      	mov	r3, ip
 800755e:	431d      	orrs	r5, r3
 8007560:	0003      	movs	r3, r0
 8007562:	011c      	lsls	r4, r3, #4
 8007564:	613a      	str	r2, [r7, #16]
 8007566:	2300      	movs	r3, #0
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	6938      	ldr	r0, [r7, #16]
 800756c:	6979      	ldr	r1, [r7, #20]
 800756e:	0003      	movs	r3, r0
 8007570:	0f1b      	lsrs	r3, r3, #28
 8007572:	000c      	movs	r4, r1
 8007574:	0124      	lsls	r4, r4, #4
 8007576:	637c      	str	r4, [r7, #52]	; 0x34
 8007578:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800757a:	431c      	orrs	r4, r3
 800757c:	637c      	str	r4, [r7, #52]	; 0x34
 800757e:	0003      	movs	r3, r0
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	633b      	str	r3, [r7, #48]	; 0x30
 8007584:	0013      	movs	r3, r2
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	3301      	adds	r3, #1
 800758a:	3307      	adds	r3, #7
 800758c:	08db      	lsrs	r3, r3, #3
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	466a      	mov	r2, sp
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	469d      	mov	sp, r3
 8007596:	466b      	mov	r3, sp
 8007598:	3301      	adds	r3, #1
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	657b      	str	r3, [r7, #84]	; 0x54
			uint8_t senses[gs->size] ;
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	789b      	ldrb	r3, [r3, #2]
 80075a4:	001a      	movs	r2, r3
 80075a6:	3a01      	subs	r2, #1
 80075a8:	653a      	str	r2, [r7, #80]	; 0x50
 80075aa:	60bb      	str	r3, [r7, #8]
 80075ac:	2200      	movs	r2, #0
 80075ae:	60fa      	str	r2, [r7, #12]
 80075b0:	68b8      	ldr	r0, [r7, #8]
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	0002      	movs	r2, r0
 80075b6:	0f52      	lsrs	r2, r2, #29
 80075b8:	000c      	movs	r4, r1
 80075ba:	00e4      	lsls	r4, r4, #3
 80075bc:	62fc      	str	r4, [r7, #44]	; 0x2c
 80075be:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80075c0:	4314      	orrs	r4, r2
 80075c2:	62fc      	str	r4, [r7, #44]	; 0x2c
 80075c4:	0002      	movs	r2, r0
 80075c6:	00d2      	lsls	r2, r2, #3
 80075c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	2200      	movs	r2, #0
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	6838      	ldr	r0, [r7, #0]
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	0002      	movs	r2, r0
 80075d6:	0f52      	lsrs	r2, r2, #29
 80075d8:	000c      	movs	r4, r1
 80075da:	00e4      	lsls	r4, r4, #3
 80075dc:	627c      	str	r4, [r7, #36]	; 0x24
 80075de:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80075e0:	4314      	orrs	r4, r2
 80075e2:	627c      	str	r4, [r7, #36]	; 0x24
 80075e4:	0002      	movs	r2, r0
 80075e6:	00d2      	lsls	r2, r2, #3
 80075e8:	623a      	str	r2, [r7, #32]
 80075ea:	3307      	adds	r3, #7
 80075ec:	08db      	lsrs	r3, r3, #3
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	466a      	mov	r2, sp
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	469d      	mov	sp, r3
 80075f6:	466b      	mov	r3, sp
 80075f8:	3300      	adds	r3, #0
 80075fa:	64fb      	str	r3, [r7, #76]	; 0x4c
			for(int i = 0 ; i < gs->size ; i++)
 80075fc:	2300      	movs	r3, #0
 80075fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007600:	e00c      	b.n	800761c <HL_GoUp+0x1f8>
			{
				powers[i] = 50 ;
 8007602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007604:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007606:	0052      	lsls	r2, r2, #1
 8007608:	2132      	movs	r1, #50	; 0x32
 800760a:	52d1      	strh	r1, [r2, r3]
				senses[i] = SENSE_UP ;
 800760c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800760e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007610:	18d3      	adds	r3, r2, r3
 8007612:	2201      	movs	r2, #1
 8007614:	701a      	strb	r2, [r3, #0]
			for(int i = 0 ; i < gs->size ; i++)
 8007616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007618:	3301      	adds	r3, #1
 800761a:	66bb      	str	r3, [r7, #104]	; 0x68
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	789b      	ldrb	r3, [r3, #2]
 8007620:	001a      	movs	r2, r3
 8007622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007624:	4293      	cmp	r3, r2
 8007626:	dbec      	blt.n	8007602 <HL_GoUp+0x1de>
			}
			GS_startMotors(gs, powers, senses) ;
 8007628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800762a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	0018      	movs	r0, r3
 8007630:	f7ff fa5a 	bl	8006ae8 <GS_startMotors>
			gs->HL_arg = 0 ;
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	226a      	movs	r2, #106	; 0x6a
 8007638:	2100      	movs	r1, #0
 800763a:	5299      	strh	r1, [r3, r2]
			uint8_t tx1[] = {COM_A} ;
 800763c:	210c      	movs	r1, #12
 800763e:	2338      	movs	r3, #56	; 0x38
 8007640:	18fb      	adds	r3, r7, r3
 8007642:	185b      	adds	r3, r3, r1
 8007644:	2261      	movs	r2, #97	; 0x61
 8007646:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&(gp->huarts[2]), tx1, 1, 1000) ;
 8007648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764a:	22b8      	movs	r2, #184	; 0xb8
 800764c:	0112      	lsls	r2, r2, #4
 800764e:	1898      	adds	r0, r3, r2
 8007650:	23fa      	movs	r3, #250	; 0xfa
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	2238      	movs	r2, #56	; 0x38
 8007656:	4694      	mov	ip, r2
 8007658:	44bc      	add	ip, r7
 800765a:	4461      	add	r1, ip
 800765c:	2201      	movs	r2, #1
 800765e:	f7fd fb47 	bl	8004cf0 <HAL_UART_Transmit>
			gs->hl_token = 4 ;
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	2259      	movs	r2, #89	; 0x59
 8007666:	2104      	movs	r1, #4
 8007668:	5499      	strb	r1, [r3, r2]
 800766a:	46b5      	mov	sp, r6
		}

		if(gs->hl_token == 4 && gs->mode == MODE_IDLE && gs->HL_arg == 1)
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	2259      	movs	r2, #89	; 0x59
 8007670:	5c9b      	ldrb	r3, [r3, r2]
 8007672:	2b04      	cmp	r3, #4
 8007674:	d11c      	bne.n	80076b0 <HL_GoUp+0x28c>
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	2264      	movs	r2, #100	; 0x64
 800767a:	5c9b      	ldrb	r3, [r3, r2]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d117      	bne.n	80076b0 <HL_GoUp+0x28c>
 8007680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007682:	226a      	movs	r2, #106	; 0x6a
 8007684:	5a9b      	ldrh	r3, [r3, r2]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d112      	bne.n	80076b0 <HL_GoUp+0x28c>
		{
			GS_stopMotors(gs) ;
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	0018      	movs	r0, r3
 800768e:	f7ff fa8b 	bl	8006ba8 <GS_stopMotors>
			GS_startTargeting(gs, HIGH_AVSPEED, 340) ;
 8007692:	23aa      	movs	r3, #170	; 0xaa
 8007694:	005a      	lsls	r2, r3, #1
 8007696:	4928      	ldr	r1, [pc, #160]	; (8007738 <HL_GoUp+0x314>)
 8007698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769a:	0018      	movs	r0, r3
 800769c:	f7ff fabe 	bl	8006c1c <GS_startTargeting>
			gs->HL_arg = 0 ;
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	226a      	movs	r2, #106	; 0x6a
 80076a4:	2100      	movs	r1, #0
 80076a6:	5299      	strh	r1, [r3, r2]
			gs->hl_token = 5 ;
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	2259      	movs	r2, #89	; 0x59
 80076ac:	2105      	movs	r1, #5
 80076ae:	5499      	strb	r1, [r3, r2]
		}

		if(gs->hl_token == 5 && gs->mode == MODE_IDLE)
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	2259      	movs	r2, #89	; 0x59
 80076b4:	5c9b      	ldrb	r3, [r3, r2]
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	d139      	bne.n	800772e <HL_GoUp+0x30a>
 80076ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076bc:	2264      	movs	r2, #100	; 0x64
 80076be:	5c9b      	ldrb	r3, [r3, r2]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d134      	bne.n	800772e <HL_GoUp+0x30a>
		{
			for(int i = 0 ; i < gs->size ; i++)
 80076c4:	2300      	movs	r3, #0
 80076c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076c8:	e00c      	b.n	80076e4 <HL_GoUp+0x2c0>
			{
				gs->vcs[i]->mot->trans.state = STATE_LEFT ;
 80076ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	18d3      	adds	r3, r2, r3
 80076d2:	3304      	adds	r3, #4
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d8:	227d      	movs	r2, #125	; 0x7d
 80076da:	2104      	movs	r1, #4
 80076dc:	5499      	strb	r1, [r3, r2]
			for(int i = 0 ; i < gs->size ; i++)
 80076de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e0:	3301      	adds	r3, #1
 80076e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	789b      	ldrb	r3, [r3, #2]
 80076e8:	001a      	movs	r2, r3
 80076ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ec:	4293      	cmp	r3, r2
 80076ee:	dbec      	blt.n	80076ca <HL_GoUp+0x2a6>
			}
			uint8_t tx1[] = {COM_C} ;
 80076f0:	2108      	movs	r1, #8
 80076f2:	2338      	movs	r3, #56	; 0x38
 80076f4:	18fb      	adds	r3, r7, r3
 80076f6:	185b      	adds	r3, r3, r1
 80076f8:	2263      	movs	r2, #99	; 0x63
 80076fa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&(gp->huarts[2]), tx1, 1, 1000) ;
 80076fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fe:	22b8      	movs	r2, #184	; 0xb8
 8007700:	0112      	lsls	r2, r2, #4
 8007702:	1898      	adds	r0, r3, r2
 8007704:	23fa      	movs	r3, #250	; 0xfa
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	2238      	movs	r2, #56	; 0x38
 800770a:	4694      	mov	ip, r2
 800770c:	44bc      	add	ip, r7
 800770e:	4461      	add	r1, ip
 8007710:	2201      	movs	r2, #1
 8007712:	f7fd faed 	bl	8004cf0 <HAL_UART_Transmit>
			gs->hl_token = 0 ;
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	2259      	movs	r2, #89	; 0x59
 800771a:	2100      	movs	r1, #0
 800771c:	5499      	strb	r1, [r3, r2]
			gs->HL_arg = 0 ;
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	226a      	movs	r2, #106	; 0x6a
 8007722:	2100      	movs	r1, #0
 8007724:	5299      	strh	r1, [r3, r2]
			gs->HL_mode = HL_MODE_IDLE ;
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	2266      	movs	r2, #102	; 0x66
 800772a:	2100      	movs	r1, #0
 800772c:	5499      	strb	r1, [r3, r2]
		}
}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	b01d      	add	sp, #116	; 0x74
 8007734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	42be999a 	.word	0x42be999a

0800773c <HL_StartGetFromDown>:

void HL_StartGetFromDown(GroupSynchro* gs)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_CAPTOR)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d107      	bne.n	800775c <HL_StartGetFromDown+0x20>
		{
			gs->hl_token = 1 ;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2259      	movs	r2, #89	; 0x59
 8007750:	2101      	movs	r1, #1
 8007752:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GET_FROM_DOWN ;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2266      	movs	r2, #102	; 0x66
 8007758:	210a      	movs	r1, #10
 800775a:	5499      	strb	r1, [r3, r2]
		}
}
 800775c:	46c0      	nop			; (mov r8, r8)
 800775e:	46bd      	mov	sp, r7
 8007760:	b002      	add	sp, #8
 8007762:	bd80      	pop	{r7, pc}

08007764 <HL_GetFromDown>:

void HL_GetFromDown(params* gp, GroupSynchro* gs)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
	if(gs->hl_token == 1 && gs->mode == MODE_IDLE)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2259      	movs	r2, #89	; 0x59
 8007772:	5c9b      	ldrb	r3, [r3, r2]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d118      	bne.n	80077aa <HL_GetFromDown+0x46>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2264      	movs	r2, #100	; 0x64
 800777c:	5c9b      	ldrb	r3, [r3, r2]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d113      	bne.n	80077aa <HL_GetFromDown+0x46>
	{
		GS_startTargeting(gs,HIGH_AVSPEED, 6) ;
 8007782:	495f      	ldr	r1, [pc, #380]	; (8007900 <HL_GetFromDown+0x19c>)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2206      	movs	r2, #6
 8007788:	0018      	movs	r0, r3
 800778a:	f7ff fa47 	bl	8006c1c <GS_startTargeting>
		if(GS_isOut(&(gp->gss[0])))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	0018      	movs	r0, r3
 8007792:	f7ff fc7b 	bl	800708c <GS_isOut>
 8007796:	1e03      	subs	r3, r0, #0
 8007798:	d003      	beq.n	80077a2 <HL_GetFromDown+0x3e>
			MR_startGoIn(&(gp->gss[0])) ;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	0018      	movs	r0, r3
 800779e:	f004 fd4a 	bl	800c236 <MR_startGoIn>
//		if(GS_isOut(&(gp->gss[2])))
//			MR_startGoIn(&(gp->gss[2])) ;

		gs->hl_token = 2 ;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2259      	movs	r2, #89	; 0x59
 80077a6:	2102      	movs	r1, #2
 80077a8:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 2 && gs->mode == MODE_IDLE && gp->gss[0].MR_mode == MR_MODE_IDLE)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2259      	movs	r2, #89	; 0x59
 80077ae:	5c9b      	ldrb	r3, [r3, r2]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d113      	bne.n	80077dc <HL_GetFromDown+0x78>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2264      	movs	r2, #100	; 0x64
 80077b8:	5c9b      	ldrb	r3, [r3, r2]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10e      	bne.n	80077dc <HL_GetFromDown+0x78>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2265      	movs	r2, #101	; 0x65
 80077c2:	5c9b      	ldrb	r3, [r3, r2]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <HL_GetFromDown+0x78>
		{

			GS_startTargeting(gs,HIGH_AVSPEED, 1) ;
 80077c8:	494d      	ldr	r1, [pc, #308]	; (8007900 <HL_GetFromDown+0x19c>)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2201      	movs	r2, #1
 80077ce:	0018      	movs	r0, r3
 80077d0:	f7ff fa24 	bl	8006c1c <GS_startTargeting>
			gs->hl_token = 3 ;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2259      	movs	r2, #89	; 0x59
 80077d8:	2103      	movs	r1, #3
 80077da:	5499      	strb	r1, [r3, r2]
		}
	if(gs->hl_token == 3 && gs->HL_arg == 2)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2259      	movs	r2, #89	; 0x59
 80077e0:	5c9b      	ldrb	r3, [r3, r2]
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d128      	bne.n	8007838 <HL_GetFromDown+0xd4>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	226a      	movs	r2, #106	; 0x6a
 80077ea:	5a9b      	ldrh	r3, [r3, r2]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d123      	bne.n	8007838 <HL_GetFromDown+0xd4>
	{
		for(int i = 0 ; i < gs->size ; i++)
 80077f0:	2300      	movs	r3, #0
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	e00c      	b.n	8007810 <HL_GetFromDown+0xac>
			{
				gs->vcs[i]->mot->trans.state = STATE_LEFT ;
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	18d3      	adds	r3, r2, r3
 80077fe:	3304      	adds	r3, #4
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007804:	227d      	movs	r2, #125	; 0x7d
 8007806:	2104      	movs	r1, #4
 8007808:	5499      	strb	r1, [r3, r2]
		for(int i = 0 ; i < gs->size ; i++)
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	3301      	adds	r3, #1
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	789b      	ldrb	r3, [r3, #2]
 8007814:	001a      	movs	r2, r3
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	4293      	cmp	r3, r2
 800781a:	dbec      	blt.n	80077f6 <HL_GetFromDown+0x92>
			}
		GS_startTargeting(gs,HIGH_AVSPEED, 25) ;
 800781c:	4938      	ldr	r1, [pc, #224]	; (8007900 <HL_GetFromDown+0x19c>)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2219      	movs	r2, #25
 8007822:	0018      	movs	r0, r3
 8007824:	f7ff f9fa 	bl	8006c1c <GS_startTargeting>
		gs->HL_arg = 0 ;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	226a      	movs	r2, #106	; 0x6a
 800782c:	2100      	movs	r1, #0
 800782e:	5299      	strh	r1, [r3, r2]
		gs->hl_token = 4 ;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2259      	movs	r2, #89	; 0x59
 8007834:	2104      	movs	r1, #4
 8007836:	5499      	strb	r1, [r3, r2]
	}

	if(gs->hl_token == 4 && gs->mode == MODE_IDLE)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2259      	movs	r2, #89	; 0x59
 800783c:	5c9b      	ldrb	r3, [r3, r2]
 800783e:	2b04      	cmp	r3, #4
 8007840:	d115      	bne.n	800786e <HL_GetFromDown+0x10a>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2264      	movs	r2, #100	; 0x64
 8007846:	5c9b      	ldrb	r3, [r3, r2]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d110      	bne.n	800786e <HL_GetFromDown+0x10a>
	{

		uint8_t tx1[] = {COM_A} ;
 800784c:	210c      	movs	r1, #12
 800784e:	187b      	adds	r3, r7, r1
 8007850:	2261      	movs	r2, #97	; 0x61
 8007852:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&(gp->huarts[0]), tx1, 1, 1000) ;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a2b      	ldr	r2, [pc, #172]	; (8007904 <HL_GetFromDown+0x1a0>)
 8007858:	1898      	adds	r0, r3, r2
 800785a:	23fa      	movs	r3, #250	; 0xfa
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	1879      	adds	r1, r7, r1
 8007860:	2201      	movs	r2, #1
 8007862:	f7fd fa45 	bl	8004cf0 <HAL_UART_Transmit>
		gs->hl_token = 5 ;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2259      	movs	r2, #89	; 0x59
 800786a:	2105      	movs	r1, #5
 800786c:	5499      	strb	r1, [r3, r2]
	}

	if(gs->hl_token == 5 && gs->HL_arg == 3)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2259      	movs	r2, #89	; 0x59
 8007872:	5c9b      	ldrb	r3, [r3, r2]
 8007874:	2b05      	cmp	r3, #5
 8007876:	d113      	bne.n	80078a0 <HL_GetFromDown+0x13c>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	226a      	movs	r2, #106	; 0x6a
 800787c:	5a9b      	ldrh	r3, [r3, r2]
 800787e:	2b03      	cmp	r3, #3
 8007880:	d10e      	bne.n	80078a0 <HL_GetFromDown+0x13c>
	{
		GS_startTargeting(gs,HIGH_AVSPEED, 350) ;
 8007882:	23af      	movs	r3, #175	; 0xaf
 8007884:	005a      	lsls	r2, r3, #1
 8007886:	491e      	ldr	r1, [pc, #120]	; (8007900 <HL_GetFromDown+0x19c>)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	0018      	movs	r0, r3
 800788c:	f7ff f9c6 	bl	8006c1c <GS_startTargeting>
		gs->HL_arg = 0 ;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	226a      	movs	r2, #106	; 0x6a
 8007894:	2100      	movs	r1, #0
 8007896:	5299      	strh	r1, [r3, r2]
		gs->hl_token = 6 ;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2259      	movs	r2, #89	; 0x59
 800789c:	2106      	movs	r1, #6
 800789e:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 6 && gs->mode == MODE_IDLE)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2259      	movs	r2, #89	; 0x59
 80078a4:	5c9b      	ldrb	r3, [r3, r2]
 80078a6:	2b06      	cmp	r3, #6
 80078a8:	d126      	bne.n	80078f8 <HL_GetFromDown+0x194>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2264      	movs	r2, #100	; 0x64
 80078ae:	5c9b      	ldrb	r3, [r3, r2]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d121      	bne.n	80078f8 <HL_GetFromDown+0x194>
	{
		for(int i = 0 ; i < gs->size ; i++)
 80078b4:	2300      	movs	r3, #0
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	e00c      	b.n	80078d4 <HL_GetFromDown+0x170>
		{
			gs->vcs[i]->mot->trans.state = STATE_IN ;
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	18d3      	adds	r3, r2, r3
 80078c2:	3304      	adds	r3, #4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c8:	227d      	movs	r2, #125	; 0x7d
 80078ca:	2103      	movs	r1, #3
 80078cc:	5499      	strb	r1, [r3, r2]
		for(int i = 0 ; i < gs->size ; i++)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	3301      	adds	r3, #1
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	789b      	ldrb	r3, [r3, #2]
 80078d8:	001a      	movs	r2, r3
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	4293      	cmp	r3, r2
 80078de:	dbec      	blt.n	80078ba <HL_GetFromDown+0x156>
		}
		gs->hl_token = 0 ;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2259      	movs	r2, #89	; 0x59
 80078e4:	2100      	movs	r1, #0
 80078e6:	5499      	strb	r1, [r3, r2]
		gs->HL_mode = HL_MODE_IDLE ;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2266      	movs	r2, #102	; 0x66
 80078ec:	2100      	movs	r1, #0
 80078ee:	5499      	strb	r1, [r3, r2]
		gs->HL_arg = 0 ;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	226a      	movs	r2, #106	; 0x6a
 80078f4:	2100      	movs	r1, #0
 80078f6:	5299      	strh	r1, [r3, r2]
	}
}
 80078f8:	46c0      	nop			; (mov r8, r8)
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b006      	add	sp, #24
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	42be999a 	.word	0x42be999a
 8007904:	00000a68 	.word	0x00000a68

08007908 <HL_StartGoDown>:

//_____________________________________________________GO DOWN___________________________________________


void HL_StartGoDown(GroupSynchro* gs)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_CAPTOR)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d10b      	bne.n	8007930 <HL_StartGoDown+0x28>
		{
			gs->hl_token = 1 ;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2259      	movs	r2, #89	; 0x59
 800791c:	2101      	movs	r1, #1
 800791e:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GO_DOWN ;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2266      	movs	r2, #102	; 0x66
 8007924:	2102      	movs	r1, #2
 8007926:	5499      	strb	r1, [r3, r2]
			gs->HL_arg = 0 ;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	226a      	movs	r2, #106	; 0x6a
 800792c:	2100      	movs	r1, #0
 800792e:	5299      	strh	r1, [r3, r2]
		}
}
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	46bd      	mov	sp, r7
 8007934:	b002      	add	sp, #8
 8007936:	bd80      	pop	{r7, pc}

08007938 <HL_GoDown>:
//
void HL_GoDown(params* gp, GroupSynchro* gs)
{
 8007938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800793a:	b0b3      	sub	sp, #204	; 0xcc
 800793c:	af00      	add	r7, sp, #0
 800793e:	67f8      	str	r0, [r7, #124]	; 0x7c
 8007940:	67b9      	str	r1, [r7, #120]	; 0x78
		if(gs->hl_token == 1 && gs->mode == MODE_IDLE)
 8007942:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007944:	2359      	movs	r3, #89	; 0x59
 8007946:	5cd3      	ldrb	r3, [r2, r3]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d156      	bne.n	80079fa <HL_GoDown+0xc2>
 800794c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800794e:	2364      	movs	r3, #100	; 0x64
 8007950:	5cd3      	ldrb	r3, [r2, r3]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d151      	bne.n	80079fa <HL_GoDown+0xc2>
		{
			uint8_t barrier = 0 ;
 8007956:	233b      	movs	r3, #59	; 0x3b
 8007958:	2278      	movs	r2, #120	; 0x78
 800795a:	18ba      	adds	r2, r7, r2
 800795c:	18d2      	adds	r2, r2, r3
 800795e:	2300      	movs	r3, #0
 8007960:	7013      	strb	r3, [r2, #0]
						for(int i = 0 ; i < gs->size ; i++)
 8007962:	2300      	movs	r3, #0
 8007964:	22b4      	movs	r2, #180	; 0xb4
 8007966:	18ba      	adds	r2, r7, r2
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	e019      	b.n	80079a0 <HL_GoDown+0x68>
						{
							if(gs->vcs[i]->mot->trans.state != STATE_IN)
 800796c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800796e:	23b4      	movs	r3, #180	; 0xb4
 8007970:	18fb      	adds	r3, r7, r3
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	18d3      	adds	r3, r2, r3
 8007978:	3304      	adds	r3, #4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800797e:	237d      	movs	r3, #125	; 0x7d
 8007980:	5cd3      	ldrb	r3, [r2, r3]
 8007982:	2b03      	cmp	r3, #3
 8007984:	d005      	beq.n	8007992 <HL_GoDown+0x5a>
								barrier = 1 ;
 8007986:	233b      	movs	r3, #59	; 0x3b
 8007988:	2278      	movs	r2, #120	; 0x78
 800798a:	18ba      	adds	r2, r7, r2
 800798c:	18d2      	adds	r2, r2, r3
 800798e:	2301      	movs	r3, #1
 8007990:	7013      	strb	r3, [r2, #0]
						for(int i = 0 ; i < gs->size ; i++)
 8007992:	23b4      	movs	r3, #180	; 0xb4
 8007994:	18fb      	adds	r3, r7, r3
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	22b4      	movs	r2, #180	; 0xb4
 800799c:	18ba      	adds	r2, r7, r2
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079a2:	789b      	ldrb	r3, [r3, #2]
 80079a4:	001a      	movs	r2, r3
 80079a6:	23b4      	movs	r3, #180	; 0xb4
 80079a8:	18fb      	adds	r3, r7, r3
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	dbdd      	blt.n	800796c <HL_GoDown+0x34>
						}
			if(barrier == 1)
 80079b0:	233b      	movs	r3, #59	; 0x3b
 80079b2:	2278      	movs	r2, #120	; 0x78
 80079b4:	4694      	mov	ip, r2
 80079b6:	44bc      	add	ip, r7
 80079b8:	4463      	add	r3, ip
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d106      	bne.n	80079ce <HL_GoDown+0x96>
				MR_startTargetLeft(gp, gs, 320) ;
 80079c0:	23a0      	movs	r3, #160	; 0xa0
 80079c2:	005a      	lsls	r2, r3, #1
 80079c4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80079c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079c8:	0018      	movs	r0, r3
 80079ca:	f003 feb9 	bl	800b740 <MR_startTargetLeft>
			uint8_t tx1[] = {COM_2} ;
 80079ce:	2114      	movs	r1, #20
 80079d0:	2378      	movs	r3, #120	; 0x78
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	185a      	adds	r2, r3, r1
 80079d6:	2332      	movs	r3, #50	; 0x32
 80079d8:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit(&(gp->huarts[0]), tx1, 1, 1000) ;
 80079da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079dc:	4adf      	ldr	r2, [pc, #892]	; (8007d5c <HL_GoDown+0x424>)
 80079de:	1898      	adds	r0, r3, r2
 80079e0:	23fa      	movs	r3, #250	; 0xfa
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	2278      	movs	r2, #120	; 0x78
 80079e6:	4694      	mov	ip, r2
 80079e8:	44bc      	add	ip, r7
 80079ea:	4461      	add	r1, ip
 80079ec:	2201      	movs	r2, #1
 80079ee:	f7fd f97f 	bl	8004cf0 <HAL_UART_Transmit>
			gs->hl_token = 2 ;
 80079f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80079f4:	2259      	movs	r2, #89	; 0x59
 80079f6:	2302      	movs	r3, #2
 80079f8:	548b      	strb	r3, [r1, r2]
		}
		if(gs->hl_token == 2 && gs->MR_mode == MR_MODE_IDLE)
 80079fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079fc:	2359      	movs	r3, #89	; 0x59
 80079fe:	5cd3      	ldrb	r3, [r2, r3]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d10c      	bne.n	8007a1e <HL_GoDown+0xe6>
 8007a04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a06:	2365      	movs	r3, #101	; 0x65
 8007a08:	5cd3      	ldrb	r3, [r2, r3]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d107      	bne.n	8007a1e <HL_GoDown+0xe6>
		{
			MR_startReachTop(gs) ;
 8007a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a10:	0018      	movs	r0, r3
 8007a12:	f004 f929 	bl	800bc68 <MR_startReachTop>
			gs->hl_token = 3 ;
 8007a16:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007a18:	2259      	movs	r2, #89	; 0x59
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	548b      	strb	r3, [r1, r2]
		}
		if(gs->hl_token == 3 &&  gs->MR_mode == MR_MODE_IDLE)
 8007a1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a20:	2359      	movs	r3, #89	; 0x59
 8007a22:	5cd3      	ldrb	r3, [r2, r3]
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d11e      	bne.n	8007a66 <HL_GoDown+0x12e>
 8007a28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a2a:	2365      	movs	r3, #101	; 0x65
 8007a2c:	5cd3      	ldrb	r3, [r2, r3]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d119      	bne.n	8007a66 <HL_GoDown+0x12e>
		{
			if(GS_isOut(&(gp->gss[0])))
 8007a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7ff fb29 	bl	800708c <GS_isOut>
 8007a3a:	1e03      	subs	r3, r0, #0
 8007a3c:	d003      	beq.n	8007a46 <HL_GoDown+0x10e>
				MR_startGoIn(&(gp->gss[0])) ;
 8007a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a40:	0018      	movs	r0, r3
 8007a42:	f004 fbf8 	bl	800c236 <MR_startGoIn>
			if(GS_isOut(&(gp->gss[2])))
 8007a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a48:	33e0      	adds	r3, #224	; 0xe0
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	f7ff fb1e 	bl	800708c <GS_isOut>
 8007a50:	1e03      	subs	r3, r0, #0
 8007a52:	d004      	beq.n	8007a5e <HL_GoDown+0x126>
				MR_startGoIn(&(gp->gss[2])) ;
 8007a54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a56:	33e0      	adds	r3, #224	; 0xe0
 8007a58:	0018      	movs	r0, r3
 8007a5a:	f004 fbec 	bl	800c236 <MR_startGoIn>
			gs->hl_token = 4 ;
 8007a5e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007a60:	2259      	movs	r2, #89	; 0x59
 8007a62:	2304      	movs	r3, #4
 8007a64:	548b      	strb	r3, [r1, r2]
		}
		if(gs->hl_token == 4 && gp->gss[0].MR_mode == MR_MODE_IDLE && gp->gss[2].MR_mode == MR_MODE_IDLE)
 8007a66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a68:	2359      	movs	r3, #89	; 0x59
 8007a6a:	5cd3      	ldrb	r3, [r2, r3]
 8007a6c:	2b04      	cmp	r3, #4
 8007a6e:	d112      	bne.n	8007a96 <HL_GoDown+0x15e>
 8007a70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007a72:	2365      	movs	r3, #101	; 0x65
 8007a74:	5cd3      	ldrb	r3, [r2, r3]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10d      	bne.n	8007a96 <HL_GoDown+0x15e>
 8007a7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007a7c:	2346      	movs	r3, #70	; 0x46
 8007a7e:	33ff      	adds	r3, #255	; 0xff
 8007a80:	5cd3      	ldrb	r3, [r2, r3]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d107      	bne.n	8007a96 <HL_GoDown+0x15e>
		{
			MR_startReachBottom(gs) ;
 8007a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f004 f9a7 	bl	800bddc <MR_startReachBottom>

			gs->hl_token = 5 ;
 8007a8e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007a90:	2259      	movs	r2, #89	; 0x59
 8007a92:	2305      	movs	r3, #5
 8007a94:	548b      	strb	r3, [r1, r2]
		}
		if(gs->hl_token == 5 && gs->MR_mode == MR_MODE_IDLE)
 8007a96:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a98:	2359      	movs	r3, #89	; 0x59
 8007a9a:	5cd3      	ldrb	r3, [r2, r3]
 8007a9c:	2b05      	cmp	r3, #5
 8007a9e:	d139      	bne.n	8007b14 <HL_GoDown+0x1dc>
 8007aa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007aa2:	2365      	movs	r3, #101	; 0x65
 8007aa4:	5cd3      	ldrb	r3, [r2, r3]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d134      	bne.n	8007b14 <HL_GoDown+0x1dc>
		{
			uint8_t tx1[] = {COM_A} ;
 8007aaa:	2110      	movs	r1, #16
 8007aac:	2378      	movs	r3, #120	; 0x78
 8007aae:	18fb      	adds	r3, r7, r3
 8007ab0:	185a      	adds	r2, r3, r1
 8007ab2:	2361      	movs	r3, #97	; 0x61
 8007ab4:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit(&(gp->huarts[0]), tx1, 1, 1000) ;
 8007ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ab8:	4aa8      	ldr	r2, [pc, #672]	; (8007d5c <HL_GoDown+0x424>)
 8007aba:	1898      	adds	r0, r3, r2
 8007abc:	23fa      	movs	r3, #250	; 0xfa
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	2278      	movs	r2, #120	; 0x78
 8007ac2:	4694      	mov	ip, r2
 8007ac4:	44bc      	add	ip, r7
 8007ac6:	4461      	add	r1, ip
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f7fd f911 	bl	8004cf0 <HAL_UART_Transmit>
			for(int i = 0 ; i < gs->size ; i++)
 8007ace:	2300      	movs	r3, #0
 8007ad0:	22b8      	movs	r2, #184	; 0xb8
 8007ad2:	18ba      	adds	r2, r7, r2
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	e011      	b.n	8007afc <HL_GoDown+0x1c4>
			{
				gs->vcs[i]->target_currTour = 0 ;
 8007ad8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ada:	23b8      	movs	r3, #184	; 0xb8
 8007adc:	18fb      	adds	r3, r7, r3
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	18d3      	adds	r3, r2, r3
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	6819      	ldr	r1, [r3, #0]
 8007ae8:	224a      	movs	r2, #74	; 0x4a
 8007aea:	2300      	movs	r3, #0
 8007aec:	528b      	strh	r3, [r1, r2]
			for(int i = 0 ; i < gs->size ; i++)
 8007aee:	23b8      	movs	r3, #184	; 0xb8
 8007af0:	18fb      	adds	r3, r7, r3
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	22b8      	movs	r2, #184	; 0xb8
 8007af8:	18ba      	adds	r2, r7, r2
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007afe:	789b      	ldrb	r3, [r3, #2]
 8007b00:	001a      	movs	r2, r3
 8007b02:	23b8      	movs	r3, #184	; 0xb8
 8007b04:	18fb      	adds	r3, r7, r3
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	dbe5      	blt.n	8007ad8 <HL_GoDown+0x1a0>
			}

			gs->hl_token = 6 ;
 8007b0c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007b0e:	2259      	movs	r2, #89	; 0x59
 8007b10:	2306      	movs	r3, #6
 8007b12:	548b      	strb	r3, [r1, r2]
		}
		if(gs->hl_token == 6 && gs->HL_arg == 2)
 8007b14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b16:	2359      	movs	r3, #89	; 0x59
 8007b18:	5cd3      	ldrb	r3, [r2, r3]
 8007b1a:	2b06      	cmp	r3, #6
 8007b1c:	d000      	beq.n	8007b20 <HL_GoDown+0x1e8>
 8007b1e:	e0a4      	b.n	8007c6a <HL_GoDown+0x332>
 8007b20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b22:	236a      	movs	r3, #106	; 0x6a
 8007b24:	5ad3      	ldrh	r3, [r2, r3]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d000      	beq.n	8007b2c <HL_GoDown+0x1f4>
 8007b2a:	e09e      	b.n	8007c6a <HL_GoDown+0x332>
		{
 8007b2c:	466b      	mov	r3, sp
 8007b2e:	001e      	movs	r6, r3
			uint8_t powers[gs->size] ;
 8007b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b32:	789a      	ldrb	r2, [r3, #2]
 8007b34:	0013      	movs	r3, r2
 8007b36:	3b01      	subs	r3, #1
 8007b38:	21ac      	movs	r1, #172	; 0xac
 8007b3a:	1879      	adds	r1, r7, r1
 8007b3c:	600b      	str	r3, [r1, #0]
 8007b3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b40:	2300      	movs	r3, #0
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b48:	0003      	movs	r3, r0
 8007b4a:	0f5b      	lsrs	r3, r3, #29
 8007b4c:	469c      	mov	ip, r3
 8007b4e:	000b      	movs	r3, r1
 8007b50:	00dd      	lsls	r5, r3, #3
 8007b52:	4663      	mov	r3, ip
 8007b54:	431d      	orrs	r5, r3
 8007b56:	0003      	movs	r3, r0
 8007b58:	00dc      	lsls	r4, r3, #3
 8007b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b64:	0003      	movs	r3, r0
 8007b66:	0f5b      	lsrs	r3, r3, #29
 8007b68:	000c      	movs	r4, r1
 8007b6a:	00e4      	lsls	r4, r4, #3
 8007b6c:	677c      	str	r4, [r7, #116]	; 0x74
 8007b6e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8007b70:	431c      	orrs	r4, r3
 8007b72:	677c      	str	r4, [r7, #116]	; 0x74
 8007b74:	0003      	movs	r3, r0
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	673b      	str	r3, [r7, #112]	; 0x70
 8007b7a:	0013      	movs	r3, r2
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	08db      	lsrs	r3, r3, #3
 8007b80:	00db      	lsls	r3, r3, #3
 8007b82:	466a      	mov	r2, sp
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	469d      	mov	sp, r3
 8007b88:	466b      	mov	r3, sp
 8007b8a:	3300      	adds	r3, #0
 8007b8c:	22a8      	movs	r2, #168	; 0xa8
 8007b8e:	18ba      	adds	r2, r7, r2
 8007b90:	6013      	str	r3, [r2, #0]
			uint8_t senses[gs->size] ;
 8007b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b94:	789a      	ldrb	r2, [r3, #2]
 8007b96:	0013      	movs	r3, r2
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	21a4      	movs	r1, #164	; 0xa4
 8007b9c:	1879      	adds	r1, r7, r1
 8007b9e:	600b      	str	r3, [r1, #0]
 8007ba0:	62ba      	str	r2, [r7, #40]	; 0x28
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007baa:	0003      	movs	r3, r0
 8007bac:	0f5b      	lsrs	r3, r3, #29
 8007bae:	000c      	movs	r4, r1
 8007bb0:	00e4      	lsls	r4, r4, #3
 8007bb2:	66fc      	str	r4, [r7, #108]	; 0x6c
 8007bb4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8007bb6:	431c      	orrs	r4, r3
 8007bb8:	66fc      	str	r4, [r7, #108]	; 0x6c
 8007bba:	0003      	movs	r3, r0
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bc0:	623a      	str	r2, [r7, #32]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc6:	6a38      	ldr	r0, [r7, #32]
 8007bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bca:	0003      	movs	r3, r0
 8007bcc:	0f5b      	lsrs	r3, r3, #29
 8007bce:	000c      	movs	r4, r1
 8007bd0:	00e4      	lsls	r4, r4, #3
 8007bd2:	667c      	str	r4, [r7, #100]	; 0x64
 8007bd4:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8007bd6:	431c      	orrs	r4, r3
 8007bd8:	667c      	str	r4, [r7, #100]	; 0x64
 8007bda:	0003      	movs	r3, r0
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	663b      	str	r3, [r7, #96]	; 0x60
 8007be0:	0013      	movs	r3, r2
 8007be2:	3307      	adds	r3, #7
 8007be4:	08db      	lsrs	r3, r3, #3
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	466a      	mov	r2, sp
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	469d      	mov	sp, r3
 8007bee:	466b      	mov	r3, sp
 8007bf0:	3300      	adds	r3, #0
 8007bf2:	22a0      	movs	r2, #160	; 0xa0
 8007bf4:	18ba      	adds	r2, r7, r2
 8007bf6:	6013      	str	r3, [r2, #0]
					for(int i = 0 ; i < gs->size ; i++)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	22bc      	movs	r2, #188	; 0xbc
 8007bfc:	18ba      	adds	r2, r7, r2
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	e018      	b.n	8007c34 <HL_GoDown+0x2fc>
					{
						powers[i] = REACH_BOTTOM_POWER ;
 8007c02:	23a8      	movs	r3, #168	; 0xa8
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	23bc      	movs	r3, #188	; 0xbc
 8007c0a:	18fb      	adds	r3, r7, r3
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	18d2      	adds	r2, r2, r3
 8007c10:	2328      	movs	r3, #40	; 0x28
 8007c12:	7013      	strb	r3, [r2, #0]
						senses[i] = SENSE_UP ;
 8007c14:	23a0      	movs	r3, #160	; 0xa0
 8007c16:	18fb      	adds	r3, r7, r3
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	23bc      	movs	r3, #188	; 0xbc
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	18d2      	adds	r2, r2, r3
 8007c22:	2301      	movs	r3, #1
 8007c24:	7013      	strb	r3, [r2, #0]
					for(int i = 0 ; i < gs->size ; i++)
 8007c26:	23bc      	movs	r3, #188	; 0xbc
 8007c28:	18fb      	adds	r3, r7, r3
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	22bc      	movs	r2, #188	; 0xbc
 8007c30:	18ba      	adds	r2, r7, r2
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c36:	789b      	ldrb	r3, [r3, #2]
 8007c38:	001a      	movs	r2, r3
 8007c3a:	23bc      	movs	r3, #188	; 0xbc
 8007c3c:	18fb      	adds	r3, r7, r3
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4293      	cmp	r3, r2
 8007c42:	dbde      	blt.n	8007c02 <HL_GoDown+0x2ca>
					}
			MR_startBlindMotion(gs, powers, senses, ESCAMOTING_TIME) ;
 8007c44:	23a8      	movs	r3, #168	; 0xa8
 8007c46:	18fb      	adds	r3, r7, r3
 8007c48:	6819      	ldr	r1, [r3, #0]
 8007c4a:	23a0      	movs	r3, #160	; 0xa0
 8007c4c:	18fb      	adds	r3, r7, r3
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	4b43      	ldr	r3, [pc, #268]	; (8007d60 <HL_GoDown+0x428>)
 8007c52:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8007c54:	f004 fa4c 	bl	800c0f0 <MR_startBlindMotion>
			gs->HL_arg = 0 ;
 8007c58:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007c5a:	226a      	movs	r2, #106	; 0x6a
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	528b      	strh	r3, [r1, r2]
			gs->hl_token = 7 ;
 8007c60:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007c62:	2259      	movs	r2, #89	; 0x59
 8007c64:	2307      	movs	r3, #7
 8007c66:	548b      	strb	r3, [r1, r2]
 8007c68:	46b5      	mov	sp, r6
		}
		if(gs->hl_token == 7 && gs->MR_mode == MR_MODE_IDLE)
 8007c6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c6c:	2359      	movs	r3, #89	; 0x59
 8007c6e:	5cd3      	ldrb	r3, [r2, r3]
 8007c70:	2b07      	cmp	r3, #7
 8007c72:	d000      	beq.n	8007c76 <HL_GoDown+0x33e>
 8007c74:	e0a6      	b.n	8007dc4 <HL_GoDown+0x48c>
 8007c76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c78:	2365      	movs	r3, #101	; 0x65
 8007c7a:	5cd3      	ldrb	r3, [r2, r3]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d000      	beq.n	8007c82 <HL_GoDown+0x34a>
 8007c80:	e0a0      	b.n	8007dc4 <HL_GoDown+0x48c>
		{
 8007c82:	466b      	mov	r3, sp
 8007c84:	001c      	movs	r4, r3
			uint8_t powers[gs->size] ;
 8007c86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c88:	789a      	ldrb	r2, [r3, #2]
 8007c8a:	0013      	movs	r3, r2
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	219c      	movs	r1, #156	; 0x9c
 8007c90:	1879      	adds	r1, r7, r1
 8007c92:	600b      	str	r3, [r1, #0]
 8007c94:	61ba      	str	r2, [r7, #24]
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	69b8      	ldr	r0, [r7, #24]
 8007c9c:	69f9      	ldr	r1, [r7, #28]
 8007c9e:	0003      	movs	r3, r0
 8007ca0:	0f5b      	lsrs	r3, r3, #29
 8007ca2:	000d      	movs	r5, r1
 8007ca4:	00ed      	lsls	r5, r5, #3
 8007ca6:	65fd      	str	r5, [r7, #92]	; 0x5c
 8007ca8:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8007caa:	431d      	orrs	r5, r3
 8007cac:	65fd      	str	r5, [r7, #92]	; 0x5c
 8007cae:	0003      	movs	r3, r0
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cb4:	613a      	str	r2, [r7, #16]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	6938      	ldr	r0, [r7, #16]
 8007cbc:	6979      	ldr	r1, [r7, #20]
 8007cbe:	0003      	movs	r3, r0
 8007cc0:	0f5b      	lsrs	r3, r3, #29
 8007cc2:	000d      	movs	r5, r1
 8007cc4:	00ed      	lsls	r5, r5, #3
 8007cc6:	657d      	str	r5, [r7, #84]	; 0x54
 8007cc8:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8007cca:	431d      	orrs	r5, r3
 8007ccc:	657d      	str	r5, [r7, #84]	; 0x54
 8007cce:	0003      	movs	r3, r0
 8007cd0:	00db      	lsls	r3, r3, #3
 8007cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8007cd4:	0013      	movs	r3, r2
 8007cd6:	3307      	adds	r3, #7
 8007cd8:	08db      	lsrs	r3, r3, #3
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	466a      	mov	r2, sp
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	469d      	mov	sp, r3
 8007ce2:	466b      	mov	r3, sp
 8007ce4:	3300      	adds	r3, #0
 8007ce6:	2298      	movs	r2, #152	; 0x98
 8007ce8:	18ba      	adds	r2, r7, r2
 8007cea:	6013      	str	r3, [r2, #0]
			uint8_t senses[gs->size] ;
 8007cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cee:	789b      	ldrb	r3, [r3, #2]
 8007cf0:	001a      	movs	r2, r3
 8007cf2:	3a01      	subs	r2, #1
 8007cf4:	2194      	movs	r1, #148	; 0x94
 8007cf6:	1879      	adds	r1, r7, r1
 8007cf8:	600a      	str	r2, [r1, #0]
 8007cfa:	60bb      	str	r3, [r7, #8]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	60fa      	str	r2, [r7, #12]
 8007d00:	68b8      	ldr	r0, [r7, #8]
 8007d02:	68f9      	ldr	r1, [r7, #12]
 8007d04:	0002      	movs	r2, r0
 8007d06:	0f52      	lsrs	r2, r2, #29
 8007d08:	000d      	movs	r5, r1
 8007d0a:	00ed      	lsls	r5, r5, #3
 8007d0c:	64fd      	str	r5, [r7, #76]	; 0x4c
 8007d0e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8007d10:	4315      	orrs	r5, r2
 8007d12:	64fd      	str	r5, [r7, #76]	; 0x4c
 8007d14:	0002      	movs	r2, r0
 8007d16:	00d2      	lsls	r2, r2, #3
 8007d18:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	6838      	ldr	r0, [r7, #0]
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	0002      	movs	r2, r0
 8007d26:	0f52      	lsrs	r2, r2, #29
 8007d28:	000d      	movs	r5, r1
 8007d2a:	00ed      	lsls	r5, r5, #3
 8007d2c:	647d      	str	r5, [r7, #68]	; 0x44
 8007d2e:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8007d30:	4315      	orrs	r5, r2
 8007d32:	647d      	str	r5, [r7, #68]	; 0x44
 8007d34:	0002      	movs	r2, r0
 8007d36:	00d2      	lsls	r2, r2, #3
 8007d38:	643a      	str	r2, [r7, #64]	; 0x40
 8007d3a:	3307      	adds	r3, #7
 8007d3c:	08db      	lsrs	r3, r3, #3
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	466a      	mov	r2, sp
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	469d      	mov	sp, r3
 8007d46:	466b      	mov	r3, sp
 8007d48:	3300      	adds	r3, #0
 8007d4a:	2290      	movs	r2, #144	; 0x90
 8007d4c:	18ba      	adds	r2, r7, r2
 8007d4e:	6013      	str	r3, [r2, #0]
			for(int i = 0 ; i < gs->size ; i++)
 8007d50:	2300      	movs	r3, #0
 8007d52:	22c0      	movs	r2, #192	; 0xc0
 8007d54:	18ba      	adds	r2, r7, r2
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	e01d      	b.n	8007d96 <HL_GoDown+0x45e>
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	00000a68 	.word	0x00000a68
 8007d60:	0003d090 	.word	0x0003d090
			{
				powers[i] = REACH_BOTTOM_POWER ;
 8007d64:	2398      	movs	r3, #152	; 0x98
 8007d66:	18fb      	adds	r3, r7, r3
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	23c0      	movs	r3, #192	; 0xc0
 8007d6c:	18fb      	adds	r3, r7, r3
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	18d3      	adds	r3, r2, r3
 8007d72:	2228      	movs	r2, #40	; 0x28
 8007d74:	701a      	strb	r2, [r3, #0]
				senses[i] = SENSE_DOWN ;
 8007d76:	2390      	movs	r3, #144	; 0x90
 8007d78:	18fb      	adds	r3, r7, r3
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	23c0      	movs	r3, #192	; 0xc0
 8007d7e:	18fb      	adds	r3, r7, r3
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	18d3      	adds	r3, r2, r3
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
			for(int i = 0 ; i < gs->size ; i++)
 8007d88:	23c0      	movs	r3, #192	; 0xc0
 8007d8a:	18fb      	adds	r3, r7, r3
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	22c0      	movs	r2, #192	; 0xc0
 8007d92:	18ba      	adds	r2, r7, r2
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d98:	789b      	ldrb	r3, [r3, #2]
 8007d9a:	001a      	movs	r2, r3
 8007d9c:	23c0      	movs	r3, #192	; 0xc0
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4293      	cmp	r3, r2
 8007da4:	dbde      	blt.n	8007d64 <HL_GoDown+0x42c>
			}
			MR_startBlindMotion(gs, powers, senses, 2*ESCAMOTING_TIME) ;
 8007da6:	2398      	movs	r3, #152	; 0x98
 8007da8:	18fb      	adds	r3, r7, r3
 8007daa:	6819      	ldr	r1, [r3, #0]
 8007dac:	2390      	movs	r3, #144	; 0x90
 8007dae:	18fb      	adds	r3, r7, r3
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <HL_GoDown+0x51c>)
 8007db4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8007db6:	f004 f99b 	bl	800c0f0 <MR_startBlindMotion>
			gs->hl_token = 8 ;
 8007dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dbc:	2259      	movs	r2, #89	; 0x59
 8007dbe:	2108      	movs	r1, #8
 8007dc0:	5499      	strb	r1, [r3, r2]
 8007dc2:	46a5      	mov	sp, r4
		}
		if(gs->hl_token == 8 && gs->MR_mode == MR_MODE_IDLE)
 8007dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dc6:	2259      	movs	r2, #89	; 0x59
 8007dc8:	5c9b      	ldrb	r3, [r3, r2]
 8007dca:	2b08      	cmp	r3, #8
 8007dcc:	d13d      	bne.n	8007e4a <HL_GoDown+0x512>
 8007dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dd0:	2265      	movs	r2, #101	; 0x65
 8007dd2:	5c9b      	ldrb	r3, [r3, r2]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d138      	bne.n	8007e4a <HL_GoDown+0x512>
		{
			for(int i = 0 ; i < gs->size ; i++)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	22c4      	movs	r2, #196	; 0xc4
 8007ddc:	18ba      	adds	r2, r7, r2
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	e011      	b.n	8007e06 <HL_GoDown+0x4ce>
			{
				gs->vcs[i]->target_currTour = 0 ;
 8007de2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007de4:	23c4      	movs	r3, #196	; 0xc4
 8007de6:	18fb      	adds	r3, r7, r3
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	18d3      	adds	r3, r2, r3
 8007dee:	3304      	adds	r3, #4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	224a      	movs	r2, #74	; 0x4a
 8007df4:	2100      	movs	r1, #0
 8007df6:	5299      	strh	r1, [r3, r2]
			for(int i = 0 ; i < gs->size ; i++)
 8007df8:	23c4      	movs	r3, #196	; 0xc4
 8007dfa:	18fb      	adds	r3, r7, r3
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	22c4      	movs	r2, #196	; 0xc4
 8007e02:	18ba      	adds	r2, r7, r2
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e08:	789b      	ldrb	r3, [r3, #2]
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	23c4      	movs	r3, #196	; 0xc4
 8007e0e:	18fb      	adds	r3, r7, r3
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4293      	cmp	r3, r2
 8007e14:	dbe5      	blt.n	8007de2 <HL_GoDown+0x4aa>
			}
			uint8_t tx1[] = {COM_C} ;
 8007e16:	210c      	movs	r1, #12
 8007e18:	2378      	movs	r3, #120	; 0x78
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	185b      	adds	r3, r3, r1
 8007e1e:	2263      	movs	r2, #99	; 0x63
 8007e20:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&(gp->huarts[0]), tx1, 1, 1000) ;
 8007e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e24:	4a0c      	ldr	r2, [pc, #48]	; (8007e58 <HL_GoDown+0x520>)
 8007e26:	1898      	adds	r0, r3, r2
 8007e28:	23fa      	movs	r3, #250	; 0xfa
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	2278      	movs	r2, #120	; 0x78
 8007e2e:	4694      	mov	ip, r2
 8007e30:	44bc      	add	ip, r7
 8007e32:	4461      	add	r1, ip
 8007e34:	2201      	movs	r2, #1
 8007e36:	f7fc ff5b 	bl	8004cf0 <HAL_UART_Transmit>
			gs->hl_token = 0 ;
 8007e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e3c:	2259      	movs	r2, #89	; 0x59
 8007e3e:	2100      	movs	r1, #0
 8007e40:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_IDLE ;
 8007e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e44:	2266      	movs	r2, #102	; 0x66
 8007e46:	2100      	movs	r1, #0
 8007e48:	5499      	strb	r1, [r3, r2]
		}
}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b033      	add	sp, #204	; 0xcc
 8007e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	0007a120 	.word	0x0007a120
 8007e58:	00000a68 	.word	0x00000a68

08007e5c <HL_StartGetFromUp>:

void HL_StartGetFromUp(GroupSynchro* gs)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_CAPTOR)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d107      	bne.n	8007e7c <HL_StartGetFromUp+0x20>
		{
			gs->HL_mode = HL_MODE_GET_FROM_UP ;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2266      	movs	r2, #102	; 0x66
 8007e70:	210b      	movs	r1, #11
 8007e72:	5499      	strb	r1, [r3, r2]
			gs->hl_token = 1 ;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2259      	movs	r2, #89	; 0x59
 8007e78:	2101      	movs	r1, #1
 8007e7a:	5499      	strb	r1, [r3, r2]
		}
}
 8007e7c:	46c0      	nop			; (mov r8, r8)
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b002      	add	sp, #8
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HL_GetFromUp>:

void HL_GetFromUp(params* gp, GroupSynchro* gs)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
	if(gs->hl_token == 1 && gs->mode == MODE_IDLE)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2259      	movs	r2, #89	; 0x59
 8007e92:	5c9b      	ldrb	r3, [r3, r2]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d10f      	bne.n	8007eb8 <HL_GetFromUp+0x34>
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2264      	movs	r2, #100	; 0x64
 8007e9c:	5c9b      	ldrb	r3, [r3, r2]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <HL_GetFromUp+0x34>
	{
		MR_startTargetLeft(gp, gs, 344) ;
 8007ea2:	23ac      	movs	r3, #172	; 0xac
 8007ea4:	005a      	lsls	r2, r3, #1
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f003 fc48 	bl	800b740 <MR_startTargetLeft>
		gs->hl_token = 3 ;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2259      	movs	r2, #89	; 0x59
 8007eb4:	2103      	movs	r1, #3
 8007eb6:	5499      	strb	r1, [r3, r2]
	}

	if(gs->hl_token == 3 && gs->MR_mode == MR_MODE_IDLE && gs->HL_arg == 1)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2259      	movs	r2, #89	; 0x59
 8007ebc:	5c9b      	ldrb	r3, [r3, r2]
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d111      	bne.n	8007ee6 <HL_GetFromUp+0x62>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2265      	movs	r2, #101	; 0x65
 8007ec6:	5c9b      	ldrb	r3, [r3, r2]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10c      	bne.n	8007ee6 <HL_GetFromUp+0x62>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	226a      	movs	r2, #106	; 0x6a
 8007ed0:	5a9b      	ldrh	r3, [r3, r2]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d107      	bne.n	8007ee6 <HL_GetFromUp+0x62>
	{
		MR_startReachTop(gs) ;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f003 fec5 	bl	800bc68 <MR_startReachTop>
		gs->hl_token = 4 ;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2259      	movs	r2, #89	; 0x59
 8007ee2:	2104      	movs	r1, #4
 8007ee4:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 4 && gs->MR_mode == MR_MODE_IDLE)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2259      	movs	r2, #89	; 0x59
 8007eea:	5c9b      	ldrb	r3, [r3, r2]
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d116      	bne.n	8007f1e <HL_GetFromUp+0x9a>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2265      	movs	r2, #101	; 0x65
 8007ef4:	5c9b      	ldrb	r3, [r3, r2]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d111      	bne.n	8007f1e <HL_GetFromUp+0x9a>
	{
		uint8_t tx1[] = {COM_B} ;
 8007efa:	2108      	movs	r1, #8
 8007efc:	187b      	adds	r3, r7, r1
 8007efe:	2262      	movs	r2, #98	; 0x62
 8007f00:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&(gp->huarts[2]), tx1, 1, 1000) ;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	22b8      	movs	r2, #184	; 0xb8
 8007f06:	0112      	lsls	r2, r2, #4
 8007f08:	1898      	adds	r0, r3, r2
 8007f0a:	23fa      	movs	r3, #250	; 0xfa
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	1879      	adds	r1, r7, r1
 8007f10:	2201      	movs	r2, #1
 8007f12:	f7fc feed 	bl	8004cf0 <HAL_UART_Transmit>
		gs->hl_token = 5 ;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2259      	movs	r2, #89	; 0x59
 8007f1a:	2105      	movs	r1, #5
 8007f1c:	5499      	strb	r1, [r3, r2]

	}
	if(gs->hl_token == 5 && gs->HL_arg == 3)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2259      	movs	r2, #89	; 0x59
 8007f22:	5c9b      	ldrb	r3, [r3, r2]
 8007f24:	2b05      	cmp	r3, #5
 8007f26:	d112      	bne.n	8007f4e <HL_GetFromUp+0xca>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	226a      	movs	r2, #106	; 0x6a
 8007f2c:	5a9b      	ldrh	r3, [r3, r2]
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d10d      	bne.n	8007f4e <HL_GetFromUp+0xca>
	{
		GS_startTargeting(gs,HIGH_AVSPEED, 20) ;
 8007f32:	491d      	ldr	r1, [pc, #116]	; (8007fa8 <HL_GetFromUp+0x124>)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2214      	movs	r2, #20
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f7fe fe6f 	bl	8006c1c <GS_startTargeting>
		gs->HL_arg = 0 ;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	226a      	movs	r2, #106	; 0x6a
 8007f42:	2100      	movs	r1, #0
 8007f44:	5299      	strh	r1, [r3, r2]
		gs->hl_token = 6 ;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2259      	movs	r2, #89	; 0x59
 8007f4a:	2106      	movs	r1, #6
 8007f4c:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 6 && gs->mode == MODE_IDLE)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2259      	movs	r2, #89	; 0x59
 8007f52:	5c9b      	ldrb	r3, [r3, r2]
 8007f54:	2b06      	cmp	r3, #6
 8007f56:	d122      	bne.n	8007f9e <HL_GetFromUp+0x11a>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2264      	movs	r2, #100	; 0x64
 8007f5c:	5c9b      	ldrb	r3, [r3, r2]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d11d      	bne.n	8007f9e <HL_GetFromUp+0x11a>
	{
		for(int i = 0 ; i < gs->size ; i++)
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	e00c      	b.n	8007f82 <HL_GetFromUp+0xfe>
		{
			gs->vcs[i]->mot->trans.state = STATE_IN ;
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	18d3      	adds	r3, r2, r3
 8007f70:	3304      	adds	r3, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f76:	227d      	movs	r2, #125	; 0x7d
 8007f78:	2103      	movs	r1, #3
 8007f7a:	5499      	strb	r1, [r3, r2]
		for(int i = 0 ; i < gs->size ; i++)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	789b      	ldrb	r3, [r3, #2]
 8007f86:	001a      	movs	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	dbec      	blt.n	8007f68 <HL_GetFromUp+0xe4>
		}
		gs->HL_mode = HL_MODE_IDLE ;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2266      	movs	r2, #102	; 0x66
 8007f92:	2100      	movs	r1, #0
 8007f94:	5499      	strb	r1, [r3, r2]
		gs->hl_token = 0 ;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2259      	movs	r2, #89	; 0x59
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	5499      	strb	r1, [r3, r2]
	}



}
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	b004      	add	sp, #16
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	42be999a 	.word	0x42be999a

08007fac <HL_StartGoRight>:

//___________________________________________________________GO RIGHT________________________________________
void HL_StartGoRight(GroupSynchro* gs)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_MOTOR || gs->type == GROUP_TYPE_XMOTOR)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d003      	beq.n	8007fc4 <HL_StartGoRight+0x18>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d10b      	bne.n	8007fdc <HL_StartGoRight+0x30>
		{
			gs->hl_token = 1 ;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2259      	movs	r2, #89	; 0x59
 8007fc8:	2101      	movs	r1, #1
 8007fca:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GO_RIGHT ;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2266      	movs	r2, #102	; 0x66
 8007fd0:	2114      	movs	r1, #20
 8007fd2:	5499      	strb	r1, [r3, r2]
			gs->HL_arg = 0 ;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	226a      	movs	r2, #106	; 0x6a
 8007fd8:	2100      	movs	r1, #0
 8007fda:	5299      	strh	r1, [r3, r2]
		}
}
 8007fdc:	46c0      	nop			; (mov r8, r8)
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	b002      	add	sp, #8
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HL_GoRight>:
void HL_GoRight(params* gp, GroupSynchro* gs)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af02      	add	r7, sp, #8
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
	if(gs->hl_token == 1)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2259      	movs	r2, #89	; 0x59
 8007ff2:	5c9b      	ldrb	r3, [r3, r2]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d103      	bne.n	8008000 <HL_GoRight+0x1c>
//						//PREPARATION DE MOUVEMENT SI DEMARRE DEPUIS POSITION HAUTE
////						if(gp->gss[4].vcs[0]->target_currTour >= 300)
//							gs->hl_token = 10 ;
//					}
//					else
						gs->hl_token = 2;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2259      	movs	r2, #89	; 0x59
 8007ffc:	2102      	movs	r1, #2
 8007ffe:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 2)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2259      	movs	r2, #89	; 0x59
 8008004:	5c9b      	ldrb	r3, [r3, r2]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d119      	bne.n	800803e <HL_GoRight+0x5a>
	{
		MR_goHori(gs, 0,SENSE_RIGHT, LONG_DELAY, 0) ;
 800800a:	4a6f      	ldr	r2, [pc, #444]	; (80081c8 <HL_GoRight+0x1e4>)
 800800c:	6838      	ldr	r0, [r7, #0]
 800800e:	2300      	movs	r3, #0
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	0013      	movs	r3, r2
 8008014:	2201      	movs	r2, #1
 8008016:	2100      	movs	r1, #0
 8008018:	f003 ff9a 	bl	800bf50 <MR_goHori>
		uint8_t tx1[] = {COM_3} ;
 800801c:	2110      	movs	r1, #16
 800801e:	187b      	adds	r3, r7, r1
 8008020:	2233      	movs	r2, #51	; 0x33
 8008022:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&(gp->huarts[0]), tx1, 1, 1000) ;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a69      	ldr	r2, [pc, #420]	; (80081cc <HL_GoRight+0x1e8>)
 8008028:	1898      	adds	r0, r3, r2
 800802a:	23fa      	movs	r3, #250	; 0xfa
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	1879      	adds	r1, r7, r1
 8008030:	2201      	movs	r2, #1
 8008032:	f7fc fe5d 	bl	8004cf0 <HAL_UART_Transmit>
		gs->hl_token = 3 ;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2259      	movs	r2, #89	; 0x59
 800803a:	2103      	movs	r1, #3
 800803c:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 3 && gs->MR_mode == MR_MODE_IDLE)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2259      	movs	r2, #89	; 0x59
 8008042:	5c9b      	ldrb	r3, [r3, r2]
 8008044:	2b03      	cmp	r3, #3
 8008046:	d10c      	bne.n	8008062 <HL_GoRight+0x7e>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2265      	movs	r2, #101	; 0x65
 800804c:	5c9b      	ldrb	r3, [r3, r2]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d107      	bne.n	8008062 <HL_GoRight+0x7e>
	{
		gs->hl_token = 0 ;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2259      	movs	r2, #89	; 0x59
 8008056:	2100      	movs	r1, #0
 8008058:	5499      	strb	r1, [r3, r2]
		gs->HL_mode = HL_MODE_IDLE ;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2266      	movs	r2, #102	; 0x66
 800805e:	2100      	movs	r1, #0
 8008060:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 10)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2259      	movs	r2, #89	; 0x59
 8008066:	5c9b      	ldrb	r3, [r3, r2]
 8008068:	2b0a      	cmp	r3, #10
 800806a:	d10c      	bne.n	8008086 <HL_GoRight+0xa2>
	{
		MR_startTargetLeft(gp, &(gp->gss[4]), 23) ;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	33c1      	adds	r3, #193	; 0xc1
 8008070:	33ff      	adds	r3, #255	; 0xff
 8008072:	0019      	movs	r1, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2217      	movs	r2, #23
 8008078:	0018      	movs	r0, r3
 800807a:	f003 fb61 	bl	800b740 <MR_startTargetLeft>
		gs->hl_token = 11 ;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2259      	movs	r2, #89	; 0x59
 8008082:	210b      	movs	r1, #11
 8008084:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 11 && gp->gss[4].MR_mode == MR_MODE_IDLE)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2259      	movs	r2, #89	; 0x59
 800808a:	5c9b      	ldrb	r3, [r3, r2]
 800808c:	2b0b      	cmp	r3, #11
 800808e:	d110      	bne.n	80080b2 <HL_GoRight+0xce>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a4f      	ldr	r2, [pc, #316]	; (80081d0 <HL_GoRight+0x1ec>)
 8008094:	5c9b      	ldrb	r3, [r3, r2]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10b      	bne.n	80080b2 <HL_GoRight+0xce>
	{
		GS_startTargeting(&(gp->gss[4]), HIGH_AVSPEED, 55) ;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	33c1      	adds	r3, #193	; 0xc1
 800809e:	33ff      	adds	r3, #255	; 0xff
 80080a0:	494c      	ldr	r1, [pc, #304]	; (80081d4 <HL_GoRight+0x1f0>)
 80080a2:	2237      	movs	r2, #55	; 0x37
 80080a4:	0018      	movs	r0, r3
 80080a6:	f7fe fdb9 	bl	8006c1c <GS_startTargeting>
		gs->hl_token = 12 ;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2259      	movs	r2, #89	; 0x59
 80080ae:	210c      	movs	r1, #12
 80080b0:	5499      	strb	r1, [r3, r2]

	}
	if(gs->hl_token == 12 && gp->gss[4].mode == MODE_IDLE)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2259      	movs	r2, #89	; 0x59
 80080b6:	5c9b      	ldrb	r3, [r3, r2]
 80080b8:	2b0c      	cmp	r3, #12
 80080ba:	d116      	bne.n	80080ea <HL_GoRight+0x106>
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	2389      	movs	r3, #137	; 0x89
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	5cd3      	ldrb	r3, [r2, r3]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d110      	bne.n	80080ea <HL_GoRight+0x106>
	{
		MR_startGoIn(&(gp->gss[0])) ;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	0018      	movs	r0, r3
 80080cc:	f004 f8b3 	bl	800c236 <MR_startGoIn>
		MR_goHori(gs,0,SENSE_RIGHT, 2*RETRACT_TIME, 0) ;
 80080d0:	4a41      	ldr	r2, [pc, #260]	; (80081d8 <HL_GoRight+0x1f4>)
 80080d2:	6838      	ldr	r0, [r7, #0]
 80080d4:	2300      	movs	r3, #0
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	0013      	movs	r3, r2
 80080da:	2201      	movs	r2, #1
 80080dc:	2100      	movs	r1, #0
 80080de:	f003 ff37 	bl	800bf50 <MR_goHori>
		gs->hl_token = 13 ;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2259      	movs	r2, #89	; 0x59
 80080e6:	210d      	movs	r1, #13
 80080e8:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 13 && gp->gss[0].MR_mode == MR_MODE_IDLE)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2259      	movs	r2, #89	; 0x59
 80080ee:	5c9b      	ldrb	r3, [r3, r2]
 80080f0:	2b0d      	cmp	r3, #13
 80080f2:	d10e      	bne.n	8008112 <HL_GoRight+0x12e>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2265      	movs	r2, #101	; 0x65
 80080f8:	5c9b      	ldrb	r3, [r3, r2]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <HL_GoRight+0x12e>
	{
		MR_startReachBottom(&(gp->gss[4])) ;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	33c1      	adds	r3, #193	; 0xc1
 8008102:	33ff      	adds	r3, #255	; 0xff
 8008104:	0018      	movs	r0, r3
 8008106:	f003 fe69 	bl	800bddc <MR_startReachBottom>
		gs->hl_token = 14 ;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2259      	movs	r2, #89	; 0x59
 800810e:	210e      	movs	r1, #14
 8008110:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 14 && gp->gss[4].MR_mode == MODE_IDLE)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2259      	movs	r2, #89	; 0x59
 8008116:	5c9b      	ldrb	r3, [r3, r2]
 8008118:	2b0e      	cmp	r3, #14
 800811a:	d13d      	bne.n	8008198 <HL_GoRight+0x1b4>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a2c      	ldr	r2, [pc, #176]	; (80081d0 <HL_GoRight+0x1ec>)
 8008120:	5c9b      	ldrb	r3, [r3, r2]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d138      	bne.n	8008198 <HL_GoRight+0x1b4>
	{
		for(int i = 0 ; i < gp->gss[4].size ; i++)
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	e00c      	b.n	8008146 <HL_GoRight+0x162>
		{
			gp->gss[4].vcs[i]->target_currTour = 0 ;
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	3370      	adds	r3, #112	; 0x70
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	18d3      	adds	r3, r2, r3
 8008136:	3304      	adds	r3, #4
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	224a      	movs	r2, #74	; 0x4a
 800813c:	2100      	movs	r1, #0
 800813e:	5299      	strh	r1, [r3, r2]
		for(int i = 0 ; i < gp->gss[4].size ; i++)
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	3301      	adds	r3, #1
 8008144:	617b      	str	r3, [r7, #20]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	23e1      	movs	r3, #225	; 0xe1
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	5cd3      	ldrb	r3, [r2, r3]
 800814e:	001a      	movs	r2, r3
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	4293      	cmp	r3, r2
 8008154:	dbea      	blt.n	800812c <HL_GoRight+0x148>
		}
		uint8_t ids[] = {3} ;
 8008156:	210c      	movs	r1, #12
 8008158:	187b      	adds	r3, r7, r1
 800815a:	2203      	movs	r2, #3
 800815c:	701a      	strb	r2, [r3, #0]
		addGroup(gp, GROUP_TYPE_CAPTOR, 7, ids, 1) ;
 800815e:	187a      	adds	r2, r7, r1
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	2301      	movs	r3, #1
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	0013      	movs	r3, r2
 8008168:	2207      	movs	r2, #7
 800816a:	2101      	movs	r1, #1
 800816c:	f7fe fbac 	bl	80068c8 <addGroup>
		GS_startTargeting(&(gp->gss[7]), LOW_AVSPEED, gp->gss[7].vcs[0]->target_currTour + 2) ;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	22c4      	movs	r2, #196	; 0xc4
 8008174:	0092      	lsls	r2, r2, #2
 8008176:	1898      	adds	r0, r3, r2
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	23c5      	movs	r3, #197	; 0xc5
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	58d3      	ldr	r3, [r2, r3]
 8008180:	224a      	movs	r2, #74	; 0x4a
 8008182:	5a9b      	ldrh	r3, [r3, r2]
 8008184:	3302      	adds	r3, #2
 8008186:	b29b      	uxth	r3, r3
 8008188:	4914      	ldr	r1, [pc, #80]	; (80081dc <HL_GoRight+0x1f8>)
 800818a:	001a      	movs	r2, r3
 800818c:	f7fe fd46 	bl	8006c1c <GS_startTargeting>
		gs->hl_token = 15 ;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2259      	movs	r2, #89	; 0x59
 8008194:	210f      	movs	r1, #15
 8008196:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 15 && gp->gss[7].mode == MODE_IDLE)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2259      	movs	r2, #89	; 0x59
 800819c:	5c9b      	ldrb	r3, [r3, r2]
 800819e:	2b0f      	cmp	r3, #15
 80081a0:	d10e      	bne.n	80081c0 <HL_GoRight+0x1dc>
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	23dd      	movs	r3, #221	; 0xdd
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	5cd3      	ldrb	r3, [r2, r3]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d108      	bne.n	80081c0 <HL_GoRight+0x1dc>
	{
		eraseGroup(gp, 7) ;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2107      	movs	r1, #7
 80081b2:	0018      	movs	r0, r3
 80081b4:	f7fe fac6 	bl	8006744 <eraseGroup>
		gs->hl_token = 2 ;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2259      	movs	r2, #89	; 0x59
 80081bc:	2102      	movs	r1, #2
 80081be:	5499      	strb	r1, [r3, r2]
	}
}
 80081c0:	46c0      	nop			; (mov r8, r8)
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b006      	add	sp, #24
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	00989680 	.word	0x00989680
 80081cc:	00000a68 	.word	0x00000a68
 80081d0:	00000225 	.word	0x00000225
 80081d4:	42be999a 	.word	0x42be999a
 80081d8:	0007a120 	.word	0x0007a120
 80081dc:	41f00000 	.word	0x41f00000

080081e0 <HL_StartGetFromLeft>:

void HL_StartGetFromLeft(GroupSynchro* gs)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_MOTOR || gs->type == GROUP_TYPE_XMOTOR)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d003      	beq.n	80081f8 <HL_StartGetFromLeft+0x18>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d10b      	bne.n	8008210 <HL_StartGetFromLeft+0x30>
		{
			gs->hl_token = 1 ;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2259      	movs	r2, #89	; 0x59
 80081fc:	2101      	movs	r1, #1
 80081fe:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GET_FROM_LEFT ;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2266      	movs	r2, #102	; 0x66
 8008204:	211f      	movs	r1, #31
 8008206:	5499      	strb	r1, [r3, r2]
			gs->HL_arg = 0 ;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	226a      	movs	r2, #106	; 0x6a
 800820c:	2100      	movs	r1, #0
 800820e:	5299      	strh	r1, [r3, r2]
		}

}
 8008210:	46c0      	nop			; (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	b002      	add	sp, #8
 8008216:	bd80      	pop	{r7, pc}

08008218 <HL_GetFromLeft>:

void HL_GetFromLeft(params* gp, GroupSynchro* gs)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af02      	add	r7, sp, #8
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
	if(gs->hl_token == 1)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2259      	movs	r2, #89	; 0x59
 8008226:	5c9b      	ldrb	r3, [r3, r2]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d10c      	bne.n	8008246 <HL_GetFromLeft+0x2e>
	{
		MR_goHori(gs, 0, SENSE_RIGHT, LONG_DELAY, 0) ;
 800822c:	4a11      	ldr	r2, [pc, #68]	; (8008274 <HL_GetFromLeft+0x5c>)
 800822e:	6838      	ldr	r0, [r7, #0]
 8008230:	2300      	movs	r3, #0
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	0013      	movs	r3, r2
 8008236:	2201      	movs	r2, #1
 8008238:	2100      	movs	r1, #0
 800823a:	f003 fe89 	bl	800bf50 <MR_goHori>
		gs->hl_token = 2 ;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2259      	movs	r2, #89	; 0x59
 8008242:	2102      	movs	r1, #2
 8008244:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 2 && gs->MR_mode == MR_MODE_IDLE)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2259      	movs	r2, #89	; 0x59
 800824a:	5c9b      	ldrb	r3, [r3, r2]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d10c      	bne.n	800826a <HL_GetFromLeft+0x52>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	2265      	movs	r2, #101	; 0x65
 8008254:	5c9b      	ldrb	r3, [r3, r2]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d107      	bne.n	800826a <HL_GetFromLeft+0x52>
	{
		gs->hl_token = 0 ;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2259      	movs	r2, #89	; 0x59
 800825e:	2100      	movs	r1, #0
 8008260:	5499      	strb	r1, [r3, r2]
		gs->HL_mode = HL_MODE_IDLE ;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2266      	movs	r2, #102	; 0x66
 8008266:	2100      	movs	r1, #0
 8008268:	5499      	strb	r1, [r3, r2]
	}
}
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	46bd      	mov	sp, r7
 800826e:	b002      	add	sp, #8
 8008270:	bd80      	pop	{r7, pc}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	00989680 	.word	0x00989680

08008278 <HL_StartGoLeft>:


//___________________________________________________________GO LEFT________________________________________
void HL_StartGoLeft(GroupSynchro* gs)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_MOTOR || gs->type == GROUP_TYPE_XMOTOR)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d003      	beq.n	8008290 <HL_StartGoLeft+0x18>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	2b03      	cmp	r3, #3
 800828e:	d10b      	bne.n	80082a8 <HL_StartGoLeft+0x30>
		{
			gs->hl_token = 1 ;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2259      	movs	r2, #89	; 0x59
 8008294:	2101      	movs	r1, #1
 8008296:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GO_LEFT ;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2266      	movs	r2, #102	; 0x66
 800829c:	2115      	movs	r1, #21
 800829e:	5499      	strb	r1, [r3, r2]
			gs->HL_arg = 0 ;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	226a      	movs	r2, #106	; 0x6a
 80082a4:	2100      	movs	r1, #0
 80082a6:	5299      	strh	r1, [r3, r2]
		}
}
 80082a8:	46c0      	nop			; (mov r8, r8)
 80082aa:	46bd      	mov	sp, r7
 80082ac:	b002      	add	sp, #8
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HL_GoLeft>:
void HL_GoLeft(params* gp, GroupSynchro* gs)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08a      	sub	sp, #40	; 0x28
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
	if(gs->hl_token == 1)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2259      	movs	r2, #89	; 0x59
 80082be:	5c9b      	ldrb	r3, [r3, r2]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d120      	bne.n	8008306 <HL_GoLeft+0x56>
//				//PREPARATION DE MOUVEMENT SI DEMARRE DEPUIS POSITION HAUTE
//				if(gp->gss[4].vcs[0]->target_currTour >= 300)
//					gs->hl_token = 10 ;
//			}
//			else
		uint8_t ids[] = {1} ;
 80082c4:	2114      	movs	r1, #20
 80082c6:	187b      	adds	r3, r7, r1
 80082c8:	2201      	movs	r2, #1
 80082ca:	701a      	strb	r2, [r3, #0]
		addGroup(gp, GROUP_TYPE_CAPTOR, 5, ids, 1) ;
 80082cc:	187a      	adds	r2, r7, r1
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	2301      	movs	r3, #1
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	0013      	movs	r3, r2
 80082d6:	2205      	movs	r2, #5
 80082d8:	2101      	movs	r1, #1
 80082da:	f7fe faf5 	bl	80068c8 <addGroup>
		GS_startTargeting(&(gp->gss[5]), LOW_AVSPEED, gp->gss[5].vcs[0]->target_currTour + 2) ;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	228c      	movs	r2, #140	; 0x8c
 80082e2:	0092      	lsls	r2, r2, #2
 80082e4:	1898      	adds	r0, r3, r2
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	238d      	movs	r3, #141	; 0x8d
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	58d3      	ldr	r3, [r2, r3]
 80082ee:	224a      	movs	r2, #74	; 0x4a
 80082f0:	5a9b      	ldrh	r3, [r3, r2]
 80082f2:	3302      	adds	r3, #2
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	4985      	ldr	r1, [pc, #532]	; (800850c <HL_GoLeft+0x25c>)
 80082f8:	001a      	movs	r2, r3
 80082fa:	f7fe fc8f 	bl	8006c1c <GS_startTargeting>
		gs->hl_token = 2;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2259      	movs	r2, #89	; 0x59
 8008302:	2102      	movs	r1, #2
 8008304:	5499      	strb	r1, [r3, r2]
		}
	// DEMARRAGE DU MOUVEMENT
		if(gs->hl_token == 2 && gp->gss[5].mode == MODE_IDLE)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2259      	movs	r2, #89	; 0x59
 800830a:	5c9b      	ldrb	r3, [r3, r2]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d124      	bne.n	800835a <HL_GoLeft+0xaa>
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	23a5      	movs	r3, #165	; 0xa5
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	5cd3      	ldrb	r3, [r2, r3]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d11e      	bne.n	800835a <HL_GoLeft+0xaa>
		{
			eraseGroup(gp, 5) ;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2105      	movs	r1, #5
 8008320:	0018      	movs	r0, r3
 8008322:	f7fe fa0f 	bl	8006744 <eraseGroup>
			MR_goHori(gs,0, SENSE_LEFT, LONG_DELAY, 0) ;
 8008326:	4a7a      	ldr	r2, [pc, #488]	; (8008510 <HL_GoLeft+0x260>)
 8008328:	6838      	ldr	r0, [r7, #0]
 800832a:	2300      	movs	r3, #0
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	0013      	movs	r3, r2
 8008330:	2200      	movs	r2, #0
 8008332:	2100      	movs	r1, #0
 8008334:	f003 fe0c 	bl	800bf50 <MR_goHori>
			uint8_t tx1[] = {COM_4} ;
 8008338:	2110      	movs	r1, #16
 800833a:	187b      	adds	r3, r7, r1
 800833c:	2234      	movs	r2, #52	; 0x34
 800833e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&(gp->huarts[1]), tx1, 1, 1000) ;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a74      	ldr	r2, [pc, #464]	; (8008514 <HL_GoLeft+0x264>)
 8008344:	1898      	adds	r0, r3, r2
 8008346:	23fa      	movs	r3, #250	; 0xfa
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	1879      	adds	r1, r7, r1
 800834c:	2201      	movs	r2, #1
 800834e:	f7fc fccf 	bl	8004cf0 <HAL_UART_Transmit>
			gs->hl_token = 3 ;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2259      	movs	r2, #89	; 0x59
 8008356:	2103      	movs	r1, #3
 8008358:	5499      	strb	r1, [r3, r2]
		}
		if(gs->hl_token == 3 && gs->MR_mode == MR_MODE_IDLE)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2259      	movs	r2, #89	; 0x59
 800835e:	5c9b      	ldrb	r3, [r3, r2]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d10c      	bne.n	800837e <HL_GoLeft+0xce>
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2265      	movs	r2, #101	; 0x65
 8008368:	5c9b      	ldrb	r3, [r3, r2]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d107      	bne.n	800837e <HL_GoLeft+0xce>
		{
			gs->hl_token = 0 ;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2259      	movs	r2, #89	; 0x59
 8008372:	2100      	movs	r1, #0
 8008374:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_IDLE ;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2266      	movs	r2, #102	; 0x66
 800837a:	2100      	movs	r1, #0
 800837c:	5499      	strb	r1, [r3, r2]
		}

		//REMISE EN PLACE DEPUIS TAQUET PRIS EN POSITION HAUTE ET TRANSLATEUR MAL SORTIS
		if(gs->hl_token == 10)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2259      	movs	r2, #89	; 0x59
 8008382:	5c9b      	ldrb	r3, [r3, r2]
 8008384:	2b0a      	cmp	r3, #10
 8008386:	d109      	bne.n	800839c <HL_GoLeft+0xec>
		{
			MR_startReachTop(&(gp->gss[4])) ;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	33c1      	adds	r3, #193	; 0xc1
 800838c:	33ff      	adds	r3, #255	; 0xff
 800838e:	0018      	movs	r0, r3
 8008390:	f003 fc6a 	bl	800bc68 <MR_startReachTop>
			gs->hl_token = 11 ;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2259      	movs	r2, #89	; 0x59
 8008398:	210b      	movs	r1, #11
 800839a:	5499      	strb	r1, [r3, r2]
		}

		if(gs->hl_token == 11 && gp->gss[4].MR_mode == MR_MODE_IDLE)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2259      	movs	r2, #89	; 0x59
 80083a0:	5c9b      	ldrb	r3, [r3, r2]
 80083a2:	2b0b      	cmp	r3, #11
 80083a4:	d111      	bne.n	80083ca <HL_GoLeft+0x11a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a5b      	ldr	r2, [pc, #364]	; (8008518 <HL_GoLeft+0x268>)
 80083aa:	5c9b      	ldrb	r3, [r3, r2]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10c      	bne.n	80083ca <HL_GoLeft+0x11a>
		{
			MR_goHori(gs, 0,SENSE_LEFT, RETRACT_TIME*2, 0) ;
 80083b0:	4a5a      	ldr	r2, [pc, #360]	; (800851c <HL_GoLeft+0x26c>)
 80083b2:	6838      	ldr	r0, [r7, #0]
 80083b4:	2300      	movs	r3, #0
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	0013      	movs	r3, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	2100      	movs	r1, #0
 80083be:	f003 fdc7 	bl	800bf50 <MR_goHori>
			gs->hl_token = 12 ;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2259      	movs	r2, #89	; 0x59
 80083c6:	210c      	movs	r1, #12
 80083c8:	5499      	strb	r1, [r3, r2]
		}
		//REMISE EN PLACE DEPUIS TAQUET PRIS EN POSITION HAUTE ET TRANSLATEUR BIEN SORTIS
		if(gs->hl_token == 12 && gs->MR_mode == MR_MODE_IDLE)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2259      	movs	r2, #89	; 0x59
 80083ce:	5c9b      	ldrb	r3, [r3, r2]
 80083d0:	2b0c      	cmp	r3, #12
 80083d2:	d112      	bne.n	80083fa <HL_GoLeft+0x14a>
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2265      	movs	r2, #101	; 0x65
 80083d8:	5c9b      	ldrb	r3, [r3, r2]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10d      	bne.n	80083fa <HL_GoLeft+0x14a>
		{
			GS_startTargeting(&(gp->gss[4]),HIGH_AVSPEED, TOP_LANDING_LEVEL) ;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	33c1      	adds	r3, #193	; 0xc1
 80083e2:	33ff      	adds	r3, #255	; 0xff
 80083e4:	0018      	movs	r0, r3
 80083e6:	23a5      	movs	r3, #165	; 0xa5
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	494d      	ldr	r1, [pc, #308]	; (8008520 <HL_GoLeft+0x270>)
 80083ec:	001a      	movs	r2, r3
 80083ee:	f7fe fc15 	bl	8006c1c <GS_startTargeting>
			gs->hl_token = 13 ;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2259      	movs	r2, #89	; 0x59
 80083f6:	210d      	movs	r1, #13
 80083f8:	5499      	strb	r1, [r3, r2]
		}
		if(gs->hl_token == 13 && gp->gss[4].mode == MODE_IDLE)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2259      	movs	r2, #89	; 0x59
 80083fe:	5c9b      	ldrb	r3, [r3, r2]
 8008400:	2b0d      	cmp	r3, #13
 8008402:	d113      	bne.n	800842c <HL_GoLeft+0x17c>
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	2389      	movs	r3, #137	; 0x89
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	5cd3      	ldrb	r3, [r2, r3]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10d      	bne.n	800842c <HL_GoLeft+0x17c>
		{
			GS_startTargeting(&(gp->gss[4]),LOW_AVSPEED, TOP_PASSAGE_LEVEL) ;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	33c1      	adds	r3, #193	; 0xc1
 8008414:	33ff      	adds	r3, #255	; 0xff
 8008416:	0018      	movs	r0, r3
 8008418:	237c      	movs	r3, #124	; 0x7c
 800841a:	33ff      	adds	r3, #255	; 0xff
 800841c:	493b      	ldr	r1, [pc, #236]	; (800850c <HL_GoLeft+0x25c>)
 800841e:	001a      	movs	r2, r3
 8008420:	f7fe fbfc 	bl	8006c1c <GS_startTargeting>
			gs->hl_token = 14 ;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2259      	movs	r2, #89	; 0x59
 8008428:	210e      	movs	r1, #14
 800842a:	5499      	strb	r1, [r3, r2]
		}
			//---> LIBÉRATION DU PASSAGE PERPENDICULAIRE
		if(gs->hl_token == 14 && gp->gss[4].mode == MODE_IDLE)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2259      	movs	r2, #89	; 0x59
 8008430:	5c9b      	ldrb	r3, [r3, r2]
 8008432:	2b0e      	cmp	r3, #14
 8008434:	d120      	bne.n	8008478 <HL_GoLeft+0x1c8>
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	2389      	movs	r3, #137	; 0x89
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	5cd3      	ldrb	r3, [r2, r3]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d11a      	bne.n	8008478 <HL_GoLeft+0x1c8>
		{
			uint8_t ids[] = {1} ;
 8008442:	210c      	movs	r1, #12
 8008444:	187b      	adds	r3, r7, r1
 8008446:	2201      	movs	r2, #1
 8008448:	701a      	strb	r2, [r3, #0]
			addGroup(gp, GROUP_TYPE_CAPTOR, 5, ids, 1) ;
 800844a:	187a      	adds	r2, r7, r1
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	2301      	movs	r3, #1
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	0013      	movs	r3, r2
 8008454:	2205      	movs	r2, #5
 8008456:	2101      	movs	r1, #1
 8008458:	f7fe fa36 	bl	80068c8 <addGroup>
			GS_startTargeting(&(gp->gss[5]), LOW_AVSPEED, TOP_PASSAGE_LEVEL + 2) ;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	228c      	movs	r2, #140	; 0x8c
 8008460:	0092      	lsls	r2, r2, #2
 8008462:	1898      	adds	r0, r3, r2
 8008464:	237e      	movs	r3, #126	; 0x7e
 8008466:	33ff      	adds	r3, #255	; 0xff
 8008468:	4928      	ldr	r1, [pc, #160]	; (800850c <HL_GoLeft+0x25c>)
 800846a:	001a      	movs	r2, r3
 800846c:	f7fe fbd6 	bl	8006c1c <GS_startTargeting>
			gs->hl_token = 15 ;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2259      	movs	r2, #89	; 0x59
 8008474:	210f      	movs	r1, #15
 8008476:	5499      	strb	r1, [r3, r2]
		}
		if(gs->hl_token == 15 && gp->gss[5].mode == MODE_IDLE)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2259      	movs	r2, #89	; 0x59
 800847c:	5c9b      	ldrb	r3, [r3, r2]
 800847e:	2b0f      	cmp	r3, #15
 8008480:	d13f      	bne.n	8008502 <HL_GoLeft+0x252>
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	23a5      	movs	r3, #165	; 0xa5
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	5cd3      	ldrb	r3, [r2, r3]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d139      	bne.n	8008502 <HL_GoLeft+0x252>
		{
			for(int i = 0 ; i < gp->gss[4].size ; i++)
 800848e:	2300      	movs	r3, #0
 8008490:	61fb      	str	r3, [r7, #28]
 8008492:	e00d      	b.n	80084b0 <HL_GoLeft+0x200>
			{
				gp->gss[4].vcs[i]->mot->trans.state = STATE_LEFT ;
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	3370      	adds	r3, #112	; 0x70
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	18d3      	adds	r3, r2, r3
 800849e:	3304      	adds	r3, #4
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a4:	227d      	movs	r2, #125	; 0x7d
 80084a6:	2104      	movs	r1, #4
 80084a8:	5499      	strb	r1, [r3, r2]
			for(int i = 0 ; i < gp->gss[4].size ; i++)
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	3301      	adds	r3, #1
 80084ae:	61fb      	str	r3, [r7, #28]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	23e1      	movs	r3, #225	; 0xe1
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	5cd3      	ldrb	r3, [r2, r3]
 80084b8:	001a      	movs	r2, r3
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	4293      	cmp	r3, r2
 80084be:	dbe9      	blt.n	8008494 <HL_GoLeft+0x1e4>
			}
			for(int i = 0 ; i < gp->gss[5].size ; i++)
 80084c0:	2300      	movs	r3, #0
 80084c2:	61bb      	str	r3, [r7, #24]
 80084c4:	e00d      	b.n	80084e2 <HL_GoLeft+0x232>
			{
				gp->gss[5].vcs[i]->mot->trans.state = STATE_RIGHT;
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	338c      	adds	r3, #140	; 0x8c
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	18d3      	adds	r3, r2, r3
 80084d0:	3304      	adds	r3, #4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d6:	227d      	movs	r2, #125	; 0x7d
 80084d8:	2105      	movs	r1, #5
 80084da:	5499      	strb	r1, [r3, r2]
			for(int i = 0 ; i < gp->gss[5].size ; i++)
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	3301      	adds	r3, #1
 80084e0:	61bb      	str	r3, [r7, #24]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a0f      	ldr	r2, [pc, #60]	; (8008524 <HL_GoLeft+0x274>)
 80084e6:	5c9b      	ldrb	r3, [r3, r2]
 80084e8:	001a      	movs	r2, r3
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	4293      	cmp	r3, r2
 80084ee:	dbea      	blt.n	80084c6 <HL_GoLeft+0x216>
			}
			eraseGroup(gp, 5) ;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2105      	movs	r1, #5
 80084f4:	0018      	movs	r0, r3
 80084f6:	f7fe f925 	bl	8006744 <eraseGroup>
			gs->hl_token = 2 ;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2259      	movs	r2, #89	; 0x59
 80084fe:	2102      	movs	r1, #2
 8008500:	5499      	strb	r1, [r3, r2]
		}
}
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	46bd      	mov	sp, r7
 8008506:	b008      	add	sp, #32
 8008508:	bd80      	pop	{r7, pc}
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	41f00000 	.word	0x41f00000
 8008510:	00989680 	.word	0x00989680
 8008514:	00000af4 	.word	0x00000af4
 8008518:	00000225 	.word	0x00000225
 800851c:	0007a120 	.word	0x0007a120
 8008520:	42be999a 	.word	0x42be999a
 8008524:	00000232 	.word	0x00000232

08008528 <HL_StartGetFromRight>:

void HL_StartGetFromRight(GroupSynchro* gs)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_MOTOR || gs->type == GROUP_TYPE_XMOTOR)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b02      	cmp	r3, #2
 8008536:	d003      	beq.n	8008540 <HL_StartGetFromRight+0x18>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b03      	cmp	r3, #3
 800853e:	d10b      	bne.n	8008558 <HL_StartGetFromRight+0x30>
		{
			gs->hl_token = 1 ;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2259      	movs	r2, #89	; 0x59
 8008544:	2101      	movs	r1, #1
 8008546:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GET_FROM_RIGHT ;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2266      	movs	r2, #102	; 0x66
 800854c:	211e      	movs	r1, #30
 800854e:	5499      	strb	r1, [r3, r2]
			gs->HL_arg = 0 ;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	226a      	movs	r2, #106	; 0x6a
 8008554:	2100      	movs	r1, #0
 8008556:	5299      	strh	r1, [r3, r2]
		}
}
 8008558:	46c0      	nop			; (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	b002      	add	sp, #8
 800855e:	bd80      	pop	{r7, pc}

08008560 <HL_GetFromRight>:

void HL_GetFromRight(params* gp, GroupSynchro* gs)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af02      	add	r7, sp, #8
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
		if(gs->hl_token == 1)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2259      	movs	r2, #89	; 0x59
 800856e:	5c9b      	ldrb	r3, [r3, r2]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d10c      	bne.n	800858e <HL_GetFromRight+0x2e>
		{
			MR_goHori(gs,0, SENSE_LEFT, LONG_DELAY, 0) ;
 8008574:	4a11      	ldr	r2, [pc, #68]	; (80085bc <HL_GetFromRight+0x5c>)
 8008576:	6838      	ldr	r0, [r7, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	0013      	movs	r3, r2
 800857e:	2200      	movs	r2, #0
 8008580:	2100      	movs	r1, #0
 8008582:	f003 fce5 	bl	800bf50 <MR_goHori>
			gs->hl_token = 2 ;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2259      	movs	r2, #89	; 0x59
 800858a:	2102      	movs	r1, #2
 800858c:	5499      	strb	r1, [r3, r2]
		}
		if(gs->hl_token == 2 && gs->MR_mode == MR_MODE_IDLE)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2259      	movs	r2, #89	; 0x59
 8008592:	5c9b      	ldrb	r3, [r3, r2]
 8008594:	2b02      	cmp	r3, #2
 8008596:	d10c      	bne.n	80085b2 <HL_GetFromRight+0x52>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2265      	movs	r2, #101	; 0x65
 800859c:	5c9b      	ldrb	r3, [r3, r2]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d107      	bne.n	80085b2 <HL_GetFromRight+0x52>
		{
			gs->hl_token = 0 ;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2259      	movs	r2, #89	; 0x59
 80085a6:	2100      	movs	r1, #0
 80085a8:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_IDLE ;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2266      	movs	r2, #102	; 0x66
 80085ae:	2100      	movs	r1, #0
 80085b0:	5499      	strb	r1, [r3, r2]
		}
}
 80085b2:	46c0      	nop			; (mov r8, r8)
 80085b4:	46bd      	mov	sp, r7
 80085b6:	b002      	add	sp, #8
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	46c0      	nop			; (mov r8, r8)
 80085bc:	00989680 	.word	0x00989680

080085c0 <HL_StartGoForward>:
//_______________________________________________________GO FORWARD__________________________________________
void HL_StartGoForward(GroupSynchro* gs)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_MOTOR || gs->type == GROUP_TYPE_XMOTOR)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d003      	beq.n	80085d8 <HL_StartGoForward+0x18>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d10b      	bne.n	80085f0 <HL_StartGoForward+0x30>
		{
			gs->hl_token = 1 ;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2259      	movs	r2, #89	; 0x59
 80085dc:	2101      	movs	r1, #1
 80085de:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GO_FORWARD ;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2266      	movs	r2, #102	; 0x66
 80085e4:	2116      	movs	r1, #22
 80085e6:	5499      	strb	r1, [r3, r2]
			gs->HL_arg = 0 ;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	226a      	movs	r2, #106	; 0x6a
 80085ec:	2100      	movs	r1, #0
 80085ee:	5299      	strh	r1, [r3, r2]
		}
}
 80085f0:	46c0      	nop			; (mov r8, r8)
 80085f2:	46bd      	mov	sp, r7
 80085f4:	b002      	add	sp, #8
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HL_GoForward>:

void HL_GoForward(params* gp, GroupSynchro* gs)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af02      	add	r7, sp, #8
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
	if(gs->hl_token == 1)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2259      	movs	r2, #89	; 0x59
 8008606:	5c9b      	ldrb	r3, [r3, r2]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d110      	bne.n	800862e <HL_GoForward+0x36>
	{
		uint8_t tx1[] = {COM_8} ;
 800860c:	210c      	movs	r1, #12
 800860e:	187b      	adds	r3, r7, r1
 8008610:	2238      	movs	r2, #56	; 0x38
 8008612:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&(gp->huarts[1]), tx1, 1, 1000) ;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a37      	ldr	r2, [pc, #220]	; (80086f4 <HL_GoForward+0xfc>)
 8008618:	1898      	adds	r0, r3, r2
 800861a:	23fa      	movs	r3, #250	; 0xfa
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	1879      	adds	r1, r7, r1
 8008620:	2201      	movs	r2, #1
 8008622:	f7fc fb65 	bl	8004cf0 <HAL_UART_Transmit>
		gs->hl_token = 2 ;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2259      	movs	r2, #89	; 0x59
 800862a:	2102      	movs	r1, #2
 800862c:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 2 && gs->HL_arg == 1)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2259      	movs	r2, #89	; 0x59
 8008632:	5c9b      	ldrb	r3, [r3, r2]
 8008634:	2b02      	cmp	r3, #2
 8008636:	d115      	bne.n	8008664 <HL_GoForward+0x6c>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	226a      	movs	r2, #106	; 0x6a
 800863c:	5a9b      	ldrh	r3, [r3, r2]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d110      	bne.n	8008664 <HL_GoForward+0x6c>
	{
		gs->HL_arg = 0 ;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	226a      	movs	r2, #106	; 0x6a
 8008646:	2100      	movs	r1, #0
 8008648:	5299      	strh	r1, [r3, r2]
		MR_goHori(gs, 10, SENSE_FORWARD, ACCEL_DELAY, 0) ;
 800864a:	4a2b      	ldr	r2, [pc, #172]	; (80086f8 <HL_GoForward+0x100>)
 800864c:	6838      	ldr	r0, [r7, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	0013      	movs	r3, r2
 8008654:	2200      	movs	r2, #0
 8008656:	210a      	movs	r1, #10
 8008658:	f003 fc7a 	bl	800bf50 <MR_goHori>
		gs->hl_token = 3 ;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2259      	movs	r2, #89	; 0x59
 8008660:	2103      	movs	r1, #3
 8008662:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 3 && gs->MR_mode == MR_MODE_IDLE)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2259      	movs	r2, #89	; 0x59
 8008668:	5c9b      	ldrb	r3, [r3, r2]
 800866a:	2b03      	cmp	r3, #3
 800866c:	d111      	bne.n	8008692 <HL_GoForward+0x9a>
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2265      	movs	r2, #101	; 0x65
 8008672:	5c9b      	ldrb	r3, [r3, r2]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10c      	bne.n	8008692 <HL_GoForward+0x9a>
	{
		MR_goHori(gs,0, SENSE_FORWARD, SHORT_DELAY, 0) ;
 8008678:	4a20      	ldr	r2, [pc, #128]	; (80086fc <HL_GoForward+0x104>)
 800867a:	6838      	ldr	r0, [r7, #0]
 800867c:	2300      	movs	r3, #0
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	0013      	movs	r3, r2
 8008682:	2200      	movs	r2, #0
 8008684:	2100      	movs	r1, #0
 8008686:	f003 fc63 	bl	800bf50 <MR_goHori>
		gs->hl_token = 4 ;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2259      	movs	r2, #89	; 0x59
 800868e:	2104      	movs	r1, #4
 8008690:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 4 && gs->MR_mode == MR_MODE_IDLE)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2259      	movs	r2, #89	; 0x59
 8008696:	5c9b      	ldrb	r3, [r3, r2]
 8008698:	2b04      	cmp	r3, #4
 800869a:	d115      	bne.n	80086c8 <HL_GoForward+0xd0>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2265      	movs	r2, #101	; 0x65
 80086a0:	5c9b      	ldrb	r3, [r3, r2]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d110      	bne.n	80086c8 <HL_GoForward+0xd0>
	{
		gs->HL_arg = 0 ;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	226a      	movs	r2, #106	; 0x6a
 80086aa:	2100      	movs	r1, #0
 80086ac:	5299      	strh	r1, [r3, r2]
		MR_goHori(gs,10, SENSE_FORWARD, ACCEL_DELAY, 0) ;
 80086ae:	4a12      	ldr	r2, [pc, #72]	; (80086f8 <HL_GoForward+0x100>)
 80086b0:	6838      	ldr	r0, [r7, #0]
 80086b2:	2300      	movs	r3, #0
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	0013      	movs	r3, r2
 80086b8:	2200      	movs	r2, #0
 80086ba:	210a      	movs	r1, #10
 80086bc:	f003 fc48 	bl	800bf50 <MR_goHori>
		gs->hl_token = 5 ;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2259      	movs	r2, #89	; 0x59
 80086c4:	2105      	movs	r1, #5
 80086c6:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 5 && gs->MR_mode == MR_MODE_IDLE)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2259      	movs	r2, #89	; 0x59
 80086cc:	5c9b      	ldrb	r3, [r3, r2]
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	d10c      	bne.n	80086ec <HL_GoForward+0xf4>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2265      	movs	r2, #101	; 0x65
 80086d6:	5c9b      	ldrb	r3, [r3, r2]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d107      	bne.n	80086ec <HL_GoForward+0xf4>
	{
		gs->hl_token = 0 ;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2259      	movs	r2, #89	; 0x59
 80086e0:	2100      	movs	r1, #0
 80086e2:	5499      	strb	r1, [r3, r2]
		gs->HL_mode = HL_MODE_IDLE ;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2266      	movs	r2, #102	; 0x66
 80086e8:	2100      	movs	r1, #0
 80086ea:	5499      	strb	r1, [r3, r2]
	}
}
 80086ec:	46c0      	nop			; (mov r8, r8)
 80086ee:	46bd      	mov	sp, r7
 80086f0:	b004      	add	sp, #16
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	00000af4 	.word	0x00000af4
 80086f8:	0016e360 	.word	0x0016e360
 80086fc:	003567e0 	.word	0x003567e0

08008700 <HL_StartGetFromBackward>:

void HL_StartGetFromBackward(GroupSynchro* gs)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_MOTOR || gs->type == GROUP_TYPE_XMOTOR)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d003      	beq.n	8008718 <HL_StartGetFromBackward+0x18>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2b03      	cmp	r3, #3
 8008716:	d10b      	bne.n	8008730 <HL_StartGetFromBackward+0x30>
		{
			gs->hl_token = 1 ;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2259      	movs	r2, #89	; 0x59
 800871c:	2101      	movs	r1, #1
 800871e:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GET_FROM_BACKWARD ;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2266      	movs	r2, #102	; 0x66
 8008724:	2121      	movs	r1, #33	; 0x21
 8008726:	5499      	strb	r1, [r3, r2]
			gs->HL_arg = 0 ;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	226a      	movs	r2, #106	; 0x6a
 800872c:	2100      	movs	r1, #0
 800872e:	5299      	strh	r1, [r3, r2]
		}
}
 8008730:	46c0      	nop			; (mov r8, r8)
 8008732:	46bd      	mov	sp, r7
 8008734:	b002      	add	sp, #8
 8008736:	bd80      	pop	{r7, pc}

08008738 <HL_GetFromBackward>:

void HL_GetFromBackward(params* gp, GroupSynchro* gs)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af02      	add	r7, sp, #8
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
	if(gs->hl_token == 1){
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2259      	movs	r2, #89	; 0x59
 8008746:	5c9b      	ldrb	r3, [r3, r2]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d133      	bne.n	80087b4 <HL_GetFromBackward+0x7c>
		uint8_t ids1[] = {1} ;
 800874c:	2114      	movs	r1, #20
 800874e:	187b      	adds	r3, r7, r1
 8008750:	2201      	movs	r2, #1
 8008752:	701a      	strb	r2, [r3, #0]
		addGroup(gp, GROUP_TYPE_CAPTOR, 5, ids1, 1) ;
 8008754:	187a      	adds	r2, r7, r1
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	2301      	movs	r3, #1
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	0013      	movs	r3, r2
 800875e:	2205      	movs	r2, #5
 8008760:	2101      	movs	r1, #1
 8008762:	f7fe f8b1 	bl	80068c8 <addGroup>
		GS_startTargeting(&(gp->gss[5]), LOW_AVSPEED, gp->gss[5].vcs[0]->target_currTour - 2) ;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	228c      	movs	r2, #140	; 0x8c
 800876a:	0092      	lsls	r2, r2, #2
 800876c:	1898      	adds	r0, r3, r2
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	238d      	movs	r3, #141	; 0x8d
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	58d3      	ldr	r3, [r2, r3]
 8008776:	224a      	movs	r2, #74	; 0x4a
 8008778:	5a9b      	ldrh	r3, [r3, r2]
 800877a:	3b02      	subs	r3, #2
 800877c:	b29b      	uxth	r3, r3
 800877e:	494a      	ldr	r1, [pc, #296]	; (80088a8 <HL_GetFromBackward+0x170>)
 8008780:	001a      	movs	r2, r3
 8008782:	f7fe fa4b 	bl	8006c1c <GS_startTargeting>
		uint8_t ids2[] = {5} ;
 8008786:	2110      	movs	r1, #16
 8008788:	187b      	adds	r3, r7, r1
 800878a:	2205      	movs	r2, #5
 800878c:	701a      	strb	r2, [r3, #0]
		addGroup(gp, GROUP_TYPE_MOTOR, 3, ids2, 1) ;
 800878e:	187a      	adds	r2, r7, r1
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	2301      	movs	r3, #1
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	0013      	movs	r3, r2
 8008798:	2203      	movs	r2, #3
 800879a:	2102      	movs	r1, #2
 800879c:	f7fe f894 	bl	80068c8 <addGroup>
		MR_startGoIn(&(gp->gss[3])) ;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3351      	adds	r3, #81	; 0x51
 80087a4:	33ff      	adds	r3, #255	; 0xff
 80087a6:	0018      	movs	r0, r3
 80087a8:	f003 fd45 	bl	800c236 <MR_startGoIn>

		gs->hl_token = 2 ;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2259      	movs	r2, #89	; 0x59
 80087b0:	2102      	movs	r1, #2
 80087b2:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 2 && gp->gss[3].MR_mode == MR_MODE_IDLE && gp->gss[5].mode == MODE_IDLE)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2259      	movs	r2, #89	; 0x59
 80087b8:	5c9b      	ldrb	r3, [r3, r2]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d12f      	bne.n	800881e <HL_GetFromBackward+0xe6>
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	23b6      	movs	r3, #182	; 0xb6
 80087c2:	33ff      	adds	r3, #255	; 0xff
 80087c4:	5cd3      	ldrb	r3, [r2, r3]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d129      	bne.n	800881e <HL_GetFromBackward+0xe6>
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	23a5      	movs	r3, #165	; 0xa5
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	5cd3      	ldrb	r3, [r2, r3]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d123      	bne.n	800881e <HL_GetFromBackward+0xe6>
	{
		eraseGroup(gp, 5) ;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2105      	movs	r1, #5
 80087da:	0018      	movs	r0, r3
 80087dc:	f7fd ffb2 	bl	8006744 <eraseGroup>
		eraseGroup(gp, 3) ;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2103      	movs	r1, #3
 80087e4:	0018      	movs	r0, r3
 80087e6:	f7fd ffad 	bl	8006744 <eraseGroup>

		uint8_t tx1[] = {COM_A} ; //IS READY
 80087ea:	210c      	movs	r1, #12
 80087ec:	187b      	adds	r3, r7, r1
 80087ee:	2261      	movs	r2, #97	; 0x61
 80087f0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&(gp->huarts[0]), tx1, 1, 1000) ;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a2d      	ldr	r2, [pc, #180]	; (80088ac <HL_GetFromBackward+0x174>)
 80087f6:	1898      	adds	r0, r3, r2
 80087f8:	23fa      	movs	r3, #250	; 0xfa
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	1879      	adds	r1, r7, r1
 80087fe:	2201      	movs	r2, #1
 8008800:	f7fc fa76 	bl	8004cf0 <HAL_UART_Transmit>

		MR_goHori(gs,10, SENSE_FORWARD, ACCEL_DELAY, 1) ;
 8008804:	4a2a      	ldr	r2, [pc, #168]	; (80088b0 <HL_GetFromBackward+0x178>)
 8008806:	6838      	ldr	r0, [r7, #0]
 8008808:	2301      	movs	r3, #1
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	0013      	movs	r3, r2
 800880e:	2200      	movs	r2, #0
 8008810:	210a      	movs	r1, #10
 8008812:	f003 fb9d 	bl	800bf50 <MR_goHori>
		gs->hl_token = 3 ;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2259      	movs	r2, #89	; 0x59
 800881a:	2103      	movs	r1, #3
 800881c:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 3 && gs->MR_mode == MR_MODE_IDLE)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2259      	movs	r2, #89	; 0x59
 8008822:	5c9b      	ldrb	r3, [r3, r2]
 8008824:	2b03      	cmp	r3, #3
 8008826:	d111      	bne.n	800884c <HL_GetFromBackward+0x114>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2265      	movs	r2, #101	; 0x65
 800882c:	5c9b      	ldrb	r3, [r3, r2]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10c      	bne.n	800884c <HL_GetFromBackward+0x114>
	{
		gs->hl_token = 4 ;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2259      	movs	r2, #89	; 0x59
 8008836:	2104      	movs	r1, #4
 8008838:	5499      	strb	r1, [r3, r2]
		MR_goHori(gs,0, SENSE_FORWARD, SHORT_DELAY, 1) ;
 800883a:	4a1e      	ldr	r2, [pc, #120]	; (80088b4 <HL_GetFromBackward+0x17c>)
 800883c:	6838      	ldr	r0, [r7, #0]
 800883e:	2301      	movs	r3, #1
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	0013      	movs	r3, r2
 8008844:	2200      	movs	r2, #0
 8008846:	2100      	movs	r1, #0
 8008848:	f003 fb82 	bl	800bf50 <MR_goHori>
	}
	if(gs->hl_token == 4 && gs->MR_mode == MR_MODE_IDLE)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2259      	movs	r2, #89	; 0x59
 8008850:	5c9b      	ldrb	r3, [r3, r2]
 8008852:	2b04      	cmp	r3, #4
 8008854:	d111      	bne.n	800887a <HL_GetFromBackward+0x142>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2265      	movs	r2, #101	; 0x65
 800885a:	5c9b      	ldrb	r3, [r3, r2]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10c      	bne.n	800887a <HL_GetFromBackward+0x142>
	{
		MR_goHori(gs,10, SENSE_FORWARD, ACCEL_DELAY, 1) ;
 8008860:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <HL_GetFromBackward+0x178>)
 8008862:	6838      	ldr	r0, [r7, #0]
 8008864:	2301      	movs	r3, #1
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	0013      	movs	r3, r2
 800886a:	2200      	movs	r2, #0
 800886c:	210a      	movs	r1, #10
 800886e:	f003 fb6f 	bl	800bf50 <MR_goHori>
		gs->hl_token = 5 ;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2259      	movs	r2, #89	; 0x59
 8008876:	2105      	movs	r1, #5
 8008878:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 5 && gs->MR_mode == MR_MODE_IDLE)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2259      	movs	r2, #89	; 0x59
 800887e:	5c9b      	ldrb	r3, [r3, r2]
 8008880:	2b05      	cmp	r3, #5
 8008882:	d10c      	bne.n	800889e <HL_GetFromBackward+0x166>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	2265      	movs	r2, #101	; 0x65
 8008888:	5c9b      	ldrb	r3, [r3, r2]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d107      	bne.n	800889e <HL_GetFromBackward+0x166>
	{
		gs->hl_token = 0 ;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2259      	movs	r2, #89	; 0x59
 8008892:	2100      	movs	r1, #0
 8008894:	5499      	strb	r1, [r3, r2]
		gs->HL_mode = HL_MODE_IDLE ;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	2266      	movs	r2, #102	; 0x66
 800889a:	2100      	movs	r1, #0
 800889c:	5499      	strb	r1, [r3, r2]
	}
}
 800889e:	46c0      	nop			; (mov r8, r8)
 80088a0:	46bd      	mov	sp, r7
 80088a2:	b006      	add	sp, #24
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	46c0      	nop			; (mov r8, r8)
 80088a8:	41f00000 	.word	0x41f00000
 80088ac:	00000a68 	.word	0x00000a68
 80088b0:	0016e360 	.word	0x0016e360
 80088b4:	003567e0 	.word	0x003567e0

080088b8 <HL_StartGoBackward>:

//_______________________________________________________GO BACKWARD__________________________________________
void HL_StartGoBackward(GroupSynchro* gs)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_MOTOR || gs->type == GROUP_TYPE_XMOTOR)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d003      	beq.n	80088d0 <HL_StartGoBackward+0x18>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b03      	cmp	r3, #3
 80088ce:	d10b      	bne.n	80088e8 <HL_StartGoBackward+0x30>
		{
			gs->hl_token = 1 ;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2259      	movs	r2, #89	; 0x59
 80088d4:	2101      	movs	r1, #1
 80088d6:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GO_BACKWARD ;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2266      	movs	r2, #102	; 0x66
 80088dc:	2117      	movs	r1, #23
 80088de:	5499      	strb	r1, [r3, r2]
			gs->HL_arg = 0 ;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	226a      	movs	r2, #106	; 0x6a
 80088e4:	2100      	movs	r1, #0
 80088e6:	5299      	strh	r1, [r3, r2]
		}
}
 80088e8:	46c0      	nop			; (mov r8, r8)
 80088ea:	46bd      	mov	sp, r7
 80088ec:	b002      	add	sp, #8
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HL_GoBackward>:
//
void HL_GoBackward(params* gp, GroupSynchro* gs)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
	if(gs->hl_token == 1)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2259      	movs	r2, #89	; 0x59
 80088fe:	5c9b      	ldrb	r3, [r3, r2]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d110      	bne.n	8008926 <HL_GoBackward+0x36>
	{
		uint8_t tx1[] = {COM_5} ;
 8008904:	2108      	movs	r1, #8
 8008906:	187b      	adds	r3, r7, r1
 8008908:	2235      	movs	r2, #53	; 0x35
 800890a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&(gp->huarts[0]), tx1, 1, 1000) ;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a41      	ldr	r2, [pc, #260]	; (8008a14 <HL_GoBackward+0x124>)
 8008910:	1898      	adds	r0, r3, r2
 8008912:	23fa      	movs	r3, #250	; 0xfa
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	1879      	adds	r1, r7, r1
 8008918:	2201      	movs	r2, #1
 800891a:	f7fc f9e9 	bl	8004cf0 <HAL_UART_Transmit>
		gs->hl_token = 2 ;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2259      	movs	r2, #89	; 0x59
 8008922:	2102      	movs	r1, #2
 8008924:	5499      	strb	r1, [r3, r2]
	}

	if(gs->hl_token == 2 && gs->MR_mode == MR_MODE_IDLE)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2259      	movs	r2, #89	; 0x59
 800892a:	5c9b      	ldrb	r3, [r3, r2]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d116      	bne.n	800895e <HL_GoBackward+0x6e>
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2265      	movs	r2, #101	; 0x65
 8008934:	5c9b      	ldrb	r3, [r3, r2]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d111      	bne.n	800895e <HL_GoBackward+0x6e>
	{
		HAL_Delay(1000) ;
 800893a:	23fa      	movs	r3, #250	; 0xfa
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	0018      	movs	r0, r3
 8008940:	f7f8 fd5a 	bl	80013f8 <HAL_Delay>
		gs->hl_token = 3 ;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2259      	movs	r2, #89	; 0x59
 8008948:	2103      	movs	r1, #3
 800894a:	5499      	strb	r1, [r3, r2]
		MR_goHori(gs,5, SENSE_BACKWARD, ACCEL_DELAY, 1) ;
 800894c:	4a32      	ldr	r2, [pc, #200]	; (8008a18 <HL_GoBackward+0x128>)
 800894e:	6838      	ldr	r0, [r7, #0]
 8008950:	2301      	movs	r3, #1
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	0013      	movs	r3, r2
 8008956:	2201      	movs	r2, #1
 8008958:	2105      	movs	r1, #5
 800895a:	f003 faf9 	bl	800bf50 <MR_goHori>
	}
	if(gs->hl_token == 3 && gs->MR_mode == MR_MODE_IDLE)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2259      	movs	r2, #89	; 0x59
 8008962:	5c9b      	ldrb	r3, [r3, r2]
 8008964:	2b03      	cmp	r3, #3
 8008966:	d111      	bne.n	800898c <HL_GoBackward+0x9c>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2265      	movs	r2, #101	; 0x65
 800896c:	5c9b      	ldrb	r3, [r3, r2]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10c      	bne.n	800898c <HL_GoBackward+0x9c>
	{
		gs->hl_token = 4 ;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2259      	movs	r2, #89	; 0x59
 8008976:	2104      	movs	r1, #4
 8008978:	5499      	strb	r1, [r3, r2]
		MR_goHori(gs,0, SENSE_BACKWARD, SHORT_DELAY, 1) ;
 800897a:	4a28      	ldr	r2, [pc, #160]	; (8008a1c <HL_GoBackward+0x12c>)
 800897c:	6838      	ldr	r0, [r7, #0]
 800897e:	2301      	movs	r3, #1
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	0013      	movs	r3, r2
 8008984:	2201      	movs	r2, #1
 8008986:	2100      	movs	r1, #0
 8008988:	f003 fae2 	bl	800bf50 <MR_goHori>
	}
	if(gs->hl_token == 4 && gs->MR_mode == MR_MODE_IDLE)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2259      	movs	r2, #89	; 0x59
 8008990:	5c9b      	ldrb	r3, [r3, r2]
 8008992:	2b04      	cmp	r3, #4
 8008994:	d111      	bne.n	80089ba <HL_GoBackward+0xca>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2265      	movs	r2, #101	; 0x65
 800899a:	5c9b      	ldrb	r3, [r3, r2]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10c      	bne.n	80089ba <HL_GoBackward+0xca>
	{
		MR_goHori(gs,5, SENSE_BACKWARD, ACCEL_DELAY, 1) ;
 80089a0:	4a1d      	ldr	r2, [pc, #116]	; (8008a18 <HL_GoBackward+0x128>)
 80089a2:	6838      	ldr	r0, [r7, #0]
 80089a4:	2301      	movs	r3, #1
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	0013      	movs	r3, r2
 80089aa:	2201      	movs	r2, #1
 80089ac:	2105      	movs	r1, #5
 80089ae:	f003 facf 	bl	800bf50 <MR_goHori>
		gs->hl_token = 5 ;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2259      	movs	r2, #89	; 0x59
 80089b6:	2105      	movs	r1, #5
 80089b8:	5499      	strb	r1, [r3, r2]
	}
	if(gs->hl_token == 5 && gs->MR_mode == MR_MODE_IDLE)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2259      	movs	r2, #89	; 0x59
 80089be:	5c9b      	ldrb	r3, [r3, r2]
 80089c0:	2b05      	cmp	r3, #5
 80089c2:	d122      	bne.n	8008a0a <HL_GoBackward+0x11a>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2265      	movs	r2, #101	; 0x65
 80089c8:	5c9b      	ldrb	r3, [r3, r2]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d11d      	bne.n	8008a0a <HL_GoBackward+0x11a>
	{
		for(int i = 0 ; i < gs->size ; i++)
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	e00c      	b.n	80089ee <HL_GoBackward+0xfe>
		{
			gs->ms[i]->trans.state = STATE_DOWN ;
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3304      	adds	r3, #4
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	18d3      	adds	r3, r2, r3
 80089de:	3304      	adds	r3, #4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	227d      	movs	r2, #125	; 0x7d
 80089e4:	2102      	movs	r1, #2
 80089e6:	5499      	strb	r1, [r3, r2]
		for(int i = 0 ; i < gs->size ; i++)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	789b      	ldrb	r3, [r3, #2]
 80089f2:	001a      	movs	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4293      	cmp	r3, r2
 80089f8:	dbec      	blt.n	80089d4 <HL_GoBackward+0xe4>
		}
		gs->hl_token = 0 ;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2259      	movs	r2, #89	; 0x59
 80089fe:	2100      	movs	r1, #0
 8008a00:	5499      	strb	r1, [r3, r2]
		gs->HL_mode = HL_MODE_IDLE ;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2266      	movs	r2, #102	; 0x66
 8008a06:	2100      	movs	r1, #0
 8008a08:	5499      	strb	r1, [r3, r2]
	}
}
 8008a0a:	46c0      	nop			; (mov r8, r8)
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	b004      	add	sp, #16
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	00000a68 	.word	0x00000a68
 8008a18:	0016e360 	.word	0x0016e360
 8008a1c:	003567e0 	.word	0x003567e0

08008a20 <HL_StartGetFromForward>:

void HL_StartGetFromForward(GroupSynchro* gs)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_MOTOR || gs->type == GROUP_TYPE_XMOTOR)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d003      	beq.n	8008a38 <HL_StartGetFromForward+0x18>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d10b      	bne.n	8008a50 <HL_StartGetFromForward+0x30>
		{
			gs->hl_token = 1 ;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2259      	movs	r2, #89	; 0x59
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_GET_FROM_FORWARD ;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2266      	movs	r2, #102	; 0x66
 8008a44:	2120      	movs	r1, #32
 8008a46:	5499      	strb	r1, [r3, r2]
			gs->HL_arg = 0 ;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	226a      	movs	r2, #106	; 0x6a
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	5299      	strh	r1, [r3, r2]
		}
}
 8008a50:	46c0      	nop			; (mov r8, r8)
 8008a52:	46bd      	mov	sp, r7
 8008a54:	b002      	add	sp, #8
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HL_GetFromForward>:

void HL_GetFromForward(params* gp, GroupSynchro* gs)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af02      	add	r7, sp, #8
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
	if(gs->hl_token == 1)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2259      	movs	r2, #89	; 0x59
 8008a66:	5c9b      	ldrb	r3, [r3, r2]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d103      	bne.n	8008a74 <HL_GetFromForward+0x1c>
//				}
//				if(barrier == 1)
//				{
//					//PREPARATION DE MOUVEMENT SI DEMARRE DEPUIS POSITION HAUTE
//					if(gp->gss[4].vcs[0]->target_currTour >= 300)
						gs->hl_token = 10 ;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2259      	movs	r2, #89	; 0x59
 8008a70:	210a      	movs	r1, #10
 8008a72:	5499      	strb	r1, [r3, r2]
//				}
//				else
//					gs->hl_token = 2;

			}
	if(gs->hl_token == 2 && gp->gss[3].MR_mode == MR_MODE_IDLE && gp->gss[6].mode == MODE_IDLE)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2259      	movs	r2, #89	; 0x59
 8008a78:	5c9b      	ldrb	r3, [r3, r2]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d122      	bne.n	8008ac4 <HL_GetFromForward+0x6c>
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	23b6      	movs	r3, #182	; 0xb6
 8008a82:	33ff      	adds	r3, #255	; 0xff
 8008a84:	5cd3      	ldrb	r3, [r2, r3]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d11c      	bne.n	8008ac4 <HL_GetFromForward+0x6c>
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	23c1      	movs	r3, #193	; 0xc1
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	5cd3      	ldrb	r3, [r2, r3]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d116      	bne.n	8008ac4 <HL_GetFromForward+0x6c>
		{
			eraseGroup(gp,3) ;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2103      	movs	r1, #3
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f7fd fe52 	bl	8006744 <eraseGroup>
			eraseGroup(gp, 6) ;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2106      	movs	r1, #6
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f7fd fe4d 	bl	8006744 <eraseGroup>
			MR_goHori(gs,10, SENSE_BACKWARD, ACCEL_DELAY, 1) ;
 8008aaa:	4a50      	ldr	r2, [pc, #320]	; (8008bec <HL_GetFromForward+0x194>)
 8008aac:	6838      	ldr	r0, [r7, #0]
 8008aae:	2301      	movs	r3, #1
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	0013      	movs	r3, r2
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	210a      	movs	r1, #10
 8008ab8:	f003 fa4a 	bl	800bf50 <MR_goHori>
			gs->hl_token = 3 ;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2259      	movs	r2, #89	; 0x59
 8008ac0:	2103      	movs	r1, #3
 8008ac2:	5499      	strb	r1, [r3, r2]
		}
	if(gs->hl_token == 3 && gs->MR_mode == MR_MODE_IDLE)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2259      	movs	r2, #89	; 0x59
 8008ac8:	5c9b      	ldrb	r3, [r3, r2]
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d111      	bne.n	8008af2 <HL_GetFromForward+0x9a>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2265      	movs	r2, #101	; 0x65
 8008ad2:	5c9b      	ldrb	r3, [r3, r2]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10c      	bne.n	8008af2 <HL_GetFromForward+0x9a>
		{
			gs->hl_token = 4 ;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2259      	movs	r2, #89	; 0x59
 8008adc:	2104      	movs	r1, #4
 8008ade:	5499      	strb	r1, [r3, r2]
			MR_goHori(gs,0, SENSE_BACKWARD, SHORT_DELAY, 1) ;
 8008ae0:	4a43      	ldr	r2, [pc, #268]	; (8008bf0 <HL_GetFromForward+0x198>)
 8008ae2:	6838      	ldr	r0, [r7, #0]
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	0013      	movs	r3, r2
 8008aea:	2201      	movs	r2, #1
 8008aec:	2100      	movs	r1, #0
 8008aee:	f003 fa2f 	bl	800bf50 <MR_goHori>
		}
		if(gs->hl_token == 4 && gs->MR_mode == MR_MODE_IDLE)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2259      	movs	r2, #89	; 0x59
 8008af6:	5c9b      	ldrb	r3, [r3, r2]
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	d111      	bne.n	8008b20 <HL_GetFromForward+0xc8>
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2265      	movs	r2, #101	; 0x65
 8008b00:	5c9b      	ldrb	r3, [r3, r2]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10c      	bne.n	8008b20 <HL_GetFromForward+0xc8>
		{
			MR_goHori(gs,10, SENSE_BACKWARD, ACCEL_DELAY, 1) ;
 8008b06:	4a39      	ldr	r2, [pc, #228]	; (8008bec <HL_GetFromForward+0x194>)
 8008b08:	6838      	ldr	r0, [r7, #0]
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	0013      	movs	r3, r2
 8008b10:	2201      	movs	r2, #1
 8008b12:	210a      	movs	r1, #10
 8008b14:	f003 fa1c 	bl	800bf50 <MR_goHori>
			gs->hl_token = 5 ;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2259      	movs	r2, #89	; 0x59
 8008b1c:	2105      	movs	r1, #5
 8008b1e:	5499      	strb	r1, [r3, r2]
		}
		if(gs->hl_token == 5 && gs->MR_mode == MR_MODE_IDLE)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2259      	movs	r2, #89	; 0x59
 8008b24:	5c9b      	ldrb	r3, [r3, r2]
 8008b26:	2b05      	cmp	r3, #5
 8008b28:	d122      	bne.n	8008b70 <HL_GetFromForward+0x118>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2265      	movs	r2, #101	; 0x65
 8008b2e:	5c9b      	ldrb	r3, [r3, r2]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d11d      	bne.n	8008b70 <HL_GetFromForward+0x118>
		{
			for(int i = 0 ; i < gs->size ; i++)
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	e00c      	b.n	8008b54 <HL_GetFromForward+0xfc>
			{
				gs->ms[i]->trans.state = STATE_DOWN ;
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	18d3      	adds	r3, r2, r3
 8008b44:	3304      	adds	r3, #4
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	227d      	movs	r2, #125	; 0x7d
 8008b4a:	2102      	movs	r1, #2
 8008b4c:	5499      	strb	r1, [r3, r2]
			for(int i = 0 ; i < gs->size ; i++)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	3301      	adds	r3, #1
 8008b52:	617b      	str	r3, [r7, #20]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	789b      	ldrb	r3, [r3, #2]
 8008b58:	001a      	movs	r2, r3
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	dbec      	blt.n	8008b3a <HL_GetFromForward+0xe2>
			}
			gs->hl_token = 0 ;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2259      	movs	r2, #89	; 0x59
 8008b64:	2100      	movs	r1, #0
 8008b66:	5499      	strb	r1, [r3, r2]
			gs->HL_mode = HL_MODE_IDLE ;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2266      	movs	r2, #102	; 0x66
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	5499      	strb	r1, [r3, r2]
		}
		if(gs->hl_token == 10)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2259      	movs	r2, #89	; 0x59
 8008b74:	5c9b      	ldrb	r3, [r3, r2]
 8008b76:	2b0a      	cmp	r3, #10
 8008b78:	d133      	bne.n	8008be2 <HL_GetFromForward+0x18a>
		{
			uint8_t ids1[] = {7} ;
 8008b7a:	2110      	movs	r1, #16
 8008b7c:	187b      	adds	r3, r7, r1
 8008b7e:	2207      	movs	r2, #7
 8008b80:	701a      	strb	r2, [r3, #0]
			addGroup(gp, GROUP_TYPE_MOTOR, 3, ids1, 1) ;
 8008b82:	187a      	adds	r2, r7, r1
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	2301      	movs	r3, #1
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	0013      	movs	r3, r2
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	2102      	movs	r1, #2
 8008b90:	f7fd fe9a 	bl	80068c8 <addGroup>
			MR_startGoIn(&(gp->gss[3])) ;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3351      	adds	r3, #81	; 0x51
 8008b98:	33ff      	adds	r3, #255	; 0xff
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f003 fb4b 	bl	800c236 <MR_startGoIn>
			uint8_t ids2[] = {3} ;
 8008ba0:	210c      	movs	r1, #12
 8008ba2:	187b      	adds	r3, r7, r1
 8008ba4:	2203      	movs	r2, #3
 8008ba6:	701a      	strb	r2, [r3, #0]
			addGroup(gp, GROUP_TYPE_CAPTOR, 6, ids2, 2) ;
 8008ba8:	187a      	adds	r2, r7, r1
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	2302      	movs	r3, #2
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	0013      	movs	r3, r2
 8008bb2:	2206      	movs	r2, #6
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	f7fd fe87 	bl	80068c8 <addGroup>
			GS_startTargeting(&(gp->gss[6]), LOW_AVSPEED, gp->gss[6].vcs[0]->target_currTour -2) ;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	22a8      	movs	r2, #168	; 0xa8
 8008bbe:	0092      	lsls	r2, r2, #2
 8008bc0:	1898      	adds	r0, r3, r2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	23a9      	movs	r3, #169	; 0xa9
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	58d3      	ldr	r3, [r2, r3]
 8008bca:	224a      	movs	r2, #74	; 0x4a
 8008bcc:	5a9b      	ldrh	r3, [r3, r2]
 8008bce:	3b02      	subs	r3, #2
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	4908      	ldr	r1, [pc, #32]	; (8008bf4 <HL_GetFromForward+0x19c>)
 8008bd4:	001a      	movs	r2, r3
 8008bd6:	f7fe f821 	bl	8006c1c <GS_startTargeting>
			gs->hl_token = 2 ;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2259      	movs	r2, #89	; 0x59
 8008bde:	2102      	movs	r1, #2
 8008be0:	5499      	strb	r1, [r3, r2]
		}
}
 8008be2:	46c0      	nop			; (mov r8, r8)
 8008be4:	46bd      	mov	sp, r7
 8008be6:	b006      	add	sp, #24
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	0016e360 	.word	0x0016e360
 8008bf0:	003567e0 	.word	0x003567e0
 8008bf4:	41f00000 	.word	0x41f00000

08008bf8 <HL_handle_message>:
		gs->HL_mode = HL_MODE_IDLE ;
	}
}

void HL_handle_message(params* gp, uint8_t* buf)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
	for(int i = 0 ; i < NUMGROUPS ; i++)
 8008c02:	2300      	movs	r3, #0
 8008c04:	60fb      	str	r3, [r7, #12]
 8008c06:	e0a7      	b.n	8008d58 <HL_handle_message+0x160>
	{
		if(gp->gss[i].HL_mode == HL_MODE_GO_UP)
 8008c08:	6879      	ldr	r1, [r7, #4]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	2066      	movs	r0, #102	; 0x66
 8008c0e:	0013      	movs	r3, r2
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	1a9b      	subs	r3, r3, r2
 8008c14:	011b      	lsls	r3, r3, #4
 8008c16:	18cb      	adds	r3, r1, r3
 8008c18:	181b      	adds	r3, r3, r0
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d10e      	bne.n	8008c3e <HL_handle_message+0x46>
		{
			if(buf[0] == COM_A)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b61      	cmp	r3, #97	; 0x61
 8008c26:	d10a      	bne.n	8008c3e <HL_handle_message+0x46>
			{
				gp->gss[i].HL_arg = 1 ;
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	206a      	movs	r0, #106	; 0x6a
 8008c2e:	0013      	movs	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	1a9b      	subs	r3, r3, r2
 8008c34:	011b      	lsls	r3, r3, #4
 8008c36:	18cb      	adds	r3, r1, r3
 8008c38:	181b      	adds	r3, r3, r0
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	801a      	strh	r2, [r3, #0]
			}
		}
		if(gp->gss[i].HL_mode == HL_MODE_GET_FROM_DOWN)
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	2066      	movs	r0, #102	; 0x66
 8008c44:	0013      	movs	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	1a9b      	subs	r3, r3, r2
 8008c4a:	011b      	lsls	r3, r3, #4
 8008c4c:	18cb      	adds	r3, r1, r3
 8008c4e:	181b      	adds	r3, r3, r0
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b0a      	cmp	r3, #10
 8008c54:	d11d      	bne.n	8008c92 <HL_handle_message+0x9a>
		{
			if(buf[0] == COM_A)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	2b61      	cmp	r3, #97	; 0x61
 8008c5c:	d10a      	bne.n	8008c74 <HL_handle_message+0x7c>
			{
				gp->gss[i].HL_arg = 2 ; ;
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	206a      	movs	r0, #106	; 0x6a
 8008c64:	0013      	movs	r3, r2
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	1a9b      	subs	r3, r3, r2
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	18cb      	adds	r3, r1, r3
 8008c6e:	181b      	adds	r3, r3, r0
 8008c70:	2202      	movs	r2, #2
 8008c72:	801a      	strh	r2, [r3, #0]
			}

			if(buf[0] == COM_C)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b63      	cmp	r3, #99	; 0x63
 8008c7a:	d10a      	bne.n	8008c92 <HL_handle_message+0x9a>
			{
				gp->gss[i].HL_arg = 3 ; ;
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	206a      	movs	r0, #106	; 0x6a
 8008c82:	0013      	movs	r3, r2
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	18cb      	adds	r3, r1, r3
 8008c8c:	181b      	adds	r3, r3, r0
 8008c8e:	2203      	movs	r2, #3
 8008c90:	801a      	strh	r2, [r3, #0]
			}
		}
		if(gp->gss[i].HL_mode == HL_MODE_GO_DOWN)
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	2066      	movs	r0, #102	; 0x66
 8008c98:	0013      	movs	r3, r2
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	1a9b      	subs	r3, r3, r2
 8008c9e:	011b      	lsls	r3, r3, #4
 8008ca0:	18cb      	adds	r3, r1, r3
 8008ca2:	181b      	adds	r3, r3, r0
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d10e      	bne.n	8008cc8 <HL_handle_message+0xd0>
		{
			if(buf[0] == COM_B)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	2b62      	cmp	r3, #98	; 0x62
 8008cb0:	d10a      	bne.n	8008cc8 <HL_handle_message+0xd0>
			{
				gp->gss[i].HL_arg = 2 ;
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	206a      	movs	r0, #106	; 0x6a
 8008cb8:	0013      	movs	r3, r2
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	18cb      	adds	r3, r1, r3
 8008cc2:	181b      	adds	r3, r3, r0
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	801a      	strh	r2, [r3, #0]
			}
		}
		if(gp->gss[i].HL_mode == HL_MODE_GET_FROM_UP)
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	2066      	movs	r0, #102	; 0x66
 8008cce:	0013      	movs	r3, r2
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	1a9b      	subs	r3, r3, r2
 8008cd4:	011b      	lsls	r3, r3, #4
 8008cd6:	18cb      	adds	r3, r1, r3
 8008cd8:	181b      	adds	r3, r3, r0
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b0b      	cmp	r3, #11
 8008cde:	d11d      	bne.n	8008d1c <HL_handle_message+0x124>
		{
			if(buf[0] == COM_A)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b61      	cmp	r3, #97	; 0x61
 8008ce6:	d10a      	bne.n	8008cfe <HL_handle_message+0x106>
			{
				gp->gss[i].HL_arg = 1 ; ;
 8008ce8:	6879      	ldr	r1, [r7, #4]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	206a      	movs	r0, #106	; 0x6a
 8008cee:	0013      	movs	r3, r2
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	1a9b      	subs	r3, r3, r2
 8008cf4:	011b      	lsls	r3, r3, #4
 8008cf6:	18cb      	adds	r3, r1, r3
 8008cf8:	181b      	adds	r3, r3, r0
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	801a      	strh	r2, [r3, #0]
			}

			if(buf[0] == COM_C)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b63      	cmp	r3, #99	; 0x63
 8008d04:	d10a      	bne.n	8008d1c <HL_handle_message+0x124>
			{
				gp->gss[i].HL_arg = 3 ; ;
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	206a      	movs	r0, #106	; 0x6a
 8008d0c:	0013      	movs	r3, r2
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	18cb      	adds	r3, r1, r3
 8008d16:	181b      	adds	r3, r3, r0
 8008d18:	2203      	movs	r2, #3
 8008d1a:	801a      	strh	r2, [r3, #0]
			}
		}
		if(gp->gss[i].HL_mode == HL_MODE_GO_FORWARD)
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	2066      	movs	r0, #102	; 0x66
 8008d22:	0013      	movs	r3, r2
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	1a9b      	subs	r3, r3, r2
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	18cb      	adds	r3, r1, r3
 8008d2c:	181b      	adds	r3, r3, r0
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b16      	cmp	r3, #22
 8008d32:	d10e      	bne.n	8008d52 <HL_handle_message+0x15a>
		{
			if(buf[0] == COM_A)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	2b61      	cmp	r3, #97	; 0x61
 8008d3a:	d10a      	bne.n	8008d52 <HL_handle_message+0x15a>
			{
				gp->gss[i].HL_arg = 1 ;
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	206a      	movs	r0, #106	; 0x6a
 8008d42:	0013      	movs	r3, r2
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	1a9b      	subs	r3, r3, r2
 8008d48:	011b      	lsls	r3, r3, #4
 8008d4a:	18cb      	adds	r3, r1, r3
 8008d4c:	181b      	adds	r3, r3, r0
 8008d4e:	2201      	movs	r2, #1
 8008d50:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < NUMGROUPS ; i++)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b07      	cmp	r3, #7
 8008d5c:	dc00      	bgt.n	8008d60 <HL_handle_message+0x168>
 8008d5e:	e753      	b.n	8008c08 <HL_handle_message+0x10>
			}
		}
	}
}
 8008d60:	46c0      	nop			; (mov r8, r8)
 8008d62:	46bd      	mov	sp, r7
 8008d64:	b004      	add	sp, #16
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008d6e:	f7f8 fabf 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008d72:	f000 f959 	bl	8009028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008d76:	f000 fd83 	bl	8009880 <MX_GPIO_Init>
  MX_DMA_Init();
 8008d7a:	f000 fd63 	bl	8009844 <MX_DMA_Init>
  MX_TIM3_Init();
 8008d7e:	f000 fb77 	bl	8009470 <MX_TIM3_Init>
  MX_TIM1_Init();
 8008d82:	f000 faa9 	bl	80092d8 <MX_TIM1_Init>
  MX_TIM15_Init();
 8008d86:	f000 fbdd 	bl	8009544 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8008d8a:	f000 fc7f 	bl	800968c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8008d8e:	f000 fccf 	bl	8009730 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8008d92:	f000 fd1f 	bl	80097d4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8008d96:	f000 f9af 	bl	80090f8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx1, BUFFSIZE ) ;
 8008d9a:	4983      	ldr	r1, [pc, #524]	; (8008fa8 <main+0x240>)
 8008d9c:	4b83      	ldr	r3, [pc, #524]	; (8008fac <main+0x244>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	0018      	movs	r0, r3
 8008da2:	f7fc f851 	bl	8004e48 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, rx2, BUFFSIZE ) ;
 8008da6:	4982      	ldr	r1, [pc, #520]	; (8008fb0 <main+0x248>)
 8008da8:	4b82      	ldr	r3, [pc, #520]	; (8008fb4 <main+0x24c>)
 8008daa:	2201      	movs	r2, #1
 8008dac:	0018      	movs	r0, r3
 8008dae:	f7fc f84b 	bl	8004e48 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, rx3, BUFFSIZE ) ;
 8008db2:	4981      	ldr	r1, [pc, #516]	; (8008fb8 <main+0x250>)
 8008db4:	4b81      	ldr	r3, [pc, #516]	; (8008fbc <main+0x254>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	0018      	movs	r0, r3
 8008dba:	f7fc f845 	bl	8004e48 <HAL_UART_Receive_IT>
  initMotors(&(gps));
 8008dbe:	4b80      	ldr	r3, [pc, #512]	; (8008fc0 <main+0x258>)
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f000 feab 	bl	8009b1c <initMotors>
  initVCaptors(&(gps)) ;
 8008dc6:	4b7e      	ldr	r3, [pc, #504]	; (8008fc0 <main+0x258>)
 8008dc8:	0018      	movs	r0, r3
 8008dca:	f001 fa0d 	bl	800a1e8 <initVCaptors>
  HL_initGroups(&(gps)) ;
 8008dce:	4b7c      	ldr	r3, [pc, #496]	; (8008fc0 <main+0x258>)
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	f7fe f987 	bl	80070e4 <HL_initGroups>
  initXCaptors(&(gps)) ;
 8008dd6:	4b7a      	ldr	r3, [pc, #488]	; (8008fc0 <main+0x258>)
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f000 fe63 	bl	8009aa4 <initXCaptors>
  initUARTS(&(gps)) ;
 8008dde:	4b78      	ldr	r3, [pc, #480]	; (8008fc0 <main+0x258>)
 8008de0:	0018      	movs	r0, r3
 8008de2:	f001 fbab 	bl	800a53c <initUARTS>

  __HAL_TIM_SET_COMPARE(&(gps.motors[0].htim), 0, ((0)*MOTPERIOD)/100);
 8008de6:	4a76      	ldr	r2, [pc, #472]	; (8008fc0 <main+0x258>)
 8008de8:	23c8      	movs	r3, #200	; 0xc8
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	58d3      	ldr	r3, [r2, r3]
 8008dee:	2200      	movs	r2, #0
 8008df0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&(gps.motors[1].htim), 1, ((0)*MOTPERIOD)/100);
 8008df2:	4b73      	ldr	r3, [pc, #460]	; (8008fc0 <main+0x258>)
 8008df4:	4a73      	ldr	r2, [pc, #460]	; (8008fc4 <main+0x25c>)
 8008df6:	589b      	ldr	r3, [r3, r2]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_TIM_SET_COMPARE(&(gps.motors[2].htim), 2, ((0)*MOTPERIOD)/100);
 8008dfc:	4a70      	ldr	r2, [pc, #448]	; (8008fc0 <main+0x258>)
 8008dfe:	23e9      	movs	r3, #233	; 0xe9
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	58d3      	ldr	r3, [r2, r3]
 8008e04:	2200      	movs	r2, #0
 8008e06:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_TIM_SET_COMPARE(&(gps.motors[3].htim), 3, ((0)*MOTPERIOD)/100);
 8008e08:	4b6d      	ldr	r3, [pc, #436]	; (8008fc0 <main+0x258>)
 8008e0a:	4a6f      	ldr	r2, [pc, #444]	; (8008fc8 <main+0x260>)
 8008e0c:	589b      	ldr	r3, [r3, r2]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_TIM_SET_COMPARE(&(gps.motors[4].htim), 4, ((0)*MOTPERIOD)/100);
 8008e12:	4a6b      	ldr	r2, [pc, #428]	; (8008fc0 <main+0x258>)
 8008e14:	2385      	movs	r3, #133	; 0x85
 8008e16:	011b      	lsls	r3, r3, #4
 8008e18:	58d3      	ldr	r3, [r2, r3]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&(gps.motors[5].htim), 5, ((0)*MOTPERIOD)/100);
 8008e1e:	4b68      	ldr	r3, [pc, #416]	; (8008fc0 <main+0x258>)
 8008e20:	4a6a      	ldr	r2, [pc, #424]	; (8008fcc <main+0x264>)
 8008e22:	589b      	ldr	r3, [r3, r2]
 8008e24:	2200      	movs	r2, #0
 8008e26:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_TIM_SET_COMPARE(&(gps.motors[6].htim), 6, ((0)*MOTPERIOD)/100);
 8008e28:	4b65      	ldr	r3, [pc, #404]	; (8008fc0 <main+0x258>)
 8008e2a:	4a69      	ldr	r2, [pc, #420]	; (8008fd0 <main+0x268>)
 8008e2c:	589b      	ldr	r3, [r3, r2]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_TIM_SET_COMPARE(&(gps.motors[7].htim), 7, ((0)*MOTPERIOD)/100);
 8008e32:	4b63      	ldr	r3, [pc, #396]	; (8008fc0 <main+0x258>)
 8008e34:	4a67      	ldr	r2, [pc, #412]	; (8008fd4 <main+0x26c>)
 8008e36:	589b      	ldr	r3, [r3, r2]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);*/

  for(int i=0; i<20; i++){
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	e00a      	b.n	8008e58 <main+0xf0>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8008e42:	4b65      	ldr	r3, [pc, #404]	; (8008fd8 <main+0x270>)
 8008e44:	2104      	movs	r1, #4
 8008e46:	0018      	movs	r0, r3
 8008e48:	f7fa fa9e 	bl	8003388 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8008e4c:	2032      	movs	r0, #50	; 0x32
 8008e4e:	f7f8 fad3 	bl	80013f8 <HAL_Delay>
  for(int i=0; i<20; i++){
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	3301      	adds	r3, #1
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2b13      	cmp	r3, #19
 8008e5c:	ddf1      	ble.n	8008e42 <main+0xda>
  }

  HAL_Delay(4000) ;
 8008e5e:	23fa      	movs	r3, #250	; 0xfa
 8008e60:	011b      	lsls	r3, r3, #4
 8008e62:	0018      	movs	r0, r3
 8008e64:	f7f8 fac8 	bl	80013f8 <HAL_Delay>
//  demoStep = 74 ; //READY FOR TAKE OFF
//  demoStep = 100 ; // NOTHING
//  demoStep = 92 ; //GO LEFT DEMO
//demoStep = 1 ; // DEMO COMPLETE

demoStep = 130 ; //DEMO POUR ARNAUD CAZALE
 8008e68:	4b5c      	ldr	r3, [pc, #368]	; (8008fdc <main+0x274>)
 8008e6a:	2282      	movs	r2, #130	; 0x82
 8008e6c:	701a      	strb	r2, [r3, #0]

  uint8_t group1[] = {4,6} ;
 8008e6e:	210c      	movs	r1, #12
 8008e70:	187b      	adds	r3, r7, r1
 8008e72:	4a5b      	ldr	r2, [pc, #364]	; (8008fe0 <main+0x278>)
 8008e74:	8812      	ldrh	r2, [r2, #0]
 8008e76:	801a      	strh	r2, [r3, #0]
  addGroup(&(gps), GROUP_TYPE_MOTOR, 0, group1, 2) ;
 8008e78:	187a      	adds	r2, r7, r1
 8008e7a:	4851      	ldr	r0, [pc, #324]	; (8008fc0 <main+0x258>)
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	0013      	movs	r3, r2
 8008e82:	2200      	movs	r2, #0
 8008e84:	2102      	movs	r1, #2
 8008e86:	f7fd fd1f 	bl	80068c8 <addGroup>
  uint8_t group4[] = {5,7} ;
 8008e8a:	2108      	movs	r1, #8
 8008e8c:	187b      	adds	r3, r7, r1
 8008e8e:	4a55      	ldr	r2, [pc, #340]	; (8008fe4 <main+0x27c>)
 8008e90:	8812      	ldrh	r2, [r2, #0]
 8008e92:	801a      	strh	r2, [r3, #0]
  addGroup(&(gps), GROUP_TYPE_MOTOR, 2, group4, 2) ;
 8008e94:	187a      	adds	r2, r7, r1
 8008e96:	484a      	ldr	r0, [pc, #296]	; (8008fc0 <main+0x258>)
 8008e98:	2302      	movs	r3, #2
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	0013      	movs	r3, r2
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	2102      	movs	r1, #2
 8008ea2:	f7fd fd11 	bl	80068c8 <addGroup>
  uint8_t group5[] = {0,1,2,3} ;
 8008ea6:	1d3b      	adds	r3, r7, #4
 8008ea8:	4a4f      	ldr	r2, [pc, #316]	; (8008fe8 <main+0x280>)
 8008eaa:	6812      	ldr	r2, [r2, #0]
 8008eac:	601a      	str	r2, [r3, #0]
  addGroup(&(gps), GROUP_TYPE_CAPTOR, 4, group5, 4) ;
 8008eae:	1d3a      	adds	r2, r7, #4
 8008eb0:	4843      	ldr	r0, [pc, #268]	; (8008fc0 <main+0x258>)
 8008eb2:	2304      	movs	r3, #4
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	0013      	movs	r3, r2
 8008eb8:	2204      	movs	r2, #4
 8008eba:	2101      	movs	r1, #1
 8008ebc:	f7fd fd04 	bl	80068c8 <addGroup>
//  addGroup(&(gps), GROUP_TYPE_MOTOR, 5, group6, 1) ;
//  uint8_t group7[] = {6} ;
//  addGroup(&(gps), GROUP_TYPE_MOTOR, 6, group7, 1) ;
//  uint8_t group8[] = {7} ;
//  addGroup(&(gps), GROUP_TYPE_MOTOR, 7, group8, 1) ;
	time_start = getUs() ;
 8008ec0:	f001 fb68 	bl	800a594 <getUs>
 8008ec4:	0002      	movs	r2, r0
 8008ec6:	4b49      	ldr	r3, [pc, #292]	; (8008fec <main+0x284>)
 8008ec8:	601a      	str	r2, [r3, #0]
	time_start_asserv = getUs() ;
 8008eca:	f001 fb63 	bl	800a594 <getUs>
 8008ece:	0002      	movs	r2, r0
 8008ed0:	4b47      	ldr	r3, [pc, #284]	; (8008ff0 <main+0x288>)
 8008ed2:	601a      	str	r2, [r3, #0]

	startMeasure(&(gps.vcs[0]));
 8008ed4:	4b47      	ldr	r3, [pc, #284]	; (8008ff4 <main+0x28c>)
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f003 fec8 	bl	800cc6c <startMeasure>
	startMeasure(&(gps.vcs[1]));
 8008edc:	4b46      	ldr	r3, [pc, #280]	; (8008ff8 <main+0x290>)
 8008ede:	0018      	movs	r0, r3
 8008ee0:	f003 fec4 	bl	800cc6c <startMeasure>
	startMeasure(&(gps.vcs[2]));
 8008ee4:	4b45      	ldr	r3, [pc, #276]	; (8008ffc <main+0x294>)
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f003 fec0 	bl	800cc6c <startMeasure>
	startMeasure(&(gps.vcs[3]));
 8008eec:	4b44      	ldr	r3, [pc, #272]	; (8009000 <main+0x298>)
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f003 febc 	bl	800cc6c <startMeasure>
	startMeasure(&(gps.vcs[4]));
 8008ef4:	4b43      	ldr	r3, [pc, #268]	; (8009004 <main+0x29c>)
 8008ef6:	0018      	movs	r0, r3
 8008ef8:	f003 feb8 	bl	800cc6c <startMeasure>
	startMeasure(&(gps.vcs[5]));
 8008efc:	4b42      	ldr	r3, [pc, #264]	; (8009008 <main+0x2a0>)
 8008efe:	0018      	movs	r0, r3
 8008f00:	f003 feb4 	bl	800cc6c <startMeasure>
	startMeasure(&(gps.vcs[6]));
 8008f04:	4b41      	ldr	r3, [pc, #260]	; (800900c <main+0x2a4>)
 8008f06:	0018      	movs	r0, r3
 8008f08:	f003 feb0 	bl	800cc6c <startMeasure>
	startMeasure(&(gps.vcs[7]));
 8008f0c:	4b40      	ldr	r3, [pc, #256]	; (8009010 <main+0x2a8>)
 8008f0e:	0018      	movs	r0, r3
 8008f10:	f003 feac 	bl	800cc6c <startMeasure>

	HAL_TIM_Base_Start(&htim1)	;
 8008f14:	4b3f      	ldr	r3, [pc, #252]	; (8009014 <main+0x2ac>)
 8008f16:	0018      	movs	r0, r3
 8008f18:	f7fb f892 	bl	8004040 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim15) ;
 8008f1c:	4b3e      	ldr	r3, [pc, #248]	; (8009018 <main+0x2b0>)
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f7fb f88e 	bl	8004040 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3) ;
 8008f24:	4b3d      	ldr	r3, [pc, #244]	; (800901c <main+0x2b4>)
 8008f26:	0018      	movs	r0, r3
 8008f28:	f7fb f88a 	bl	8004040 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8008f2c:	4b3a      	ldr	r3, [pc, #232]	; (8009018 <main+0x2b0>)
 8008f2e:	2100      	movs	r1, #0
 8008f30:	0018      	movs	r0, r3
 8008f32:	f7fb f8db 	bl	80040ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008f36:	4b37      	ldr	r3, [pc, #220]	; (8009014 <main+0x2ac>)
 8008f38:	2104      	movs	r1, #4
 8008f3a:	0018      	movs	r0, r3
 8008f3c:	f7fb f8d6 	bl	80040ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008f40:	4b34      	ldr	r3, [pc, #208]	; (8009014 <main+0x2ac>)
 8008f42:	2100      	movs	r1, #0
 8008f44:	0018      	movs	r0, r3
 8008f46:	f7fb f8d1 	bl	80040ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8008f4a:	4b33      	ldr	r3, [pc, #204]	; (8009018 <main+0x2b0>)
 8008f4c:	2104      	movs	r1, #4
 8008f4e:	0018      	movs	r0, r3
 8008f50:	f7fb f8cc 	bl	80040ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8008f54:	4b2f      	ldr	r3, [pc, #188]	; (8009014 <main+0x2ac>)
 8008f56:	2108      	movs	r1, #8
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f7fb f8c7 	bl	80040ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8008f5e:	4b2d      	ldr	r3, [pc, #180]	; (8009014 <main+0x2ac>)
 8008f60:	210c      	movs	r1, #12
 8008f62:	0018      	movs	r0, r3
 8008f64:	f7fb f8c2 	bl	80040ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8008f68:	4b2c      	ldr	r3, [pc, #176]	; (800901c <main+0x2b4>)
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f7fb f8bd 	bl	80040ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8008f72:	4b2a      	ldr	r3, [pc, #168]	; (800901c <main+0x2b4>)
 8008f74:	2104      	movs	r1, #4
 8008f76:	0018      	movs	r0, r3
 8008f78:	f7fb f8b8 	bl	80040ec <HAL_TIM_PWM_Start>

	//HAL_ADC_Start(&hadc1);
	HAL_ADC_Start_DMA(&hadc1, buffer, 8); // start adc in DMA mode
 8008f7c:	4928      	ldr	r1, [pc, #160]	; (8009020 <main+0x2b8>)
 8008f7e:	4b29      	ldr	r3, [pc, #164]	; (8009024 <main+0x2bc>)
 8008f80:	2208      	movs	r2, #8
 8008f82:	0018      	movs	r0, r3
 8008f84:	f7f8 febe 	bl	8001d04 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uint32_t time_us = getUs() ;
 8008f88:	f001 fb04 	bl	800a594 <getUs>
 8008f8c:	0003      	movs	r3, r0
 8008f8e:	613b      	str	r3, [r7, #16]

      HL_update(&gps, time_us) ;
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <main+0x258>)
 8008f94:	0011      	movs	r1, r2
 8008f96:	0018      	movs	r0, r3
 8008f98:	f7fe f8da 	bl	8007150 <HL_update>
	  demoRun(time_us) ;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f001 fb2c 	bl	800a5fc <demoRun>
  {
 8008fa4:	e7f0      	b.n	8008f88 <main+0x220>
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	20000d20 	.word	0x20000d20
 8008fac:	20000dcc 	.word	0x20000dcc
 8008fb0:	20000dc8 	.word	0x20000dc8
 8008fb4:	20000f38 	.word	0x20000f38
 8008fb8:	20000fc8 	.word	0x20000fc8
 8008fbc:	20000c54 	.word	0x20000c54
 8008fc0:	20000048 	.word	0x20000048
 8008fc4:	000006c4 	.word	0x000006c4
 8008fc8:	000007cc 	.word	0x000007cc
 8008fcc:	000008d4 	.word	0x000008d4
 8008fd0:	00000958 	.word	0x00000958
 8008fd4:	000009dc 	.word	0x000009dc
 8008fd8:	50000400 	.word	0x50000400
 8008fdc:	20000008 	.word	0x20000008
 8008fe0:	0800d13c 	.word	0x0800d13c
 8008fe4:	0800d140 	.word	0x0800d140
 8008fe8:	0800d144 	.word	0x0800d144
 8008fec:	2000002c 	.word	0x2000002c
 8008ff0:	20000030 	.word	0x20000030
 8008ff4:	200003c8 	.word	0x200003c8
 8008ff8:	2000041c 	.word	0x2000041c
 8008ffc:	20000470 	.word	0x20000470
 8009000:	200004c4 	.word	0x200004c4
 8009004:	20000518 	.word	0x20000518
 8009008:	2000056c 	.word	0x2000056c
 800900c:	200005c0 	.word	0x200005c0
 8009010:	20000614 	.word	0x20000614
 8009014:	20000ef8 	.word	0x20000ef8
 8009018:	20000ce0 	.word	0x20000ce0
 800901c:	20000d24 	.word	0x20000d24
 8009020:	20000e5c 	.word	0x20000e5c
 8009024:	20000d64 	.word	0x20000d64

08009028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009028:	b590      	push	{r4, r7, lr}
 800902a:	b099      	sub	sp, #100	; 0x64
 800902c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800902e:	242c      	movs	r4, #44	; 0x2c
 8009030:	193b      	adds	r3, r7, r4
 8009032:	0018      	movs	r0, r3
 8009034:	2334      	movs	r3, #52	; 0x34
 8009036:	001a      	movs	r2, r3
 8009038:	2100      	movs	r1, #0
 800903a:	f004 f862 	bl	800d102 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800903e:	231c      	movs	r3, #28
 8009040:	18fb      	adds	r3, r7, r3
 8009042:	0018      	movs	r0, r3
 8009044:	2310      	movs	r3, #16
 8009046:	001a      	movs	r2, r3
 8009048:	2100      	movs	r1, #0
 800904a:	f004 f85a 	bl	800d102 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800904e:	003b      	movs	r3, r7
 8009050:	0018      	movs	r0, r3
 8009052:	231c      	movs	r3, #28
 8009054:	001a      	movs	r2, r3
 8009056:	2100      	movs	r1, #0
 8009058:	f004 f853 	bl	800d102 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800905c:	2380      	movs	r3, #128	; 0x80
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	0018      	movs	r0, r3
 8009062:	f7fa f9ab 	bl	80033bc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009066:	193b      	adds	r3, r7, r4
 8009068:	2202      	movs	r2, #2
 800906a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800906c:	193b      	adds	r3, r7, r4
 800906e:	2280      	movs	r2, #128	; 0x80
 8009070:	0052      	lsls	r2, r2, #1
 8009072:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8009074:	193b      	adds	r3, r7, r4
 8009076:	2200      	movs	r2, #0
 8009078:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800907a:	193b      	adds	r3, r7, r4
 800907c:	2240      	movs	r2, #64	; 0x40
 800907e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009080:	193b      	adds	r3, r7, r4
 8009082:	2200      	movs	r2, #0
 8009084:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009086:	193b      	adds	r3, r7, r4
 8009088:	0018      	movs	r0, r3
 800908a:	f7fa f9e3 	bl	8003454 <HAL_RCC_OscConfig>
 800908e:	1e03      	subs	r3, r0, #0
 8009090:	d001      	beq.n	8009096 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8009092:	f002 f88b 	bl	800b1ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009096:	211c      	movs	r1, #28
 8009098:	187b      	adds	r3, r7, r1
 800909a:	2207      	movs	r2, #7
 800909c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800909e:	187b      	adds	r3, r7, r1
 80090a0:	2200      	movs	r2, #0
 80090a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80090a4:	187b      	adds	r3, r7, r1
 80090a6:	2200      	movs	r2, #0
 80090a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80090aa:	187b      	adds	r3, r7, r1
 80090ac:	2200      	movs	r2, #0
 80090ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80090b0:	187b      	adds	r3, r7, r1
 80090b2:	2100      	movs	r1, #0
 80090b4:	0018      	movs	r0, r3
 80090b6:	f7fa fce3 	bl	8003a80 <HAL_RCC_ClockConfig>
 80090ba:	1e03      	subs	r3, r0, #0
 80090bc:	d001      	beq.n	80090c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80090be:	f002 f875 	bl	800b1ac <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80090c2:	003b      	movs	r3, r7
 80090c4:	4a0b      	ldr	r2, [pc, #44]	; (80090f4 <SystemClock_Config+0xcc>)
 80090c6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80090c8:	003b      	movs	r3, r7
 80090ca:	2200      	movs	r2, #0
 80090cc:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80090ce:	003b      	movs	r3, r7
 80090d0:	2200      	movs	r2, #0
 80090d2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80090d4:	003b      	movs	r3, r7
 80090d6:	2200      	movs	r2, #0
 80090d8:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80090da:	003b      	movs	r3, r7
 80090dc:	0018      	movs	r0, r3
 80090de:	f7fa fe79 	bl	8003dd4 <HAL_RCCEx_PeriphCLKConfig>
 80090e2:	1e03      	subs	r3, r0, #0
 80090e4:	d001      	beq.n	80090ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80090e6:	f002 f861 	bl	800b1ac <Error_Handler>
  }
}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	46bd      	mov	sp, r7
 80090ee:	b019      	add	sp, #100	; 0x64
 80090f0:	bd90      	pop	{r4, r7, pc}
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	00004003 	.word	0x00004003

080090f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08a      	sub	sp, #40	; 0x28
 80090fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80090fe:	2310      	movs	r3, #16
 8009100:	18fb      	adds	r3, r7, r3
 8009102:	0018      	movs	r0, r3
 8009104:	2318      	movs	r3, #24
 8009106:	001a      	movs	r2, r3
 8009108:	2100      	movs	r1, #0
 800910a:	f003 fffa 	bl	800d102 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800910e:	1d3b      	adds	r3, r7, #4
 8009110:	0018      	movs	r0, r3
 8009112:	230c      	movs	r3, #12
 8009114:	001a      	movs	r2, r3
 8009116:	2100      	movs	r1, #0
 8009118:	f003 fff3 	bl	800d102 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800911c:	4b65      	ldr	r3, [pc, #404]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800911e:	4a66      	ldr	r2, [pc, #408]	; (80092b8 <MX_ADC1_Init+0x1c0>)
 8009120:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8009122:	4b64      	ldr	r3, [pc, #400]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009124:	2280      	movs	r2, #128	; 0x80
 8009126:	05d2      	lsls	r2, r2, #23
 8009128:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800912a:	4b62      	ldr	r3, [pc, #392]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800912c:	2200      	movs	r2, #0
 800912e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009130:	4b60      	ldr	r3, [pc, #384]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009132:	2200      	movs	r2, #0
 8009134:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8009136:	4b5f      	ldr	r3, [pc, #380]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009138:	2280      	movs	r2, #128	; 0x80
 800913a:	0392      	lsls	r2, r2, #14
 800913c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800913e:	4b5d      	ldr	r3, [pc, #372]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009140:	2204      	movs	r2, #4
 8009142:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009144:	4b5b      	ldr	r3, [pc, #364]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009146:	2200      	movs	r2, #0
 8009148:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800914a:	4b5a      	ldr	r3, [pc, #360]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800914c:	2200      	movs	r2, #0
 800914e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009150:	4b58      	ldr	r3, [pc, #352]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009152:	2201      	movs	r2, #1
 8009154:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 8;
 8009156:	4b57      	ldr	r3, [pc, #348]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009158:	2208      	movs	r2, #8
 800915a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800915c:	4b55      	ldr	r3, [pc, #340]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800915e:	2220      	movs	r2, #32
 8009160:	2100      	movs	r1, #0
 8009162:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009164:	4b53      	ldr	r3, [pc, #332]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009166:	2200      	movs	r2, #0
 8009168:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800916a:	4b52      	ldr	r3, [pc, #328]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800916c:	2200      	movs	r2, #0
 800916e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009170:	4b50      	ldr	r3, [pc, #320]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009172:	222c      	movs	r2, #44	; 0x2c
 8009174:	2101      	movs	r1, #1
 8009176:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009178:	4b4e      	ldr	r3, [pc, #312]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800917a:	2200      	movs	r2, #0
 800917c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800917e:	4b4d      	ldr	r3, [pc, #308]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009180:	2207      	movs	r2, #7
 8009182:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8009184:	4b4b      	ldr	r3, [pc, #300]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009186:	2207      	movs	r2, #7
 8009188:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800918a:	4b4a      	ldr	r3, [pc, #296]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800918c:	223c      	movs	r2, #60	; 0x3c
 800918e:	2100      	movs	r1, #0
 8009190:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8009192:	4b48      	ldr	r3, [pc, #288]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 8009194:	2200      	movs	r2, #0
 8009196:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009198:	4b46      	ldr	r3, [pc, #280]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800919a:	0018      	movs	r0, r3
 800919c:	f7f8 fb4e 	bl	800183c <HAL_ADC_Init>
 80091a0:	1e03      	subs	r3, r0, #0
 80091a2:	d001      	beq.n	80091a8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80091a4:	f002 f802 	bl	800b1ac <Error_Handler>
  }
  /** Configure Analog WatchDog 2 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80091a8:	2110      	movs	r1, #16
 80091aa:	187b      	adds	r3, r7, r1
 80091ac:	22c0      	movs	r2, #192	; 0xc0
 80091ae:	0412      	lsls	r2, r2, #16
 80091b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80091b2:	187a      	adds	r2, r7, r1
 80091b4:	4b3f      	ldr	r3, [pc, #252]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 80091b6:	0011      	movs	r1, r2
 80091b8:	0018      	movs	r0, r3
 80091ba:	f7f9 f829 	bl	8002210 <HAL_ADC_AnalogWDGConfig>
 80091be:	1e03      	subs	r3, r0, #0
 80091c0:	d001      	beq.n	80091c6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80091c2:	f001 fff3 	bl	800b1ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80091c6:	1d3b      	adds	r3, r7, #4
 80091c8:	4a3c      	ldr	r2, [pc, #240]	; (80092bc <MX_ADC1_Init+0x1c4>)
 80091ca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80091cc:	1d3b      	adds	r3, r7, #4
 80091ce:	2204      	movs	r2, #4
 80091d0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80091d2:	1d3b      	adds	r3, r7, #4
 80091d4:	2200      	movs	r2, #0
 80091d6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80091d8:	1d3a      	adds	r2, r7, #4
 80091da:	4b36      	ldr	r3, [pc, #216]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 80091dc:	0011      	movs	r1, r2
 80091de:	0018      	movs	r0, r3
 80091e0:	f7f8 fe42 	bl	8001e68 <HAL_ADC_ConfigChannel>
 80091e4:	1e03      	subs	r3, r0, #0
 80091e6:	d001      	beq.n	80091ec <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80091e8:	f001 ffe0 	bl	800b1ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80091ec:	1d3b      	adds	r3, r7, #4
 80091ee:	4a34      	ldr	r2, [pc, #208]	; (80092c0 <MX_ADC1_Init+0x1c8>)
 80091f0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80091f2:	1d3b      	adds	r3, r7, #4
 80091f4:	2208      	movs	r2, #8
 80091f6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80091f8:	1d3a      	adds	r2, r7, #4
 80091fa:	4b2e      	ldr	r3, [pc, #184]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 80091fc:	0011      	movs	r1, r2
 80091fe:	0018      	movs	r0, r3
 8009200:	f7f8 fe32 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8009204:	1e03      	subs	r3, r0, #0
 8009206:	d001      	beq.n	800920c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8009208:	f001 ffd0 	bl	800b1ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800920c:	1d3b      	adds	r3, r7, #4
 800920e:	4a2d      	ldr	r2, [pc, #180]	; (80092c4 <MX_ADC1_Init+0x1cc>)
 8009210:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8009212:	1d3b      	adds	r3, r7, #4
 8009214:	220c      	movs	r2, #12
 8009216:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009218:	1d3a      	adds	r2, r7, #4
 800921a:	4b26      	ldr	r3, [pc, #152]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800921c:	0011      	movs	r1, r2
 800921e:	0018      	movs	r0, r3
 8009220:	f7f8 fe22 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8009224:	1e03      	subs	r3, r0, #0
 8009226:	d001      	beq.n	800922c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8009228:	f001 ffc0 	bl	800b1ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800922c:	1d3b      	adds	r3, r7, #4
 800922e:	4a26      	ldr	r2, [pc, #152]	; (80092c8 <MX_ADC1_Init+0x1d0>)
 8009230:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8009232:	1d3b      	adds	r3, r7, #4
 8009234:	2210      	movs	r2, #16
 8009236:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009238:	1d3a      	adds	r2, r7, #4
 800923a:	4b1e      	ldr	r3, [pc, #120]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800923c:	0011      	movs	r1, r2
 800923e:	0018      	movs	r0, r3
 8009240:	f7f8 fe12 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8009244:	1e03      	subs	r3, r0, #0
 8009246:	d001      	beq.n	800924c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8009248:	f001 ffb0 	bl	800b1ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800924c:	1d3b      	adds	r3, r7, #4
 800924e:	4a1f      	ldr	r2, [pc, #124]	; (80092cc <MX_ADC1_Init+0x1d4>)
 8009250:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8009252:	1d3b      	adds	r3, r7, #4
 8009254:	2214      	movs	r2, #20
 8009256:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009258:	1d3a      	adds	r2, r7, #4
 800925a:	4b16      	ldr	r3, [pc, #88]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800925c:	0011      	movs	r1, r2
 800925e:	0018      	movs	r0, r3
 8009260:	f7f8 fe02 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8009264:	1e03      	subs	r3, r0, #0
 8009266:	d001      	beq.n	800926c <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8009268:	f001 ffa0 	bl	800b1ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800926c:	1d3b      	adds	r3, r7, #4
 800926e:	4a18      	ldr	r2, [pc, #96]	; (80092d0 <MX_ADC1_Init+0x1d8>)
 8009270:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8009272:	1d3b      	adds	r3, r7, #4
 8009274:	2218      	movs	r2, #24
 8009276:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009278:	1d3a      	adds	r2, r7, #4
 800927a:	4b0e      	ldr	r3, [pc, #56]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800927c:	0011      	movs	r1, r2
 800927e:	0018      	movs	r0, r3
 8009280:	f7f8 fdf2 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8009284:	1e03      	subs	r3, r0, #0
 8009286:	d001      	beq.n	800928c <MX_ADC1_Init+0x194>
  {
    Error_Handler();
 8009288:	f001 ff90 	bl	800b1ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800928c:	1d3b      	adds	r3, r7, #4
 800928e:	4a11      	ldr	r2, [pc, #68]	; (80092d4 <MX_ADC1_Init+0x1dc>)
 8009290:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8009292:	1d3b      	adds	r3, r7, #4
 8009294:	221c      	movs	r2, #28
 8009296:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009298:	1d3a      	adds	r2, r7, #4
 800929a:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <MX_ADC1_Init+0x1bc>)
 800929c:	0011      	movs	r1, r2
 800929e:	0018      	movs	r0, r3
 80092a0:	f7f8 fde2 	bl	8001e68 <HAL_ADC_ConfigChannel>
 80092a4:	1e03      	subs	r3, r0, #0
 80092a6:	d001      	beq.n	80092ac <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 80092a8:	f001 ff80 	bl	800b1ac <Error_Handler>
  {
    Error_Handler();
  }*/
  /* USER CODE END ADC1_Init 2 */

}
 80092ac:	46c0      	nop			; (mov r8, r8)
 80092ae:	46bd      	mov	sp, r7
 80092b0:	b00a      	add	sp, #40	; 0x28
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20000d64 	.word	0x20000d64
 80092b8:	40012400 	.word	0x40012400
 80092bc:	04000002 	.word	0x04000002
 80092c0:	08000004 	.word	0x08000004
 80092c4:	0c000008 	.word	0x0c000008
 80092c8:	10000010 	.word	0x10000010
 80092cc:	14000020 	.word	0x14000020
 80092d0:	18000040 	.word	0x18000040
 80092d4:	1c000080 	.word	0x1c000080

080092d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b098      	sub	sp, #96	; 0x60
 80092dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80092de:	2354      	movs	r3, #84	; 0x54
 80092e0:	18fb      	adds	r3, r7, r3
 80092e2:	0018      	movs	r0, r3
 80092e4:	230c      	movs	r3, #12
 80092e6:	001a      	movs	r2, r3
 80092e8:	2100      	movs	r1, #0
 80092ea:	f003 ff0a 	bl	800d102 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80092ee:	2338      	movs	r3, #56	; 0x38
 80092f0:	18fb      	adds	r3, r7, r3
 80092f2:	0018      	movs	r0, r3
 80092f4:	231c      	movs	r3, #28
 80092f6:	001a      	movs	r2, r3
 80092f8:	2100      	movs	r1, #0
 80092fa:	f003 ff02 	bl	800d102 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80092fe:	1d3b      	adds	r3, r7, #4
 8009300:	0018      	movs	r0, r3
 8009302:	2334      	movs	r3, #52	; 0x34
 8009304:	001a      	movs	r2, r3
 8009306:	2100      	movs	r1, #0
 8009308:	f003 fefb 	bl	800d102 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800930c:	4b56      	ldr	r3, [pc, #344]	; (8009468 <MX_TIM1_Init+0x190>)
 800930e:	4a57      	ldr	r2, [pc, #348]	; (800946c <MX_TIM1_Init+0x194>)
 8009310:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8009312:	4b55      	ldr	r3, [pc, #340]	; (8009468 <MX_TIM1_Init+0x190>)
 8009314:	2203      	movs	r2, #3
 8009316:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009318:	4b53      	ldr	r3, [pc, #332]	; (8009468 <MX_TIM1_Init+0x190>)
 800931a:	2200      	movs	r2, #0
 800931c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 800931e:	4b52      	ldr	r3, [pc, #328]	; (8009468 <MX_TIM1_Init+0x190>)
 8009320:	22fa      	movs	r2, #250	; 0xfa
 8009322:	0052      	lsls	r2, r2, #1
 8009324:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009326:	4b50      	ldr	r3, [pc, #320]	; (8009468 <MX_TIM1_Init+0x190>)
 8009328:	2200      	movs	r2, #0
 800932a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800932c:	4b4e      	ldr	r3, [pc, #312]	; (8009468 <MX_TIM1_Init+0x190>)
 800932e:	2200      	movs	r2, #0
 8009330:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009332:	4b4d      	ldr	r3, [pc, #308]	; (8009468 <MX_TIM1_Init+0x190>)
 8009334:	2200      	movs	r2, #0
 8009336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009338:	4b4b      	ldr	r3, [pc, #300]	; (8009468 <MX_TIM1_Init+0x190>)
 800933a:	0018      	movs	r0, r3
 800933c:	f7fa feaa 	bl	8004094 <HAL_TIM_PWM_Init>
 8009340:	1e03      	subs	r3, r0, #0
 8009342:	d001      	beq.n	8009348 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8009344:	f001 ff32 	bl	800b1ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009348:	2154      	movs	r1, #84	; 0x54
 800934a:	187b      	adds	r3, r7, r1
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009350:	187b      	adds	r3, r7, r1
 8009352:	2200      	movs	r2, #0
 8009354:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009356:	187b      	adds	r3, r7, r1
 8009358:	2200      	movs	r2, #0
 800935a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800935c:	187a      	adds	r2, r7, r1
 800935e:	4b42      	ldr	r3, [pc, #264]	; (8009468 <MX_TIM1_Init+0x190>)
 8009360:	0011      	movs	r1, r2
 8009362:	0018      	movs	r0, r3
 8009364:	f7fb fb72 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 8009368:	1e03      	subs	r3, r0, #0
 800936a:	d001      	beq.n	8009370 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800936c:	f001 ff1e 	bl	800b1ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009370:	2138      	movs	r1, #56	; 0x38
 8009372:	187b      	adds	r3, r7, r1
 8009374:	2260      	movs	r2, #96	; 0x60
 8009376:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009378:	187b      	adds	r3, r7, r1
 800937a:	2200      	movs	r2, #0
 800937c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800937e:	187b      	adds	r3, r7, r1
 8009380:	2202      	movs	r2, #2
 8009382:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009384:	187b      	adds	r3, r7, r1
 8009386:	2200      	movs	r2, #0
 8009388:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800938a:	187b      	adds	r3, r7, r1
 800938c:	2200      	movs	r2, #0
 800938e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009390:	187b      	adds	r3, r7, r1
 8009392:	2200      	movs	r2, #0
 8009394:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009396:	187b      	adds	r3, r7, r1
 8009398:	2200      	movs	r2, #0
 800939a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800939c:	1879      	adds	r1, r7, r1
 800939e:	4b32      	ldr	r3, [pc, #200]	; (8009468 <MX_TIM1_Init+0x190>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	0018      	movs	r0, r3
 80093a4:	f7fa fef6 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 80093a8:	1e03      	subs	r3, r0, #0
 80093aa:	d001      	beq.n	80093b0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80093ac:	f001 fefe 	bl	800b1ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80093b0:	2338      	movs	r3, #56	; 0x38
 80093b2:	18f9      	adds	r1, r7, r3
 80093b4:	4b2c      	ldr	r3, [pc, #176]	; (8009468 <MX_TIM1_Init+0x190>)
 80093b6:	2204      	movs	r2, #4
 80093b8:	0018      	movs	r0, r3
 80093ba:	f7fa feeb 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 80093be:	1e03      	subs	r3, r0, #0
 80093c0:	d001      	beq.n	80093c6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80093c2:	f001 fef3 	bl	800b1ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80093c6:	2338      	movs	r3, #56	; 0x38
 80093c8:	18f9      	adds	r1, r7, r3
 80093ca:	4b27      	ldr	r3, [pc, #156]	; (8009468 <MX_TIM1_Init+0x190>)
 80093cc:	2208      	movs	r2, #8
 80093ce:	0018      	movs	r0, r3
 80093d0:	f7fa fee0 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 80093d4:	1e03      	subs	r3, r0, #0
 80093d6:	d001      	beq.n	80093dc <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80093d8:	f001 fee8 	bl	800b1ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80093dc:	2338      	movs	r3, #56	; 0x38
 80093de:	18f9      	adds	r1, r7, r3
 80093e0:	4b21      	ldr	r3, [pc, #132]	; (8009468 <MX_TIM1_Init+0x190>)
 80093e2:	220c      	movs	r2, #12
 80093e4:	0018      	movs	r0, r3
 80093e6:	f7fa fed5 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 80093ea:	1e03      	subs	r3, r0, #0
 80093ec:	d001      	beq.n	80093f2 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 80093ee:	f001 fedd 	bl	800b1ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80093f2:	1d3b      	adds	r3, r7, #4
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80093f8:	1d3b      	adds	r3, r7, #4
 80093fa:	2200      	movs	r2, #0
 80093fc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80093fe:	1d3b      	adds	r3, r7, #4
 8009400:	2200      	movs	r2, #0
 8009402:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009404:	1d3b      	adds	r3, r7, #4
 8009406:	2200      	movs	r2, #0
 8009408:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800940a:	1d3b      	adds	r3, r7, #4
 800940c:	2200      	movs	r2, #0
 800940e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009410:	1d3b      	adds	r3, r7, #4
 8009412:	2280      	movs	r2, #128	; 0x80
 8009414:	0192      	lsls	r2, r2, #6
 8009416:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009418:	1d3b      	adds	r3, r7, #4
 800941a:	2200      	movs	r2, #0
 800941c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800941e:	1d3b      	adds	r3, r7, #4
 8009420:	2200      	movs	r2, #0
 8009422:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009424:	1d3b      	adds	r3, r7, #4
 8009426:	2200      	movs	r2, #0
 8009428:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800942a:	1d3b      	adds	r3, r7, #4
 800942c:	2280      	movs	r2, #128	; 0x80
 800942e:	0492      	lsls	r2, r2, #18
 8009430:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009432:	1d3b      	adds	r3, r7, #4
 8009434:	2200      	movs	r2, #0
 8009436:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009438:	1d3b      	adds	r3, r7, #4
 800943a:	2200      	movs	r2, #0
 800943c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800943e:	1d3b      	adds	r3, r7, #4
 8009440:	2200      	movs	r2, #0
 8009442:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009444:	1d3a      	adds	r2, r7, #4
 8009446:	4b08      	ldr	r3, [pc, #32]	; (8009468 <MX_TIM1_Init+0x190>)
 8009448:	0011      	movs	r1, r2
 800944a:	0018      	movs	r0, r3
 800944c:	f7fb fb54 	bl	8004af8 <HAL_TIMEx_ConfigBreakDeadTime>
 8009450:	1e03      	subs	r3, r0, #0
 8009452:	d001      	beq.n	8009458 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8009454:	f001 feaa 	bl	800b1ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009458:	4b03      	ldr	r3, [pc, #12]	; (8009468 <MX_TIM1_Init+0x190>)
 800945a:	0018      	movs	r0, r3
 800945c:	f003 f882 	bl	800c564 <HAL_TIM_MspPostInit>

}
 8009460:	46c0      	nop			; (mov r8, r8)
 8009462:	46bd      	mov	sp, r7
 8009464:	b018      	add	sp, #96	; 0x60
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000ef8 	.word	0x20000ef8
 800946c:	40012c00 	.word	0x40012c00

08009470 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08a      	sub	sp, #40	; 0x28
 8009474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009476:	231c      	movs	r3, #28
 8009478:	18fb      	adds	r3, r7, r3
 800947a:	0018      	movs	r0, r3
 800947c:	230c      	movs	r3, #12
 800947e:	001a      	movs	r2, r3
 8009480:	2100      	movs	r1, #0
 8009482:	f003 fe3e 	bl	800d102 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009486:	003b      	movs	r3, r7
 8009488:	0018      	movs	r0, r3
 800948a:	231c      	movs	r3, #28
 800948c:	001a      	movs	r2, r3
 800948e:	2100      	movs	r1, #0
 8009490:	f003 fe37 	bl	800d102 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009494:	4b29      	ldr	r3, [pc, #164]	; (800953c <MX_TIM3_Init+0xcc>)
 8009496:	4a2a      	ldr	r2, [pc, #168]	; (8009540 <MX_TIM3_Init+0xd0>)
 8009498:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 800949a:	4b28      	ldr	r3, [pc, #160]	; (800953c <MX_TIM3_Init+0xcc>)
 800949c:	2203      	movs	r2, #3
 800949e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094a0:	4b26      	ldr	r3, [pc, #152]	; (800953c <MX_TIM3_Init+0xcc>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 80094a6:	4b25      	ldr	r3, [pc, #148]	; (800953c <MX_TIM3_Init+0xcc>)
 80094a8:	22fa      	movs	r2, #250	; 0xfa
 80094aa:	0052      	lsls	r2, r2, #1
 80094ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094ae:	4b23      	ldr	r3, [pc, #140]	; (800953c <MX_TIM3_Init+0xcc>)
 80094b0:	2200      	movs	r2, #0
 80094b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094b4:	4b21      	ldr	r3, [pc, #132]	; (800953c <MX_TIM3_Init+0xcc>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80094ba:	4b20      	ldr	r3, [pc, #128]	; (800953c <MX_TIM3_Init+0xcc>)
 80094bc:	0018      	movs	r0, r3
 80094be:	f7fa fde9 	bl	8004094 <HAL_TIM_PWM_Init>
 80094c2:	1e03      	subs	r3, r0, #0
 80094c4:	d001      	beq.n	80094ca <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80094c6:	f001 fe71 	bl	800b1ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80094ca:	211c      	movs	r1, #28
 80094cc:	187b      	adds	r3, r7, r1
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80094d2:	187b      	adds	r3, r7, r1
 80094d4:	2200      	movs	r2, #0
 80094d6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80094d8:	187a      	adds	r2, r7, r1
 80094da:	4b18      	ldr	r3, [pc, #96]	; (800953c <MX_TIM3_Init+0xcc>)
 80094dc:	0011      	movs	r1, r2
 80094de:	0018      	movs	r0, r3
 80094e0:	f7fb fab4 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 80094e4:	1e03      	subs	r3, r0, #0
 80094e6:	d001      	beq.n	80094ec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80094e8:	f001 fe60 	bl	800b1ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80094ec:	003b      	movs	r3, r7
 80094ee:	2260      	movs	r2, #96	; 0x60
 80094f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80094f2:	003b      	movs	r3, r7
 80094f4:	2200      	movs	r2, #0
 80094f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80094f8:	003b      	movs	r3, r7
 80094fa:	2202      	movs	r2, #2
 80094fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80094fe:	003b      	movs	r3, r7
 8009500:	2200      	movs	r2, #0
 8009502:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009504:	0039      	movs	r1, r7
 8009506:	4b0d      	ldr	r3, [pc, #52]	; (800953c <MX_TIM3_Init+0xcc>)
 8009508:	2200      	movs	r2, #0
 800950a:	0018      	movs	r0, r3
 800950c:	f7fa fe42 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 8009510:	1e03      	subs	r3, r0, #0
 8009512:	d001      	beq.n	8009518 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8009514:	f001 fe4a 	bl	800b1ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009518:	0039      	movs	r1, r7
 800951a:	4b08      	ldr	r3, [pc, #32]	; (800953c <MX_TIM3_Init+0xcc>)
 800951c:	2204      	movs	r2, #4
 800951e:	0018      	movs	r0, r3
 8009520:	f7fa fe38 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 8009524:	1e03      	subs	r3, r0, #0
 8009526:	d001      	beq.n	800952c <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8009528:	f001 fe40 	bl	800b1ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800952c:	4b03      	ldr	r3, [pc, #12]	; (800953c <MX_TIM3_Init+0xcc>)
 800952e:	0018      	movs	r0, r3
 8009530:	f003 f818 	bl	800c564 <HAL_TIM_MspPostInit>

}
 8009534:	46c0      	nop			; (mov r8, r8)
 8009536:	46bd      	mov	sp, r7
 8009538:	b00a      	add	sp, #40	; 0x28
 800953a:	bd80      	pop	{r7, pc}
 800953c:	20000d24 	.word	0x20000d24
 8009540:	40000400 	.word	0x40000400

08009544 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b098      	sub	sp, #96	; 0x60
 8009548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800954a:	2354      	movs	r3, #84	; 0x54
 800954c:	18fb      	adds	r3, r7, r3
 800954e:	0018      	movs	r0, r3
 8009550:	230c      	movs	r3, #12
 8009552:	001a      	movs	r2, r3
 8009554:	2100      	movs	r1, #0
 8009556:	f003 fdd4 	bl	800d102 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800955a:	2338      	movs	r3, #56	; 0x38
 800955c:	18fb      	adds	r3, r7, r3
 800955e:	0018      	movs	r0, r3
 8009560:	231c      	movs	r3, #28
 8009562:	001a      	movs	r2, r3
 8009564:	2100      	movs	r1, #0
 8009566:	f003 fdcc 	bl	800d102 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800956a:	1d3b      	adds	r3, r7, #4
 800956c:	0018      	movs	r0, r3
 800956e:	2334      	movs	r3, #52	; 0x34
 8009570:	001a      	movs	r2, r3
 8009572:	2100      	movs	r1, #0
 8009574:	f003 fdc5 	bl	800d102 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8009578:	4b42      	ldr	r3, [pc, #264]	; (8009684 <MX_TIM15_Init+0x140>)
 800957a:	4a43      	ldr	r2, [pc, #268]	; (8009688 <MX_TIM15_Init+0x144>)
 800957c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4;
 800957e:	4b41      	ldr	r3, [pc, #260]	; (8009684 <MX_TIM15_Init+0x140>)
 8009580:	2204      	movs	r2, #4
 8009582:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009584:	4b3f      	ldr	r3, [pc, #252]	; (8009684 <MX_TIM15_Init+0x140>)
 8009586:	2200      	movs	r2, #0
 8009588:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 500;
 800958a:	4b3e      	ldr	r3, [pc, #248]	; (8009684 <MX_TIM15_Init+0x140>)
 800958c:	22fa      	movs	r2, #250	; 0xfa
 800958e:	0052      	lsls	r2, r2, #1
 8009590:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009592:	4b3c      	ldr	r3, [pc, #240]	; (8009684 <MX_TIM15_Init+0x140>)
 8009594:	2200      	movs	r2, #0
 8009596:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8009598:	4b3a      	ldr	r3, [pc, #232]	; (8009684 <MX_TIM15_Init+0x140>)
 800959a:	2200      	movs	r2, #0
 800959c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800959e:	4b39      	ldr	r3, [pc, #228]	; (8009684 <MX_TIM15_Init+0x140>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80095a4:	4b37      	ldr	r3, [pc, #220]	; (8009684 <MX_TIM15_Init+0x140>)
 80095a6:	0018      	movs	r0, r3
 80095a8:	f7fa fd74 	bl	8004094 <HAL_TIM_PWM_Init>
 80095ac:	1e03      	subs	r3, r0, #0
 80095ae:	d001      	beq.n	80095b4 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80095b0:	f001 fdfc 	bl	800b1ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095b4:	2154      	movs	r1, #84	; 0x54
 80095b6:	187b      	adds	r3, r7, r1
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095bc:	187b      	adds	r3, r7, r1
 80095be:	2200      	movs	r2, #0
 80095c0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80095c2:	187a      	adds	r2, r7, r1
 80095c4:	4b2f      	ldr	r3, [pc, #188]	; (8009684 <MX_TIM15_Init+0x140>)
 80095c6:	0011      	movs	r1, r2
 80095c8:	0018      	movs	r0, r3
 80095ca:	f7fb fa3f 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 80095ce:	1e03      	subs	r3, r0, #0
 80095d0:	d001      	beq.n	80095d6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80095d2:	f001 fdeb 	bl	800b1ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095d6:	2138      	movs	r1, #56	; 0x38
 80095d8:	187b      	adds	r3, r7, r1
 80095da:	2260      	movs	r2, #96	; 0x60
 80095dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80095de:	187b      	adds	r3, r7, r1
 80095e0:	2200      	movs	r2, #0
 80095e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80095e4:	187b      	adds	r3, r7, r1
 80095e6:	2202      	movs	r2, #2
 80095e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80095ea:	187b      	adds	r3, r7, r1
 80095ec:	2200      	movs	r2, #0
 80095ee:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095f0:	187b      	adds	r3, r7, r1
 80095f2:	2200      	movs	r2, #0
 80095f4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80095f6:	187b      	adds	r3, r7, r1
 80095f8:	2200      	movs	r2, #0
 80095fa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80095fc:	187b      	adds	r3, r7, r1
 80095fe:	2200      	movs	r2, #0
 8009600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009602:	1879      	adds	r1, r7, r1
 8009604:	4b1f      	ldr	r3, [pc, #124]	; (8009684 <MX_TIM15_Init+0x140>)
 8009606:	2200      	movs	r2, #0
 8009608:	0018      	movs	r0, r3
 800960a:	f7fa fdc3 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 800960e:	1e03      	subs	r3, r0, #0
 8009610:	d001      	beq.n	8009616 <MX_TIM15_Init+0xd2>
  {
    Error_Handler();
 8009612:	f001 fdcb 	bl	800b1ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009616:	2338      	movs	r3, #56	; 0x38
 8009618:	18f9      	adds	r1, r7, r3
 800961a:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <MX_TIM15_Init+0x140>)
 800961c:	2204      	movs	r2, #4
 800961e:	0018      	movs	r0, r3
 8009620:	f7fa fdb8 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 8009624:	1e03      	subs	r3, r0, #0
 8009626:	d001      	beq.n	800962c <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8009628:	f001 fdc0 	bl	800b1ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800962c:	1d3b      	adds	r3, r7, #4
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009632:	1d3b      	adds	r3, r7, #4
 8009634:	2200      	movs	r2, #0
 8009636:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009638:	1d3b      	adds	r3, r7, #4
 800963a:	2200      	movs	r2, #0
 800963c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800963e:	1d3b      	adds	r3, r7, #4
 8009640:	2200      	movs	r2, #0
 8009642:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009644:	1d3b      	adds	r3, r7, #4
 8009646:	2200      	movs	r2, #0
 8009648:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800964a:	1d3b      	adds	r3, r7, #4
 800964c:	2280      	movs	r2, #128	; 0x80
 800964e:	0192      	lsls	r2, r2, #6
 8009650:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009652:	1d3b      	adds	r3, r7, #4
 8009654:	2200      	movs	r2, #0
 8009656:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009658:	1d3b      	adds	r3, r7, #4
 800965a:	2200      	movs	r2, #0
 800965c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800965e:	1d3a      	adds	r2, r7, #4
 8009660:	4b08      	ldr	r3, [pc, #32]	; (8009684 <MX_TIM15_Init+0x140>)
 8009662:	0011      	movs	r1, r2
 8009664:	0018      	movs	r0, r3
 8009666:	f7fb fa47 	bl	8004af8 <HAL_TIMEx_ConfigBreakDeadTime>
 800966a:	1e03      	subs	r3, r0, #0
 800966c:	d001      	beq.n	8009672 <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 800966e:	f001 fd9d 	bl	800b1ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8009672:	4b04      	ldr	r3, [pc, #16]	; (8009684 <MX_TIM15_Init+0x140>)
 8009674:	0018      	movs	r0, r3
 8009676:	f002 ff75 	bl	800c564 <HAL_TIM_MspPostInit>

}
 800967a:	46c0      	nop			; (mov r8, r8)
 800967c:	46bd      	mov	sp, r7
 800967e:	b018      	add	sp, #96	; 0x60
 8009680:	bd80      	pop	{r7, pc}
 8009682:	46c0      	nop			; (mov r8, r8)
 8009684:	20000ce0 	.word	0x20000ce0
 8009688:	40014000 	.word	0x40014000

0800968c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009690:	4b25      	ldr	r3, [pc, #148]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 8009692:	4a26      	ldr	r2, [pc, #152]	; (800972c <MX_USART1_UART_Init+0xa0>)
 8009694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009696:	4b24      	ldr	r3, [pc, #144]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 8009698:	22e1      	movs	r2, #225	; 0xe1
 800969a:	0252      	lsls	r2, r2, #9
 800969c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800969e:	4b22      	ldr	r3, [pc, #136]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80096a4:	4b20      	ldr	r3, [pc, #128]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80096aa:	4b1f      	ldr	r3, [pc, #124]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80096b0:	4b1d      	ldr	r3, [pc, #116]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096b2:	220c      	movs	r2, #12
 80096b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096b6:	4b1c      	ldr	r3, [pc, #112]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80096bc:	4b1a      	ldr	r3, [pc, #104]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096be:	2200      	movs	r2, #0
 80096c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80096c2:	4b19      	ldr	r3, [pc, #100]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80096c8:	4b17      	ldr	r3, [pc, #92]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 80096ce:	4b16      	ldr	r3, [pc, #88]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096d0:	2201      	movs	r2, #1
 80096d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80096d4:	4b14      	ldr	r3, [pc, #80]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096d6:	2280      	movs	r2, #128	; 0x80
 80096d8:	0292      	lsls	r2, r2, #10
 80096da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80096dc:	4b12      	ldr	r3, [pc, #72]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096de:	0018      	movs	r0, r3
 80096e0:	f7fb fab0 	bl	8004c44 <HAL_UART_Init>
 80096e4:	1e03      	subs	r3, r0, #0
 80096e6:	d001      	beq.n	80096ec <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80096e8:	f001 fd60 	bl	800b1ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80096ec:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 80096ee:	2100      	movs	r1, #0
 80096f0:	0018      	movs	r0, r3
 80096f2:	f7fc fe79 	bl	80063e8 <HAL_UARTEx_SetTxFifoThreshold>
 80096f6:	1e03      	subs	r3, r0, #0
 80096f8:	d001      	beq.n	80096fe <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 80096fa:	f001 fd57 	bl	800b1ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80096fe:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 8009700:	2100      	movs	r1, #0
 8009702:	0018      	movs	r0, r3
 8009704:	f7fc feb0 	bl	8006468 <HAL_UARTEx_SetRxFifoThreshold>
 8009708:	1e03      	subs	r3, r0, #0
 800970a:	d001      	beq.n	8009710 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 800970c:	f001 fd4e 	bl	800b1ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009710:	4b05      	ldr	r3, [pc, #20]	; (8009728 <MX_USART1_UART_Init+0x9c>)
 8009712:	0018      	movs	r0, r3
 8009714:	f7fc fe2e 	bl	8006374 <HAL_UARTEx_DisableFifoMode>
 8009718:	1e03      	subs	r3, r0, #0
 800971a:	d001      	beq.n	8009720 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 800971c:	f001 fd46 	bl	800b1ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009720:	46c0      	nop			; (mov r8, r8)
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	46c0      	nop			; (mov r8, r8)
 8009728:	20000dcc 	.word	0x20000dcc
 800972c:	40013800 	.word	0x40013800

08009730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009734:	4b25      	ldr	r3, [pc, #148]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 8009736:	4a26      	ldr	r2, [pc, #152]	; (80097d0 <MX_USART2_UART_Init+0xa0>)
 8009738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800973a:	4b24      	ldr	r3, [pc, #144]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 800973c:	22e1      	movs	r2, #225	; 0xe1
 800973e:	0252      	lsls	r2, r2, #9
 8009740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009742:	4b22      	ldr	r3, [pc, #136]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 8009744:	2200      	movs	r2, #0
 8009746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009748:	4b20      	ldr	r3, [pc, #128]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 800974a:	2200      	movs	r2, #0
 800974c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800974e:	4b1f      	ldr	r3, [pc, #124]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 8009750:	2200      	movs	r2, #0
 8009752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009754:	4b1d      	ldr	r3, [pc, #116]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 8009756:	220c      	movs	r2, #12
 8009758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800975a:	4b1c      	ldr	r3, [pc, #112]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 800975c:	2200      	movs	r2, #0
 800975e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009760:	4b1a      	ldr	r3, [pc, #104]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 8009762:	2200      	movs	r2, #0
 8009764:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009766:	4b19      	ldr	r3, [pc, #100]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 8009768:	2200      	movs	r2, #0
 800976a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800976c:	4b17      	ldr	r3, [pc, #92]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 800976e:	2200      	movs	r2, #0
 8009770:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8009772:	4b16      	ldr	r3, [pc, #88]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 8009774:	2201      	movs	r2, #1
 8009776:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8009778:	4b14      	ldr	r3, [pc, #80]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 800977a:	2280      	movs	r2, #128	; 0x80
 800977c:	0292      	lsls	r2, r2, #10
 800977e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009780:	4b12      	ldr	r3, [pc, #72]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 8009782:	0018      	movs	r0, r3
 8009784:	f7fb fa5e 	bl	8004c44 <HAL_UART_Init>
 8009788:	1e03      	subs	r3, r0, #0
 800978a:	d001      	beq.n	8009790 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 800978c:	f001 fd0e 	bl	800b1ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009790:	4b0e      	ldr	r3, [pc, #56]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 8009792:	2100      	movs	r1, #0
 8009794:	0018      	movs	r0, r3
 8009796:	f7fc fe27 	bl	80063e8 <HAL_UARTEx_SetTxFifoThreshold>
 800979a:	1e03      	subs	r3, r0, #0
 800979c:	d001      	beq.n	80097a2 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 800979e:	f001 fd05 	bl	800b1ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80097a2:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 80097a4:	2100      	movs	r1, #0
 80097a6:	0018      	movs	r0, r3
 80097a8:	f7fc fe5e 	bl	8006468 <HAL_UARTEx_SetRxFifoThreshold>
 80097ac:	1e03      	subs	r3, r0, #0
 80097ae:	d001      	beq.n	80097b4 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80097b0:	f001 fcfc 	bl	800b1ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80097b4:	4b05      	ldr	r3, [pc, #20]	; (80097cc <MX_USART2_UART_Init+0x9c>)
 80097b6:	0018      	movs	r0, r3
 80097b8:	f7fc fddc 	bl	8006374 <HAL_UARTEx_DisableFifoMode>
 80097bc:	1e03      	subs	r3, r0, #0
 80097be:	d001      	beq.n	80097c4 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 80097c0:	f001 fcf4 	bl	800b1ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80097c4:	46c0      	nop			; (mov r8, r8)
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	46c0      	nop			; (mov r8, r8)
 80097cc:	20000f38 	.word	0x20000f38
 80097d0:	40004400 	.word	0x40004400

080097d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80097d8:	4b18      	ldr	r3, [pc, #96]	; (800983c <MX_USART3_UART_Init+0x68>)
 80097da:	4a19      	ldr	r2, [pc, #100]	; (8009840 <MX_USART3_UART_Init+0x6c>)
 80097dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80097de:	4b17      	ldr	r3, [pc, #92]	; (800983c <MX_USART3_UART_Init+0x68>)
 80097e0:	22e1      	movs	r2, #225	; 0xe1
 80097e2:	0252      	lsls	r2, r2, #9
 80097e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80097e6:	4b15      	ldr	r3, [pc, #84]	; (800983c <MX_USART3_UART_Init+0x68>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80097ec:	4b13      	ldr	r3, [pc, #76]	; (800983c <MX_USART3_UART_Init+0x68>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80097f2:	4b12      	ldr	r3, [pc, #72]	; (800983c <MX_USART3_UART_Init+0x68>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80097f8:	4b10      	ldr	r3, [pc, #64]	; (800983c <MX_USART3_UART_Init+0x68>)
 80097fa:	220c      	movs	r2, #12
 80097fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80097fe:	4b0f      	ldr	r3, [pc, #60]	; (800983c <MX_USART3_UART_Init+0x68>)
 8009800:	2200      	movs	r2, #0
 8009802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009804:	4b0d      	ldr	r3, [pc, #52]	; (800983c <MX_USART3_UART_Init+0x68>)
 8009806:	2200      	movs	r2, #0
 8009808:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800980a:	4b0c      	ldr	r3, [pc, #48]	; (800983c <MX_USART3_UART_Init+0x68>)
 800980c:	2200      	movs	r2, #0
 800980e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009810:	4b0a      	ldr	r3, [pc, #40]	; (800983c <MX_USART3_UART_Init+0x68>)
 8009812:	2200      	movs	r2, #0
 8009814:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8009816:	4b09      	ldr	r3, [pc, #36]	; (800983c <MX_USART3_UART_Init+0x68>)
 8009818:	2201      	movs	r2, #1
 800981a:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 800981c:	4b07      	ldr	r3, [pc, #28]	; (800983c <MX_USART3_UART_Init+0x68>)
 800981e:	2280      	movs	r2, #128	; 0x80
 8009820:	0292      	lsls	r2, r2, #10
 8009822:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <MX_USART3_UART_Init+0x68>)
 8009826:	0018      	movs	r0, r3
 8009828:	f7fb fa0c 	bl	8004c44 <HAL_UART_Init>
 800982c:	1e03      	subs	r3, r0, #0
 800982e:	d001      	beq.n	8009834 <MX_USART3_UART_Init+0x60>
  {
    Error_Handler();
 8009830:	f001 fcbc 	bl	800b1ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009834:	46c0      	nop			; (mov r8, r8)
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	20000c54 	.word	0x20000c54
 8009840:	40004800 	.word	0x40004800

08009844 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800984a:	4b0c      	ldr	r3, [pc, #48]	; (800987c <MX_DMA_Init+0x38>)
 800984c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800984e:	4b0b      	ldr	r3, [pc, #44]	; (800987c <MX_DMA_Init+0x38>)
 8009850:	2101      	movs	r1, #1
 8009852:	430a      	orrs	r2, r1
 8009854:	639a      	str	r2, [r3, #56]	; 0x38
 8009856:	4b09      	ldr	r3, [pc, #36]	; (800987c <MX_DMA_Init+0x38>)
 8009858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985a:	2201      	movs	r2, #1
 800985c:	4013      	ands	r3, r2
 800985e:	607b      	str	r3, [r7, #4]
 8009860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009862:	2200      	movs	r2, #0
 8009864:	2100      	movs	r1, #0
 8009866:	2009      	movs	r0, #9
 8009868:	f7f9 f8f0 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800986c:	2009      	movs	r0, #9
 800986e:	f7f9 f902 	bl	8002a76 <HAL_NVIC_EnableIRQ>

}
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	46bd      	mov	sp, r7
 8009876:	b002      	add	sp, #8
 8009878:	bd80      	pop	{r7, pc}
 800987a:	46c0      	nop			; (mov r8, r8)
 800987c:	40021000 	.word	0x40021000

08009880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b08b      	sub	sp, #44	; 0x2c
 8009884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009886:	2414      	movs	r4, #20
 8009888:	193b      	adds	r3, r7, r4
 800988a:	0018      	movs	r0, r3
 800988c:	2314      	movs	r3, #20
 800988e:	001a      	movs	r2, r3
 8009890:	2100      	movs	r1, #0
 8009892:	f003 fc36 	bl	800d102 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009896:	4b7a      	ldr	r3, [pc, #488]	; (8009a80 <MX_GPIO_Init+0x200>)
 8009898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800989a:	4b79      	ldr	r3, [pc, #484]	; (8009a80 <MX_GPIO_Init+0x200>)
 800989c:	2104      	movs	r1, #4
 800989e:	430a      	orrs	r2, r1
 80098a0:	635a      	str	r2, [r3, #52]	; 0x34
 80098a2:	4b77      	ldr	r3, [pc, #476]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a6:	2204      	movs	r2, #4
 80098a8:	4013      	ands	r3, r2
 80098aa:	613b      	str	r3, [r7, #16]
 80098ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80098ae:	4b74      	ldr	r3, [pc, #464]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098b2:	4b73      	ldr	r3, [pc, #460]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098b4:	2120      	movs	r1, #32
 80098b6:	430a      	orrs	r2, r1
 80098b8:	635a      	str	r2, [r3, #52]	; 0x34
 80098ba:	4b71      	ldr	r3, [pc, #452]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098be:	2220      	movs	r2, #32
 80098c0:	4013      	ands	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80098c6:	4b6e      	ldr	r3, [pc, #440]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ca:	4b6d      	ldr	r3, [pc, #436]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098cc:	2101      	movs	r1, #1
 80098ce:	430a      	orrs	r2, r1
 80098d0:	635a      	str	r2, [r3, #52]	; 0x34
 80098d2:	4b6b      	ldr	r3, [pc, #428]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d6:	2201      	movs	r2, #1
 80098d8:	4013      	ands	r3, r2
 80098da:	60bb      	str	r3, [r7, #8]
 80098dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80098de:	4b68      	ldr	r3, [pc, #416]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e2:	4b67      	ldr	r3, [pc, #412]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098e4:	2102      	movs	r1, #2
 80098e6:	430a      	orrs	r2, r1
 80098e8:	635a      	str	r2, [r3, #52]	; 0x34
 80098ea:	4b65      	ldr	r3, [pc, #404]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ee:	2202      	movs	r2, #2
 80098f0:	4013      	ands	r3, r2
 80098f2:	607b      	str	r3, [r7, #4]
 80098f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80098f6:	4b62      	ldr	r3, [pc, #392]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098fa:	4b61      	ldr	r3, [pc, #388]	; (8009a80 <MX_GPIO_Init+0x200>)
 80098fc:	2108      	movs	r1, #8
 80098fe:	430a      	orrs	r2, r1
 8009900:	635a      	str	r2, [r3, #52]	; 0x34
 8009902:	4b5f      	ldr	r3, [pc, #380]	; (8009a80 <MX_GPIO_Init+0x200>)
 8009904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009906:	2208      	movs	r2, #8
 8009908:	4013      	ands	r3, r2
 800990a:	603b      	str	r3, [r7, #0]
 800990c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800990e:	2398      	movs	r3, #152	; 0x98
 8009910:	015b      	lsls	r3, r3, #5
 8009912:	485c      	ldr	r0, [pc, #368]	; (8009a84 <MX_GPIO_Init+0x204>)
 8009914:	2200      	movs	r2, #0
 8009916:	0019      	movs	r1, r3
 8009918:	f7f9 fd19 	bl	800334e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_3 
 800991c:	495a      	ldr	r1, [pc, #360]	; (8009a88 <MX_GPIO_Init+0x208>)
 800991e:	4b5b      	ldr	r3, [pc, #364]	; (8009a8c <MX_GPIO_Init+0x20c>)
 8009920:	2200      	movs	r2, #0
 8009922:	0018      	movs	r0, r3
 8009924:	f7f9 fd13 	bl	800334e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8009928:	2390      	movs	r3, #144	; 0x90
 800992a:	0219      	lsls	r1, r3, #8
 800992c:	23a0      	movs	r3, #160	; 0xa0
 800992e:	05db      	lsls	r3, r3, #23
 8009930:	2200      	movs	r2, #0
 8009932:	0018      	movs	r0, r3
 8009934:	f7f9 fd0b 	bl	800334e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009938:	4b55      	ldr	r3, [pc, #340]	; (8009a90 <MX_GPIO_Init+0x210>)
 800993a:	2200      	movs	r2, #0
 800993c:	211f      	movs	r1, #31
 800993e:	0018      	movs	r0, r3
 8009940:	f7f9 fd05 	bl	800334e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC12 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8009944:	193b      	adds	r3, r7, r4
 8009946:	2298      	movs	r2, #152	; 0x98
 8009948:	0152      	lsls	r2, r2, #5
 800994a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800994c:	193b      	adds	r3, r7, r4
 800994e:	2201      	movs	r2, #1
 8009950:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009952:	193b      	adds	r3, r7, r4
 8009954:	2202      	movs	r2, #2
 8009956:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009958:	0021      	movs	r1, r4
 800995a:	193b      	adds	r3, r7, r4
 800995c:	2200      	movs	r2, #0
 800995e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009960:	000c      	movs	r4, r1
 8009962:	187b      	adds	r3, r7, r1
 8009964:	4a47      	ldr	r2, [pc, #284]	; (8009a84 <MX_GPIO_Init+0x204>)
 8009966:	0019      	movs	r1, r3
 8009968:	0010      	movs	r0, r2
 800996a:	f7f9 fb6f 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4 
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4 
 800996e:	0021      	movs	r1, r4
 8009970:	187b      	adds	r3, r7, r1
 8009972:	4a48      	ldr	r2, [pc, #288]	; (8009a94 <MX_GPIO_Init+0x214>)
 8009974:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009976:	187b      	adds	r3, r7, r1
 8009978:	2200      	movs	r2, #0
 800997a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800997c:	187b      	adds	r3, r7, r1
 800997e:	2200      	movs	r2, #0
 8009980:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009982:	000c      	movs	r4, r1
 8009984:	187b      	adds	r3, r7, r1
 8009986:	4a3f      	ldr	r2, [pc, #252]	; (8009a84 <MX_GPIO_Init+0x204>)
 8009988:	0019      	movs	r1, r3
 800998a:	0010      	movs	r0, r2
 800998c:	f7f9 fb5e 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009990:	0021      	movs	r1, r4
 8009992:	187b      	adds	r3, r7, r1
 8009994:	2203      	movs	r2, #3
 8009996:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009998:	187b      	adds	r3, r7, r1
 800999a:	2200      	movs	r2, #0
 800999c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800999e:	187b      	adds	r3, r7, r1
 80099a0:	2200      	movs	r2, #0
 80099a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80099a4:	000c      	movs	r4, r1
 80099a6:	187b      	adds	r3, r7, r1
 80099a8:	4a3b      	ldr	r2, [pc, #236]	; (8009a98 <MX_GPIO_Init+0x218>)
 80099aa:	0019      	movs	r1, r3
 80099ac:	0010      	movs	r0, r2
 80099ae:	f7f9 fb4d 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80099b2:	0021      	movs	r1, r4
 80099b4:	187b      	adds	r3, r7, r1
 80099b6:	2203      	movs	r2, #3
 80099b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80099ba:	187b      	adds	r3, r7, r1
 80099bc:	2200      	movs	r2, #0
 80099be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099c0:	187b      	adds	r3, r7, r1
 80099c2:	2200      	movs	r2, #0
 80099c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099c6:	000c      	movs	r4, r1
 80099c8:	187b      	adds	r3, r7, r1
 80099ca:	4a30      	ldr	r2, [pc, #192]	; (8009a8c <MX_GPIO_Init+0x20c>)
 80099cc:	0019      	movs	r1, r3
 80099ce:	0010      	movs	r0, r2
 80099d0:	f7f9 fb3c 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80099d4:	0021      	movs	r1, r4
 80099d6:	187b      	adds	r3, r7, r1
 80099d8:	4a30      	ldr	r2, [pc, #192]	; (8009a9c <MX_GPIO_Init+0x21c>)
 80099da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099dc:	187b      	adds	r3, r7, r1
 80099de:	2201      	movs	r2, #1
 80099e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099e2:	187b      	adds	r3, r7, r1
 80099e4:	2200      	movs	r2, #0
 80099e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099e8:	187b      	adds	r3, r7, r1
 80099ea:	2200      	movs	r2, #0
 80099ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099ee:	000c      	movs	r4, r1
 80099f0:	187b      	adds	r3, r7, r1
 80099f2:	4a26      	ldr	r2, [pc, #152]	; (8009a8c <MX_GPIO_Init+0x20c>)
 80099f4:	0019      	movs	r1, r3
 80099f6:	0010      	movs	r0, r2
 80099f8:	f7f9 fb28 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB3 PB4 PB5 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80099fc:	0021      	movs	r1, r4
 80099fe:	187b      	adds	r3, r7, r1
 8009a00:	4a27      	ldr	r2, [pc, #156]	; (8009aa0 <MX_GPIO_Init+0x220>)
 8009a02:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a04:	187b      	adds	r3, r7, r1
 8009a06:	2201      	movs	r2, #1
 8009a08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009a0a:	187b      	adds	r3, r7, r1
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a10:	187b      	adds	r3, r7, r1
 8009a12:	2200      	movs	r2, #0
 8009a14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a16:	000c      	movs	r4, r1
 8009a18:	187b      	adds	r3, r7, r1
 8009a1a:	4a1c      	ldr	r2, [pc, #112]	; (8009a8c <MX_GPIO_Init+0x20c>)
 8009a1c:	0019      	movs	r1, r3
 8009a1e:	0010      	movs	r0, r2
 8009a20:	f7f9 fb14 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8009a24:	0021      	movs	r1, r4
 8009a26:	187b      	adds	r3, r7, r1
 8009a28:	2290      	movs	r2, #144	; 0x90
 8009a2a:	0212      	lsls	r2, r2, #8
 8009a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a2e:	187b      	adds	r3, r7, r1
 8009a30:	2201      	movs	r2, #1
 8009a32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009a34:	187b      	adds	r3, r7, r1
 8009a36:	2202      	movs	r2, #2
 8009a38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a3a:	187b      	adds	r3, r7, r1
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a40:	000c      	movs	r4, r1
 8009a42:	187a      	adds	r2, r7, r1
 8009a44:	23a0      	movs	r3, #160	; 0xa0
 8009a46:	05db      	lsls	r3, r3, #23
 8009a48:	0011      	movs	r1, r2
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	f7f9 fafe 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009a50:	0021      	movs	r1, r4
 8009a52:	187b      	adds	r3, r7, r1
 8009a54:	221f      	movs	r2, #31
 8009a56:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a58:	187b      	adds	r3, r7, r1
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009a5e:	187b      	adds	r3, r7, r1
 8009a60:	2202      	movs	r2, #2
 8009a62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a64:	187b      	adds	r3, r7, r1
 8009a66:	2200      	movs	r2, #0
 8009a68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009a6a:	187b      	adds	r3, r7, r1
 8009a6c:	4a08      	ldr	r2, [pc, #32]	; (8009a90 <MX_GPIO_Init+0x210>)
 8009a6e:	0019      	movs	r1, r3
 8009a70:	0010      	movs	r0, r2
 8009a72:	f7f9 faeb 	bl	800304c <HAL_GPIO_Init>

}
 8009a76:	46c0      	nop			; (mov r8, r8)
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	b00b      	add	sp, #44	; 0x2c
 8009a7c:	bd90      	pop	{r4, r7, pc}
 8009a7e:	46c0      	nop			; (mov r8, r8)
 8009a80:	40021000 	.word	0x40021000
 8009a84:	50000800 	.word	0x50000800
 8009a88:	0000273c 	.word	0x0000273c
 8009a8c:	50000400 	.word	0x50000400
 8009a90:	50000c00 	.word	0x50000c00
 8009a94:	0000e030 	.word	0x0000e030
 8009a98:	50001400 	.word	0x50001400
 8009a9c:	00000404 	.word	0x00000404
 8009aa0:	00002338 	.word	0x00002338

08009aa4 <initXCaptors>:
/* USER CODE BEGIN 4 */

//____________________________________________INITIALISATION METHODS_______________________________________________________

void initXCaptors(params* p)
{
 8009aa4:	b590      	push	{r4, r7, lr}
 8009aa6:	b08d      	sub	sp, #52	; 0x34
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	ExtCaptor x1 ;
	x1.id = 0 ;
 8009aac:	241c      	movs	r4, #28
 8009aae:	193b      	adds	r3, r7, r4
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	701a      	strb	r2, [r3, #0]
	x1.inputPinF = GPIOA ;//TODO
 8009ab4:	193b      	adds	r3, r7, r4
 8009ab6:	22a0      	movs	r2, #160	; 0xa0
 8009ab8:	05d2      	lsls	r2, r2, #23
 8009aba:	605a      	str	r2, [r3, #4]
	x1.inputPinN = 1 ;//TODO
 8009abc:	193b      	adds	r3, r7, r4
 8009abe:	2201      	movs	r2, #1
 8009ac0:	811a      	strh	r2, [r3, #8]
	standardInitExtCaptor(&x1) ;
 8009ac2:	193b      	adds	r3, r7, r4
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f7fc fd7b 	bl	80065c0 <standardInitExtCaptor>
	p->xcs[0] = x1 ;
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	23a4      	movs	r3, #164	; 0xa4
 8009ace:	011b      	lsls	r3, r3, #4
 8009ad0:	1939      	adds	r1, r7, r4
 8009ad2:	18d3      	adds	r3, r2, r3
 8009ad4:	000a      	movs	r2, r1
 8009ad6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8009ad8:	c313      	stmia	r3!, {r0, r1, r4}
 8009ada:	ca03      	ldmia	r2!, {r0, r1}
 8009adc:	c303      	stmia	r3!, {r0, r1}

	ExtCaptor x2 ;
	x2.id = 1 ;
 8009ade:	2408      	movs	r4, #8
 8009ae0:	193b      	adds	r3, r7, r4
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	701a      	strb	r2, [r3, #0]
	x2.inputPinF = GPIOA ;//TODO
 8009ae6:	193b      	adds	r3, r7, r4
 8009ae8:	22a0      	movs	r2, #160	; 0xa0
 8009aea:	05d2      	lsls	r2, r2, #23
 8009aec:	605a      	str	r2, [r3, #4]
	x2.inputPinN = 1 ;//TODO
 8009aee:	193b      	adds	r3, r7, r4
 8009af0:	2201      	movs	r2, #1
 8009af2:	811a      	strh	r2, [r3, #8]
	standardInitExtCaptor(&x2) ;
 8009af4:	193b      	adds	r3, r7, r4
 8009af6:	0018      	movs	r0, r3
 8009af8:	f7fc fd62 	bl	80065c0 <standardInitExtCaptor>
	p->xcs[1] = x2 ;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a06      	ldr	r2, [pc, #24]	; (8009b18 <initXCaptors+0x74>)
 8009b00:	1939      	adds	r1, r7, r4
 8009b02:	189b      	adds	r3, r3, r2
 8009b04:	000a      	movs	r2, r1
 8009b06:	ca13      	ldmia	r2!, {r0, r1, r4}
 8009b08:	c313      	stmia	r3!, {r0, r1, r4}
 8009b0a:	ca03      	ldmia	r2!, {r0, r1}
 8009b0c:	c303      	stmia	r3!, {r0, r1}
}
 8009b0e:	46c0      	nop			; (mov r8, r8)
 8009b10:	46bd      	mov	sp, r7
 8009b12:	b00d      	add	sp, #52	; 0x34
 8009b14:	bd90      	pop	{r4, r7, pc}
 8009b16:	46c0      	nop			; (mov r8, r8)
 8009b18:	00000a54 	.word	0x00000a54

08009b1c <initMotors>:

void initMotors(params* p){
 8009b1c:	b590      	push	{r4, r7, lr}
 8009b1e:	4cfe      	ldr	r4, [pc, #1016]	; (8009f18 <initMotors+0x3fc>)
 8009b20:	44a5      	add	sp, r4
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]

	Motor m1 ;
	m1.id = 0 ;
 8009b26:	24e9      	movs	r4, #233	; 0xe9
 8009b28:	00a4      	lsls	r4, r4, #2
 8009b2a:	193b      	adds	r3, r7, r4
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	701a      	strb	r2, [r3, #0]
	m1.pinFamTim = GPIOA ;
 8009b30:	193b      	adds	r3, r7, r4
 8009b32:	22a0      	movs	r2, #160	; 0xa0
 8009b34:	05d2      	lsls	r2, r2, #23
 8009b36:	665a      	str	r2, [r3, #100]	; 0x64
	m1.pinNumTim = GPIO_PIN_11 ;
 8009b38:	193b      	adds	r3, r7, r4
 8009b3a:	2268      	movs	r2, #104	; 0x68
 8009b3c:	2180      	movs	r1, #128	; 0x80
 8009b3e:	0109      	lsls	r1, r1, #4
 8009b40:	5299      	strh	r1, [r3, r2]
	m1.htim = htim1 ;
 8009b42:	193b      	adds	r3, r7, r4
 8009b44:	4af5      	ldr	r2, [pc, #980]	; (8009f1c <initMotors+0x400>)
 8009b46:	3320      	adds	r3, #32
 8009b48:	0011      	movs	r1, r2
 8009b4a:	2240      	movs	r2, #64	; 0x40
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	f003 facf 	bl	800d0f0 <memcpy>
	m1.channel = TIM_CHANNEL_4;
 8009b52:	0021      	movs	r1, r4
 8009b54:	187b      	adds	r3, r7, r1
 8009b56:	220c      	movs	r2, #12
 8009b58:	661a      	str	r2, [r3, #96]	; 0x60
	m1.pinFam1 = GPIOC ;
 8009b5a:	187b      	adds	r3, r7, r1
 8009b5c:	4af0      	ldr	r2, [pc, #960]	; (8009f20 <initMotors+0x404>)
 8009b5e:	611a      	str	r2, [r3, #16]
	m1.pinNum1 = GPIO_PIN_12 ;
 8009b60:	187b      	adds	r3, r7, r1
 8009b62:	2280      	movs	r2, #128	; 0x80
 8009b64:	0152      	lsls	r2, r2, #5
 8009b66:	829a      	strh	r2, [r3, #20]
	m1.pinFam2 = GPIOB ;
 8009b68:	187b      	adds	r3, r7, r1
 8009b6a:	4aee      	ldr	r2, [pc, #952]	; (8009f24 <initMotors+0x408>)
 8009b6c:	619a      	str	r2, [r3, #24]
	m1.pinNum2 = GPIO_PIN_9 ;
 8009b6e:	187b      	adds	r3, r7, r1
 8009b70:	2280      	movs	r2, #128	; 0x80
 8009b72:	0092      	lsls	r2, r2, #2
 8009b74:	839a      	strh	r2, [r3, #28]
	p->motors[0] = m1 ;
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	23c4      	movs	r3, #196	; 0xc4
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	1879      	adds	r1, r7, r1
 8009b7e:	18d3      	adds	r3, r2, r3
 8009b80:	2284      	movs	r2, #132	; 0x84
 8009b82:	0018      	movs	r0, r3
 8009b84:	f003 fab4 	bl	800d0f0 <memcpy>
	standardInitMotor(&(p->motors[0]));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	22c4      	movs	r2, #196	; 0xc4
 8009b8c:	00d2      	lsls	r2, r2, #3
 8009b8e:	4694      	mov	ip, r2
 8009b90:	4463      	add	r3, ip
 8009b92:	0018      	movs	r0, r3
 8009b94:	f001 fb10 	bl	800b1b8 <standardInitMotor>
	p->motors[0].trans.type = TYPE_VERT ;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4ae3      	ldr	r2, [pc, #908]	; (8009f28 <initMotors+0x40c>)
 8009b9c:	2102      	movs	r1, #2
 8009b9e:	5499      	strb	r1, [r3, r2]

	Motor m2 ;
	m2.id = 1 ;
 8009ba0:	4be2      	ldr	r3, [pc, #904]	; (8009f2c <initMotors+0x410>)
 8009ba2:	2285      	movs	r2, #133	; 0x85
 8009ba4:	00d2      	lsls	r2, r2, #3
 8009ba6:	4694      	mov	ip, r2
 8009ba8:	44bc      	add	ip, r7
 8009baa:	4463      	add	r3, ip
 8009bac:	2201      	movs	r2, #1
 8009bae:	701a      	strb	r2, [r3, #0]
	m2.pinFamTim = GPIOA ;
 8009bb0:	4bde      	ldr	r3, [pc, #888]	; (8009f2c <initMotors+0x410>)
 8009bb2:	2285      	movs	r2, #133	; 0x85
 8009bb4:	00d2      	lsls	r2, r2, #3
 8009bb6:	4694      	mov	ip, r2
 8009bb8:	44bc      	add	ip, r7
 8009bba:	4463      	add	r3, ip
 8009bbc:	22a0      	movs	r2, #160	; 0xa0
 8009bbe:	05d2      	lsls	r2, r2, #23
 8009bc0:	665a      	str	r2, [r3, #100]	; 0x64
	m2.pinNumTim = GPIO_PIN_10 ;
 8009bc2:	4bda      	ldr	r3, [pc, #872]	; (8009f2c <initMotors+0x410>)
 8009bc4:	2285      	movs	r2, #133	; 0x85
 8009bc6:	00d2      	lsls	r2, r2, #3
 8009bc8:	4694      	mov	ip, r2
 8009bca:	44bc      	add	ip, r7
 8009bcc:	4463      	add	r3, ip
 8009bce:	2268      	movs	r2, #104	; 0x68
 8009bd0:	2180      	movs	r1, #128	; 0x80
 8009bd2:	00c9      	lsls	r1, r1, #3
 8009bd4:	5299      	strh	r1, [r3, r2]
	m2.htim = htim1 ;
 8009bd6:	4bd5      	ldr	r3, [pc, #852]	; (8009f2c <initMotors+0x410>)
 8009bd8:	2285      	movs	r2, #133	; 0x85
 8009bda:	00d2      	lsls	r2, r2, #3
 8009bdc:	4694      	mov	ip, r2
 8009bde:	44bc      	add	ip, r7
 8009be0:	4463      	add	r3, ip
 8009be2:	4ace      	ldr	r2, [pc, #824]	; (8009f1c <initMotors+0x400>)
 8009be4:	3320      	adds	r3, #32
 8009be6:	0011      	movs	r1, r2
 8009be8:	2240      	movs	r2, #64	; 0x40
 8009bea:	0018      	movs	r0, r3
 8009bec:	f003 fa80 	bl	800d0f0 <memcpy>
	m2.channel = TIM_CHANNEL_3 ;
 8009bf0:	4bce      	ldr	r3, [pc, #824]	; (8009f2c <initMotors+0x410>)
 8009bf2:	2285      	movs	r2, #133	; 0x85
 8009bf4:	00d2      	lsls	r2, r2, #3
 8009bf6:	4694      	mov	ip, r2
 8009bf8:	44bc      	add	ip, r7
 8009bfa:	4463      	add	r3, ip
 8009bfc:	2208      	movs	r2, #8
 8009bfe:	661a      	str	r2, [r3, #96]	; 0x60
	m2.pinFam1 = GPIOB ;
 8009c00:	4bca      	ldr	r3, [pc, #808]	; (8009f2c <initMotors+0x410>)
 8009c02:	2285      	movs	r2, #133	; 0x85
 8009c04:	00d2      	lsls	r2, r2, #3
 8009c06:	4694      	mov	ip, r2
 8009c08:	44bc      	add	ip, r7
 8009c0a:	4463      	add	r3, ip
 8009c0c:	4ac5      	ldr	r2, [pc, #788]	; (8009f24 <initMotors+0x408>)
 8009c0e:	611a      	str	r2, [r3, #16]
	m2.pinNum1 = GPIO_PIN_8 ;
 8009c10:	4bc6      	ldr	r3, [pc, #792]	; (8009f2c <initMotors+0x410>)
 8009c12:	2285      	movs	r2, #133	; 0x85
 8009c14:	00d2      	lsls	r2, r2, #3
 8009c16:	4694      	mov	ip, r2
 8009c18:	44bc      	add	ip, r7
 8009c1a:	4463      	add	r3, ip
 8009c1c:	2280      	movs	r2, #128	; 0x80
 8009c1e:	0052      	lsls	r2, r2, #1
 8009c20:	829a      	strh	r2, [r3, #20]
	m2.pinFam2 = GPIOB ;
 8009c22:	4bc2      	ldr	r3, [pc, #776]	; (8009f2c <initMotors+0x410>)
 8009c24:	2285      	movs	r2, #133	; 0x85
 8009c26:	00d2      	lsls	r2, r2, #3
 8009c28:	4694      	mov	ip, r2
 8009c2a:	44bc      	add	ip, r7
 8009c2c:	4463      	add	r3, ip
 8009c2e:	4abd      	ldr	r2, [pc, #756]	; (8009f24 <initMotors+0x408>)
 8009c30:	619a      	str	r2, [r3, #24]
	m2.pinNum2 = GPIO_PIN_5 ;
 8009c32:	4bbe      	ldr	r3, [pc, #760]	; (8009f2c <initMotors+0x410>)
 8009c34:	2285      	movs	r2, #133	; 0x85
 8009c36:	00d2      	lsls	r2, r2, #3
 8009c38:	4694      	mov	ip, r2
 8009c3a:	44bc      	add	ip, r7
 8009c3c:	4463      	add	r3, ip
 8009c3e:	2220      	movs	r2, #32
 8009c40:	839a      	strh	r2, [r3, #28]
	p->motors[1] = m2 ;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4aba      	ldr	r2, [pc, #744]	; (8009f30 <initMotors+0x414>)
 8009c46:	49b9      	ldr	r1, [pc, #740]	; (8009f2c <initMotors+0x410>)
 8009c48:	2085      	movs	r0, #133	; 0x85
 8009c4a:	00c0      	lsls	r0, r0, #3
 8009c4c:	4684      	mov	ip, r0
 8009c4e:	44bc      	add	ip, r7
 8009c50:	4461      	add	r1, ip
 8009c52:	189b      	adds	r3, r3, r2
 8009c54:	2284      	movs	r2, #132	; 0x84
 8009c56:	0018      	movs	r0, r3
 8009c58:	f003 fa4a 	bl	800d0f0 <memcpy>
	standardInitMotor(&(p->motors[1]));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4ab4      	ldr	r2, [pc, #720]	; (8009f30 <initMotors+0x414>)
 8009c60:	4694      	mov	ip, r2
 8009c62:	4463      	add	r3, ip
 8009c64:	0018      	movs	r0, r3
 8009c66:	f001 faa7 	bl	800b1b8 <standardInitMotor>
	p->motors[1].trans.type = TYPE_VERT ;
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	23e4      	movs	r3, #228	; 0xe4
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	2102      	movs	r1, #2
 8009c72:	54d1      	strb	r1, [r2, r3]

	Motor m3 ;
	m3.id = 2 ;
 8009c74:	4baf      	ldr	r3, [pc, #700]	; (8009f34 <initMotors+0x418>)
 8009c76:	2285      	movs	r2, #133	; 0x85
 8009c78:	00d2      	lsls	r2, r2, #3
 8009c7a:	4694      	mov	ip, r2
 8009c7c:	44bc      	add	ip, r7
 8009c7e:	4463      	add	r3, ip
 8009c80:	2202      	movs	r2, #2
 8009c82:	701a      	strb	r2, [r3, #0]
	m3.pinFamTim = GPIOC ;
 8009c84:	4bab      	ldr	r3, [pc, #684]	; (8009f34 <initMotors+0x418>)
 8009c86:	2285      	movs	r2, #133	; 0x85
 8009c88:	00d2      	lsls	r2, r2, #3
 8009c8a:	4694      	mov	ip, r2
 8009c8c:	44bc      	add	ip, r7
 8009c8e:	4463      	add	r3, ip
 8009c90:	4aa3      	ldr	r2, [pc, #652]	; (8009f20 <initMotors+0x404>)
 8009c92:	665a      	str	r2, [r3, #100]	; 0x64
	m3.pinNumTim = GPIO_PIN_7 ;
 8009c94:	4ba7      	ldr	r3, [pc, #668]	; (8009f34 <initMotors+0x418>)
 8009c96:	2285      	movs	r2, #133	; 0x85
 8009c98:	00d2      	lsls	r2, r2, #3
 8009c9a:	4694      	mov	ip, r2
 8009c9c:	44bc      	add	ip, r7
 8009c9e:	4463      	add	r3, ip
 8009ca0:	2268      	movs	r2, #104	; 0x68
 8009ca2:	2180      	movs	r1, #128	; 0x80
 8009ca4:	5299      	strh	r1, [r3, r2]
	m3.htim = htim3 ;
 8009ca6:	4ba3      	ldr	r3, [pc, #652]	; (8009f34 <initMotors+0x418>)
 8009ca8:	2285      	movs	r2, #133	; 0x85
 8009caa:	00d2      	lsls	r2, r2, #3
 8009cac:	4694      	mov	ip, r2
 8009cae:	44bc      	add	ip, r7
 8009cb0:	4463      	add	r3, ip
 8009cb2:	4aa1      	ldr	r2, [pc, #644]	; (8009f38 <initMotors+0x41c>)
 8009cb4:	3320      	adds	r3, #32
 8009cb6:	0011      	movs	r1, r2
 8009cb8:	2240      	movs	r2, #64	; 0x40
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f003 fa18 	bl	800d0f0 <memcpy>
	m3.channel = TIM_CHANNEL_2 ;
 8009cc0:	4b9c      	ldr	r3, [pc, #624]	; (8009f34 <initMotors+0x418>)
 8009cc2:	2285      	movs	r2, #133	; 0x85
 8009cc4:	00d2      	lsls	r2, r2, #3
 8009cc6:	4694      	mov	ip, r2
 8009cc8:	44bc      	add	ip, r7
 8009cca:	4463      	add	r3, ip
 8009ccc:	2204      	movs	r2, #4
 8009cce:	661a      	str	r2, [r3, #96]	; 0x60
	m3.pinFam1 = GPIOB ;
 8009cd0:	4b98      	ldr	r3, [pc, #608]	; (8009f34 <initMotors+0x418>)
 8009cd2:	2285      	movs	r2, #133	; 0x85
 8009cd4:	00d2      	lsls	r2, r2, #3
 8009cd6:	4694      	mov	ip, r2
 8009cd8:	44bc      	add	ip, r7
 8009cda:	4463      	add	r3, ip
 8009cdc:	4a91      	ldr	r2, [pc, #580]	; (8009f24 <initMotors+0x408>)
 8009cde:	611a      	str	r2, [r3, #16]
	m3.pinNum1 = GPIO_PIN_4 ;
 8009ce0:	4b94      	ldr	r3, [pc, #592]	; (8009f34 <initMotors+0x418>)
 8009ce2:	2285      	movs	r2, #133	; 0x85
 8009ce4:	00d2      	lsls	r2, r2, #3
 8009ce6:	4694      	mov	ip, r2
 8009ce8:	44bc      	add	ip, r7
 8009cea:	4463      	add	r3, ip
 8009cec:	2210      	movs	r2, #16
 8009cee:	829a      	strh	r2, [r3, #20]
	m3.pinFam2 = GPIOB ;
 8009cf0:	4b90      	ldr	r3, [pc, #576]	; (8009f34 <initMotors+0x418>)
 8009cf2:	2285      	movs	r2, #133	; 0x85
 8009cf4:	00d2      	lsls	r2, r2, #3
 8009cf6:	4694      	mov	ip, r2
 8009cf8:	44bc      	add	ip, r7
 8009cfa:	4463      	add	r3, ip
 8009cfc:	4a89      	ldr	r2, [pc, #548]	; (8009f24 <initMotors+0x408>)
 8009cfe:	619a      	str	r2, [r3, #24]
	m3.pinNum2 = GPIO_PIN_3 ;
 8009d00:	4b8c      	ldr	r3, [pc, #560]	; (8009f34 <initMotors+0x418>)
 8009d02:	2285      	movs	r2, #133	; 0x85
 8009d04:	00d2      	lsls	r2, r2, #3
 8009d06:	4694      	mov	ip, r2
 8009d08:	44bc      	add	ip, r7
 8009d0a:	4463      	add	r3, ip
 8009d0c:	2208      	movs	r2, #8
 8009d0e:	839a      	strh	r2, [r3, #28]
	p->motors[2] = m3 ;
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	23e5      	movs	r3, #229	; 0xe5
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	4987      	ldr	r1, [pc, #540]	; (8009f34 <initMotors+0x418>)
 8009d18:	2085      	movs	r0, #133	; 0x85
 8009d1a:	00c0      	lsls	r0, r0, #3
 8009d1c:	4684      	mov	ip, r0
 8009d1e:	44bc      	add	ip, r7
 8009d20:	4461      	add	r1, ip
 8009d22:	18d3      	adds	r3, r2, r3
 8009d24:	2284      	movs	r2, #132	; 0x84
 8009d26:	0018      	movs	r0, r3
 8009d28:	f003 f9e2 	bl	800d0f0 <memcpy>
	standardInitMotor(&(p->motors[2]));
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	22e5      	movs	r2, #229	; 0xe5
 8009d30:	00d2      	lsls	r2, r2, #3
 8009d32:	4694      	mov	ip, r2
 8009d34:	4463      	add	r3, ip
 8009d36:	0018      	movs	r0, r3
 8009d38:	f001 fa3e 	bl	800b1b8 <standardInitMotor>
	p->motors[2].trans.type = TYPE_VERT ;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a7f      	ldr	r2, [pc, #508]	; (8009f3c <initMotors+0x420>)
 8009d40:	2102      	movs	r1, #2
 8009d42:	5499      	strb	r1, [r3, r2]

	Motor m4 ;
	m4.id = 3 ;
 8009d44:	4b7e      	ldr	r3, [pc, #504]	; (8009f40 <initMotors+0x424>)
 8009d46:	2285      	movs	r2, #133	; 0x85
 8009d48:	00d2      	lsls	r2, r2, #3
 8009d4a:	4694      	mov	ip, r2
 8009d4c:	44bc      	add	ip, r7
 8009d4e:	4463      	add	r3, ip
 8009d50:	2203      	movs	r2, #3
 8009d52:	701a      	strb	r2, [r3, #0]
	m4.pinFamTim = GPIOC ;
 8009d54:	4b7a      	ldr	r3, [pc, #488]	; (8009f40 <initMotors+0x424>)
 8009d56:	2285      	movs	r2, #133	; 0x85
 8009d58:	00d2      	lsls	r2, r2, #3
 8009d5a:	4694      	mov	ip, r2
 8009d5c:	44bc      	add	ip, r7
 8009d5e:	4463      	add	r3, ip
 8009d60:	4a6f      	ldr	r2, [pc, #444]	; (8009f20 <initMotors+0x404>)
 8009d62:	665a      	str	r2, [r3, #100]	; 0x64
	m4.pinNumTim = GPIO_PIN_6 ;
 8009d64:	4b76      	ldr	r3, [pc, #472]	; (8009f40 <initMotors+0x424>)
 8009d66:	2285      	movs	r2, #133	; 0x85
 8009d68:	00d2      	lsls	r2, r2, #3
 8009d6a:	4694      	mov	ip, r2
 8009d6c:	44bc      	add	ip, r7
 8009d6e:	4463      	add	r3, ip
 8009d70:	2268      	movs	r2, #104	; 0x68
 8009d72:	2140      	movs	r1, #64	; 0x40
 8009d74:	5299      	strh	r1, [r3, r2]
	m4.htim = htim3 ;
 8009d76:	4b72      	ldr	r3, [pc, #456]	; (8009f40 <initMotors+0x424>)
 8009d78:	2285      	movs	r2, #133	; 0x85
 8009d7a:	00d2      	lsls	r2, r2, #3
 8009d7c:	4694      	mov	ip, r2
 8009d7e:	44bc      	add	ip, r7
 8009d80:	4463      	add	r3, ip
 8009d82:	4a6d      	ldr	r2, [pc, #436]	; (8009f38 <initMotors+0x41c>)
 8009d84:	3320      	adds	r3, #32
 8009d86:	0011      	movs	r1, r2
 8009d88:	2240      	movs	r2, #64	; 0x40
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	f003 f9b0 	bl	800d0f0 <memcpy>
	m4.channel = TIM_CHANNEL_1 ;
 8009d90:	4b6b      	ldr	r3, [pc, #428]	; (8009f40 <initMotors+0x424>)
 8009d92:	2285      	movs	r2, #133	; 0x85
 8009d94:	00d2      	lsls	r2, r2, #3
 8009d96:	4694      	mov	ip, r2
 8009d98:	44bc      	add	ip, r7
 8009d9a:	4463      	add	r3, ip
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	661a      	str	r2, [r3, #96]	; 0x60
	m4.pinFam1 = GPIOD ;
 8009da0:	4b67      	ldr	r3, [pc, #412]	; (8009f40 <initMotors+0x424>)
 8009da2:	2285      	movs	r2, #133	; 0x85
 8009da4:	00d2      	lsls	r2, r2, #3
 8009da6:	4694      	mov	ip, r2
 8009da8:	44bc      	add	ip, r7
 8009daa:	4463      	add	r3, ip
 8009dac:	4a65      	ldr	r2, [pc, #404]	; (8009f44 <initMotors+0x428>)
 8009dae:	611a      	str	r2, [r3, #16]
	m4.pinNum1 = GPIO_PIN_4 ;
 8009db0:	4b63      	ldr	r3, [pc, #396]	; (8009f40 <initMotors+0x424>)
 8009db2:	2285      	movs	r2, #133	; 0x85
 8009db4:	00d2      	lsls	r2, r2, #3
 8009db6:	4694      	mov	ip, r2
 8009db8:	44bc      	add	ip, r7
 8009dba:	4463      	add	r3, ip
 8009dbc:	2210      	movs	r2, #16
 8009dbe:	829a      	strh	r2, [r3, #20]
	m4.pinFam2 = GPIOD ;
 8009dc0:	4b5f      	ldr	r3, [pc, #380]	; (8009f40 <initMotors+0x424>)
 8009dc2:	2285      	movs	r2, #133	; 0x85
 8009dc4:	00d2      	lsls	r2, r2, #3
 8009dc6:	4694      	mov	ip, r2
 8009dc8:	44bc      	add	ip, r7
 8009dca:	4463      	add	r3, ip
 8009dcc:	4a5d      	ldr	r2, [pc, #372]	; (8009f44 <initMotors+0x428>)
 8009dce:	619a      	str	r2, [r3, #24]
	m4.pinNum2 = GPIO_PIN_3 ;
 8009dd0:	4b5b      	ldr	r3, [pc, #364]	; (8009f40 <initMotors+0x424>)
 8009dd2:	2285      	movs	r2, #133	; 0x85
 8009dd4:	00d2      	lsls	r2, r2, #3
 8009dd6:	4694      	mov	ip, r2
 8009dd8:	44bc      	add	ip, r7
 8009dda:	4463      	add	r3, ip
 8009ddc:	2208      	movs	r2, #8
 8009dde:	839a      	strh	r2, [r3, #28]
	p->motors[3] = m4 ;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a59      	ldr	r2, [pc, #356]	; (8009f48 <initMotors+0x42c>)
 8009de4:	4956      	ldr	r1, [pc, #344]	; (8009f40 <initMotors+0x424>)
 8009de6:	2085      	movs	r0, #133	; 0x85
 8009de8:	00c0      	lsls	r0, r0, #3
 8009dea:	4684      	mov	ip, r0
 8009dec:	44bc      	add	ip, r7
 8009dee:	4461      	add	r1, ip
 8009df0:	189b      	adds	r3, r3, r2
 8009df2:	2284      	movs	r2, #132	; 0x84
 8009df4:	0018      	movs	r0, r3
 8009df6:	f003 f97b 	bl	800d0f0 <memcpy>
	standardInitMotor(&(p->motors[3]));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a52      	ldr	r2, [pc, #328]	; (8009f48 <initMotors+0x42c>)
 8009dfe:	4694      	mov	ip, r2
 8009e00:	4463      	add	r3, ip
 8009e02:	0018      	movs	r0, r3
 8009e04:	f001 f9d8 	bl	800b1b8 <standardInitMotor>
	p->motors[3].trans.type = TYPE_VERT ;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a50      	ldr	r2, [pc, #320]	; (8009f4c <initMotors+0x430>)
 8009e0c:	2102      	movs	r1, #2
 8009e0e:	5499      	strb	r1, [r3, r2]

	Motor m5 ;
	m5.id = 4 ;
 8009e10:	4b4f      	ldr	r3, [pc, #316]	; (8009f50 <initMotors+0x434>)
 8009e12:	2285      	movs	r2, #133	; 0x85
 8009e14:	00d2      	lsls	r2, r2, #3
 8009e16:	4694      	mov	ip, r2
 8009e18:	44bc      	add	ip, r7
 8009e1a:	4463      	add	r3, ip
 8009e1c:	2204      	movs	r2, #4
 8009e1e:	701a      	strb	r2, [r3, #0]
	m5.pinFamTim = GPIOA ;
 8009e20:	4b4b      	ldr	r3, [pc, #300]	; (8009f50 <initMotors+0x434>)
 8009e22:	2285      	movs	r2, #133	; 0x85
 8009e24:	00d2      	lsls	r2, r2, #3
 8009e26:	4694      	mov	ip, r2
 8009e28:	44bc      	add	ip, r7
 8009e2a:	4463      	add	r3, ip
 8009e2c:	22a0      	movs	r2, #160	; 0xa0
 8009e2e:	05d2      	lsls	r2, r2, #23
 8009e30:	665a      	str	r2, [r3, #100]	; 0x64
	m5.pinNumTim = GPIO_PIN_9 ;
 8009e32:	4b47      	ldr	r3, [pc, #284]	; (8009f50 <initMotors+0x434>)
 8009e34:	2285      	movs	r2, #133	; 0x85
 8009e36:	00d2      	lsls	r2, r2, #3
 8009e38:	4694      	mov	ip, r2
 8009e3a:	44bc      	add	ip, r7
 8009e3c:	4463      	add	r3, ip
 8009e3e:	2268      	movs	r2, #104	; 0x68
 8009e40:	2180      	movs	r1, #128	; 0x80
 8009e42:	0089      	lsls	r1, r1, #2
 8009e44:	5299      	strh	r1, [r3, r2]
	m5.htim = htim1 ;
 8009e46:	4b42      	ldr	r3, [pc, #264]	; (8009f50 <initMotors+0x434>)
 8009e48:	2285      	movs	r2, #133	; 0x85
 8009e4a:	00d2      	lsls	r2, r2, #3
 8009e4c:	4694      	mov	ip, r2
 8009e4e:	44bc      	add	ip, r7
 8009e50:	4463      	add	r3, ip
 8009e52:	4a32      	ldr	r2, [pc, #200]	; (8009f1c <initMotors+0x400>)
 8009e54:	3320      	adds	r3, #32
 8009e56:	0011      	movs	r1, r2
 8009e58:	2240      	movs	r2, #64	; 0x40
 8009e5a:	0018      	movs	r0, r3
 8009e5c:	f003 f948 	bl	800d0f0 <memcpy>
	m5.channel = TIM_CHANNEL_2 ;
 8009e60:	4b3b      	ldr	r3, [pc, #236]	; (8009f50 <initMotors+0x434>)
 8009e62:	2285      	movs	r2, #133	; 0x85
 8009e64:	00d2      	lsls	r2, r2, #3
 8009e66:	4694      	mov	ip, r2
 8009e68:	44bc      	add	ip, r7
 8009e6a:	4463      	add	r3, ip
 8009e6c:	2204      	movs	r2, #4
 8009e6e:	661a      	str	r2, [r3, #96]	; 0x60
	m5.pinFam1 = GPIOD ;
 8009e70:	4b37      	ldr	r3, [pc, #220]	; (8009f50 <initMotors+0x434>)
 8009e72:	2285      	movs	r2, #133	; 0x85
 8009e74:	00d2      	lsls	r2, r2, #3
 8009e76:	4694      	mov	ip, r2
 8009e78:	44bc      	add	ip, r7
 8009e7a:	4463      	add	r3, ip
 8009e7c:	4a31      	ldr	r2, [pc, #196]	; (8009f44 <initMotors+0x428>)
 8009e7e:	611a      	str	r2, [r3, #16]
	m5.pinNum1 = GPIO_PIN_2 ;
 8009e80:	4b33      	ldr	r3, [pc, #204]	; (8009f50 <initMotors+0x434>)
 8009e82:	2285      	movs	r2, #133	; 0x85
 8009e84:	00d2      	lsls	r2, r2, #3
 8009e86:	4694      	mov	ip, r2
 8009e88:	44bc      	add	ip, r7
 8009e8a:	4463      	add	r3, ip
 8009e8c:	2204      	movs	r2, #4
 8009e8e:	829a      	strh	r2, [r3, #20]
	m5.pinFam2 = GPIOD ;
 8009e90:	4b2f      	ldr	r3, [pc, #188]	; (8009f50 <initMotors+0x434>)
 8009e92:	2285      	movs	r2, #133	; 0x85
 8009e94:	00d2      	lsls	r2, r2, #3
 8009e96:	4694      	mov	ip, r2
 8009e98:	44bc      	add	ip, r7
 8009e9a:	4463      	add	r3, ip
 8009e9c:	4a29      	ldr	r2, [pc, #164]	; (8009f44 <initMotors+0x428>)
 8009e9e:	619a      	str	r2, [r3, #24]
	m5.pinNum2 = GPIO_PIN_1 ;
 8009ea0:	4b2b      	ldr	r3, [pc, #172]	; (8009f50 <initMotors+0x434>)
 8009ea2:	2285      	movs	r2, #133	; 0x85
 8009ea4:	00d2      	lsls	r2, r2, #3
 8009ea6:	4694      	mov	ip, r2
 8009ea8:	44bc      	add	ip, r7
 8009eaa:	4463      	add	r3, ip
 8009eac:	2202      	movs	r2, #2
 8009eae:	839a      	strh	r2, [r3, #28]
	p->motors[4] = m5 ;
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	2383      	movs	r3, #131	; 0x83
 8009eb4:	011b      	lsls	r3, r3, #4
 8009eb6:	4926      	ldr	r1, [pc, #152]	; (8009f50 <initMotors+0x434>)
 8009eb8:	2085      	movs	r0, #133	; 0x85
 8009eba:	00c0      	lsls	r0, r0, #3
 8009ebc:	4684      	mov	ip, r0
 8009ebe:	44bc      	add	ip, r7
 8009ec0:	4461      	add	r1, ip
 8009ec2:	18d3      	adds	r3, r2, r3
 8009ec4:	2284      	movs	r2, #132	; 0x84
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	f003 f912 	bl	800d0f0 <memcpy>
	standardInitMotor(&(p->motors[4]));
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2283      	movs	r2, #131	; 0x83
 8009ed0:	0112      	lsls	r2, r2, #4
 8009ed2:	4694      	mov	ip, r2
 8009ed4:	4463      	add	r3, ip
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f001 f96e 	bl	800b1b8 <standardInitMotor>
	p->motors[4].trans.type = TYPE_HORI ;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a1d      	ldr	r2, [pc, #116]	; (8009f54 <initMotors+0x438>)
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	5499      	strb	r1, [r3, r2]

	Motor m6 ;
	m6.id = 5 ;
 8009ee4:	4b1c      	ldr	r3, [pc, #112]	; (8009f58 <initMotors+0x43c>)
 8009ee6:	2285      	movs	r2, #133	; 0x85
 8009ee8:	00d2      	lsls	r2, r2, #3
 8009eea:	4694      	mov	ip, r2
 8009eec:	44bc      	add	ip, r7
 8009eee:	4463      	add	r3, ip
 8009ef0:	2205      	movs	r2, #5
 8009ef2:	701a      	strb	r2, [r3, #0]
	m6.pinFamTim = GPIOA ;
 8009ef4:	4b18      	ldr	r3, [pc, #96]	; (8009f58 <initMotors+0x43c>)
 8009ef6:	2285      	movs	r2, #133	; 0x85
 8009ef8:	00d2      	lsls	r2, r2, #3
 8009efa:	4694      	mov	ip, r2
 8009efc:	44bc      	add	ip, r7
 8009efe:	4463      	add	r3, ip
 8009f00:	22a0      	movs	r2, #160	; 0xa0
 8009f02:	05d2      	lsls	r2, r2, #23
 8009f04:	665a      	str	r2, [r3, #100]	; 0x64
	m6.pinNumTim = GPIO_PIN_8 ;
 8009f06:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <initMotors+0x43c>)
 8009f08:	2285      	movs	r2, #133	; 0x85
 8009f0a:	00d2      	lsls	r2, r2, #3
 8009f0c:	4694      	mov	ip, r2
 8009f0e:	44bc      	add	ip, r7
 8009f10:	4463      	add	r3, ip
 8009f12:	2268      	movs	r2, #104	; 0x68
 8009f14:	2180      	movs	r1, #128	; 0x80
 8009f16:	e021      	b.n	8009f5c <initMotors+0x440>
 8009f18:	fffffbd4 	.word	0xfffffbd4
 8009f1c:	20000ef8 	.word	0x20000ef8
 8009f20:	50000800 	.word	0x50000800
 8009f24:	50000400 	.word	0x50000400
 8009f28:	0000069c 	.word	0x0000069c
 8009f2c:	fffffef8 	.word	0xfffffef8
 8009f30:	000006a4 	.word	0x000006a4
 8009f34:	fffffe74 	.word	0xfffffe74
 8009f38:	20000d24 	.word	0x20000d24
 8009f3c:	000007a4 	.word	0x000007a4
 8009f40:	fffffdf0 	.word	0xfffffdf0
 8009f44:	50000c00 	.word	0x50000c00
 8009f48:	000007ac 	.word	0x000007ac
 8009f4c:	00000828 	.word	0x00000828
 8009f50:	fffffd6c 	.word	0xfffffd6c
 8009f54:	000008ac 	.word	0x000008ac
 8009f58:	fffffce8 	.word	0xfffffce8
 8009f5c:	0049      	lsls	r1, r1, #1
 8009f5e:	5299      	strh	r1, [r3, r2]
	m6.htim = htim1 ;
 8009f60:	4b92      	ldr	r3, [pc, #584]	; (800a1ac <initMotors+0x690>)
 8009f62:	2285      	movs	r2, #133	; 0x85
 8009f64:	00d2      	lsls	r2, r2, #3
 8009f66:	4694      	mov	ip, r2
 8009f68:	44bc      	add	ip, r7
 8009f6a:	4463      	add	r3, ip
 8009f6c:	4a90      	ldr	r2, [pc, #576]	; (800a1b0 <initMotors+0x694>)
 8009f6e:	3320      	adds	r3, #32
 8009f70:	0011      	movs	r1, r2
 8009f72:	2240      	movs	r2, #64	; 0x40
 8009f74:	0018      	movs	r0, r3
 8009f76:	f003 f8bb 	bl	800d0f0 <memcpy>
	m6.channel = TIM_CHANNEL_1 ;
 8009f7a:	4b8c      	ldr	r3, [pc, #560]	; (800a1ac <initMotors+0x690>)
 8009f7c:	2285      	movs	r2, #133	; 0x85
 8009f7e:	00d2      	lsls	r2, r2, #3
 8009f80:	4694      	mov	ip, r2
 8009f82:	44bc      	add	ip, r7
 8009f84:	4463      	add	r3, ip
 8009f86:	2200      	movs	r2, #0
 8009f88:	661a      	str	r2, [r3, #96]	; 0x60
	m6.pinFam1 = GPIOD ;
 8009f8a:	4b88      	ldr	r3, [pc, #544]	; (800a1ac <initMotors+0x690>)
 8009f8c:	2285      	movs	r2, #133	; 0x85
 8009f8e:	00d2      	lsls	r2, r2, #3
 8009f90:	4694      	mov	ip, r2
 8009f92:	44bc      	add	ip, r7
 8009f94:	4463      	add	r3, ip
 8009f96:	4a87      	ldr	r2, [pc, #540]	; (800a1b4 <initMotors+0x698>)
 8009f98:	611a      	str	r2, [r3, #16]
	m6.pinNum1 = GPIO_PIN_0 ;
 8009f9a:	4b84      	ldr	r3, [pc, #528]	; (800a1ac <initMotors+0x690>)
 8009f9c:	2285      	movs	r2, #133	; 0x85
 8009f9e:	00d2      	lsls	r2, r2, #3
 8009fa0:	4694      	mov	ip, r2
 8009fa2:	44bc      	add	ip, r7
 8009fa4:	4463      	add	r3, ip
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	829a      	strh	r2, [r3, #20]
	m6.pinFam2 = GPIOC ;
 8009faa:	4b80      	ldr	r3, [pc, #512]	; (800a1ac <initMotors+0x690>)
 8009fac:	2285      	movs	r2, #133	; 0x85
 8009fae:	00d2      	lsls	r2, r2, #3
 8009fb0:	4694      	mov	ip, r2
 8009fb2:	44bc      	add	ip, r7
 8009fb4:	4463      	add	r3, ip
 8009fb6:	4a80      	ldr	r2, [pc, #512]	; (800a1b8 <initMotors+0x69c>)
 8009fb8:	619a      	str	r2, [r3, #24]
	m6.pinNum2 = GPIO_PIN_9 ;
 8009fba:	4b7c      	ldr	r3, [pc, #496]	; (800a1ac <initMotors+0x690>)
 8009fbc:	2285      	movs	r2, #133	; 0x85
 8009fbe:	00d2      	lsls	r2, r2, #3
 8009fc0:	4694      	mov	ip, r2
 8009fc2:	44bc      	add	ip, r7
 8009fc4:	4463      	add	r3, ip
 8009fc6:	2280      	movs	r2, #128	; 0x80
 8009fc8:	0092      	lsls	r2, r2, #2
 8009fca:	839a      	strh	r2, [r3, #28]
	p->motors[5] = m6 ;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a7b      	ldr	r2, [pc, #492]	; (800a1bc <initMotors+0x6a0>)
 8009fd0:	4976      	ldr	r1, [pc, #472]	; (800a1ac <initMotors+0x690>)
 8009fd2:	2085      	movs	r0, #133	; 0x85
 8009fd4:	00c0      	lsls	r0, r0, #3
 8009fd6:	4684      	mov	ip, r0
 8009fd8:	44bc      	add	ip, r7
 8009fda:	4461      	add	r1, ip
 8009fdc:	189b      	adds	r3, r3, r2
 8009fde:	2284      	movs	r2, #132	; 0x84
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	f003 f885 	bl	800d0f0 <memcpy>
	standardInitMotor(&(p->motors[5]));
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a74      	ldr	r2, [pc, #464]	; (800a1bc <initMotors+0x6a0>)
 8009fea:	4694      	mov	ip, r2
 8009fec:	4463      	add	r3, ip
 8009fee:	0018      	movs	r0, r3
 8009ff0:	f001 f8e2 	bl	800b1b8 <standardInitMotor>
	p->motors[5].trans.type = TYPE_HORI ;
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	2393      	movs	r3, #147	; 0x93
 8009ff8:	011b      	lsls	r3, r3, #4
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	54d1      	strb	r1, [r2, r3]

	Motor m7 ;
	m7.id = 6 ;
 8009ffe:	4b70      	ldr	r3, [pc, #448]	; (800a1c0 <initMotors+0x6a4>)
 800a000:	2285      	movs	r2, #133	; 0x85
 800a002:	00d2      	lsls	r2, r2, #3
 800a004:	4694      	mov	ip, r2
 800a006:	44bc      	add	ip, r7
 800a008:	4463      	add	r3, ip
 800a00a:	2206      	movs	r2, #6
 800a00c:	701a      	strb	r2, [r3, #0]
	m7.pinFamTim = GPIOB ;
 800a00e:	4b6c      	ldr	r3, [pc, #432]	; (800a1c0 <initMotors+0x6a4>)
 800a010:	2285      	movs	r2, #133	; 0x85
 800a012:	00d2      	lsls	r2, r2, #3
 800a014:	4694      	mov	ip, r2
 800a016:	44bc      	add	ip, r7
 800a018:	4463      	add	r3, ip
 800a01a:	4a6a      	ldr	r2, [pc, #424]	; (800a1c4 <initMotors+0x6a8>)
 800a01c:	665a      	str	r2, [r3, #100]	; 0x64
	m7.pinNumTim = GPIO_PIN_15 ;
 800a01e:	4b68      	ldr	r3, [pc, #416]	; (800a1c0 <initMotors+0x6a4>)
 800a020:	2285      	movs	r2, #133	; 0x85
 800a022:	00d2      	lsls	r2, r2, #3
 800a024:	4694      	mov	ip, r2
 800a026:	44bc      	add	ip, r7
 800a028:	4463      	add	r3, ip
 800a02a:	2268      	movs	r2, #104	; 0x68
 800a02c:	4966      	ldr	r1, [pc, #408]	; (800a1c8 <initMotors+0x6ac>)
 800a02e:	5299      	strh	r1, [r3, r2]
	m7.htim = htim15 ;
 800a030:	4b63      	ldr	r3, [pc, #396]	; (800a1c0 <initMotors+0x6a4>)
 800a032:	2285      	movs	r2, #133	; 0x85
 800a034:	00d2      	lsls	r2, r2, #3
 800a036:	4694      	mov	ip, r2
 800a038:	44bc      	add	ip, r7
 800a03a:	4463      	add	r3, ip
 800a03c:	4a63      	ldr	r2, [pc, #396]	; (800a1cc <initMotors+0x6b0>)
 800a03e:	3320      	adds	r3, #32
 800a040:	0011      	movs	r1, r2
 800a042:	2240      	movs	r2, #64	; 0x40
 800a044:	0018      	movs	r0, r3
 800a046:	f003 f853 	bl	800d0f0 <memcpy>
	m7.channel = TIM_CHANNEL_2 ;
 800a04a:	4b5d      	ldr	r3, [pc, #372]	; (800a1c0 <initMotors+0x6a4>)
 800a04c:	2285      	movs	r2, #133	; 0x85
 800a04e:	00d2      	lsls	r2, r2, #3
 800a050:	4694      	mov	ip, r2
 800a052:	44bc      	add	ip, r7
 800a054:	4463      	add	r3, ip
 800a056:	2204      	movs	r2, #4
 800a058:	661a      	str	r2, [r3, #96]	; 0x60
	m7.pinFam1 = GPIOC ;
 800a05a:	4b59      	ldr	r3, [pc, #356]	; (800a1c0 <initMotors+0x6a4>)
 800a05c:	2285      	movs	r2, #133	; 0x85
 800a05e:	00d2      	lsls	r2, r2, #3
 800a060:	4694      	mov	ip, r2
 800a062:	44bc      	add	ip, r7
 800a064:	4463      	add	r3, ip
 800a066:	4a54      	ldr	r2, [pc, #336]	; (800a1b8 <initMotors+0x69c>)
 800a068:	611a      	str	r2, [r3, #16]
	m7.pinNum1 = GPIO_PIN_8 ;
 800a06a:	4b55      	ldr	r3, [pc, #340]	; (800a1c0 <initMotors+0x6a4>)
 800a06c:	2285      	movs	r2, #133	; 0x85
 800a06e:	00d2      	lsls	r2, r2, #3
 800a070:	4694      	mov	ip, r2
 800a072:	44bc      	add	ip, r7
 800a074:	4463      	add	r3, ip
 800a076:	2280      	movs	r2, #128	; 0x80
 800a078:	0052      	lsls	r2, r2, #1
 800a07a:	829a      	strh	r2, [r3, #20]
	m7.pinFam2 = GPIOA ;
 800a07c:	4b50      	ldr	r3, [pc, #320]	; (800a1c0 <initMotors+0x6a4>)
 800a07e:	2285      	movs	r2, #133	; 0x85
 800a080:	00d2      	lsls	r2, r2, #3
 800a082:	4694      	mov	ip, r2
 800a084:	44bc      	add	ip, r7
 800a086:	4463      	add	r3, ip
 800a088:	22a0      	movs	r2, #160	; 0xa0
 800a08a:	05d2      	lsls	r2, r2, #23
 800a08c:	619a      	str	r2, [r3, #24]
	m7.pinNum2 = GPIO_PIN_15 ;
 800a08e:	4b4c      	ldr	r3, [pc, #304]	; (800a1c0 <initMotors+0x6a4>)
 800a090:	2285      	movs	r2, #133	; 0x85
 800a092:	00d2      	lsls	r2, r2, #3
 800a094:	4694      	mov	ip, r2
 800a096:	44bc      	add	ip, r7
 800a098:	4463      	add	r3, ip
 800a09a:	4a4b      	ldr	r2, [pc, #300]	; (800a1c8 <initMotors+0x6ac>)
 800a09c:	839a      	strh	r2, [r3, #28]
	p->motors[6] = m7 ;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a4b      	ldr	r2, [pc, #300]	; (800a1d0 <initMotors+0x6b4>)
 800a0a2:	4947      	ldr	r1, [pc, #284]	; (800a1c0 <initMotors+0x6a4>)
 800a0a4:	2085      	movs	r0, #133	; 0x85
 800a0a6:	00c0      	lsls	r0, r0, #3
 800a0a8:	4684      	mov	ip, r0
 800a0aa:	44bc      	add	ip, r7
 800a0ac:	4461      	add	r1, ip
 800a0ae:	189b      	adds	r3, r3, r2
 800a0b0:	2284      	movs	r2, #132	; 0x84
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	f003 f81c 	bl	800d0f0 <memcpy>
	standardInitMotor(&(p->motors[6]));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a45      	ldr	r2, [pc, #276]	; (800a1d0 <initMotors+0x6b4>)
 800a0bc:	4694      	mov	ip, r2
 800a0be:	4463      	add	r3, ip
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f001 f879 	bl	800b1b8 <standardInitMotor>
	p->motors[6].trans.type = TYPE_HORI ;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a42      	ldr	r2, [pc, #264]	; (800a1d4 <initMotors+0x6b8>)
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	5499      	strb	r1, [r3, r2]

	Motor m8 ;
	m8.id = 7 ;
 800a0ce:	4b42      	ldr	r3, [pc, #264]	; (800a1d8 <initMotors+0x6bc>)
 800a0d0:	2285      	movs	r2, #133	; 0x85
 800a0d2:	00d2      	lsls	r2, r2, #3
 800a0d4:	4694      	mov	ip, r2
 800a0d6:	44bc      	add	ip, r7
 800a0d8:	4463      	add	r3, ip
 800a0da:	2207      	movs	r2, #7
 800a0dc:	701a      	strb	r2, [r3, #0]
	m8.pinFamTim = GPIOB ;
 800a0de:	4b3e      	ldr	r3, [pc, #248]	; (800a1d8 <initMotors+0x6bc>)
 800a0e0:	2285      	movs	r2, #133	; 0x85
 800a0e2:	00d2      	lsls	r2, r2, #3
 800a0e4:	4694      	mov	ip, r2
 800a0e6:	44bc      	add	ip, r7
 800a0e8:	4463      	add	r3, ip
 800a0ea:	4a36      	ldr	r2, [pc, #216]	; (800a1c4 <initMotors+0x6a8>)
 800a0ec:	665a      	str	r2, [r3, #100]	; 0x64
	m8.pinNumTim = GPIO_PIN_14 ;
 800a0ee:	4b3a      	ldr	r3, [pc, #232]	; (800a1d8 <initMotors+0x6bc>)
 800a0f0:	2285      	movs	r2, #133	; 0x85
 800a0f2:	00d2      	lsls	r2, r2, #3
 800a0f4:	4694      	mov	ip, r2
 800a0f6:	44bc      	add	ip, r7
 800a0f8:	4463      	add	r3, ip
 800a0fa:	2268      	movs	r2, #104	; 0x68
 800a0fc:	2180      	movs	r1, #128	; 0x80
 800a0fe:	01c9      	lsls	r1, r1, #7
 800a100:	5299      	strh	r1, [r3, r2]
	m8.htim = htim15 ;
 800a102:	4b35      	ldr	r3, [pc, #212]	; (800a1d8 <initMotors+0x6bc>)
 800a104:	2285      	movs	r2, #133	; 0x85
 800a106:	00d2      	lsls	r2, r2, #3
 800a108:	4694      	mov	ip, r2
 800a10a:	44bc      	add	ip, r7
 800a10c:	4463      	add	r3, ip
 800a10e:	4a2f      	ldr	r2, [pc, #188]	; (800a1cc <initMotors+0x6b0>)
 800a110:	3320      	adds	r3, #32
 800a112:	0011      	movs	r1, r2
 800a114:	2240      	movs	r2, #64	; 0x40
 800a116:	0018      	movs	r0, r3
 800a118:	f002 ffea 	bl	800d0f0 <memcpy>
	m8.channel = TIM_CHANNEL_1 ;
 800a11c:	4b2e      	ldr	r3, [pc, #184]	; (800a1d8 <initMotors+0x6bc>)
 800a11e:	2285      	movs	r2, #133	; 0x85
 800a120:	00d2      	lsls	r2, r2, #3
 800a122:	4694      	mov	ip, r2
 800a124:	44bc      	add	ip, r7
 800a126:	4463      	add	r3, ip
 800a128:	2200      	movs	r2, #0
 800a12a:	661a      	str	r2, [r3, #96]	; 0x60
	m8.pinFam1 = GPIOA ;
 800a12c:	4b2a      	ldr	r3, [pc, #168]	; (800a1d8 <initMotors+0x6bc>)
 800a12e:	2285      	movs	r2, #133	; 0x85
 800a130:	00d2      	lsls	r2, r2, #3
 800a132:	4694      	mov	ip, r2
 800a134:	44bc      	add	ip, r7
 800a136:	4463      	add	r3, ip
 800a138:	22a0      	movs	r2, #160	; 0xa0
 800a13a:	05d2      	lsls	r2, r2, #23
 800a13c:	611a      	str	r2, [r3, #16]
	m8.pinNum1 = GPIO_PIN_12 ;
 800a13e:	4b26      	ldr	r3, [pc, #152]	; (800a1d8 <initMotors+0x6bc>)
 800a140:	2285      	movs	r2, #133	; 0x85
 800a142:	00d2      	lsls	r2, r2, #3
 800a144:	4694      	mov	ip, r2
 800a146:	44bc      	add	ip, r7
 800a148:	4463      	add	r3, ip
 800a14a:	2280      	movs	r2, #128	; 0x80
 800a14c:	0152      	lsls	r2, r2, #5
 800a14e:	829a      	strh	r2, [r3, #20]
	m8.pinFam2 = GPIOB ;
 800a150:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <initMotors+0x6bc>)
 800a152:	2285      	movs	r2, #133	; 0x85
 800a154:	00d2      	lsls	r2, r2, #3
 800a156:	4694      	mov	ip, r2
 800a158:	44bc      	add	ip, r7
 800a15a:	4463      	add	r3, ip
 800a15c:	4a19      	ldr	r2, [pc, #100]	; (800a1c4 <initMotors+0x6a8>)
 800a15e:	619a      	str	r2, [r3, #24]
	m8.pinNum2 = GPIO_PIN_13 ;
 800a160:	4b1d      	ldr	r3, [pc, #116]	; (800a1d8 <initMotors+0x6bc>)
 800a162:	2285      	movs	r2, #133	; 0x85
 800a164:	00d2      	lsls	r2, r2, #3
 800a166:	4694      	mov	ip, r2
 800a168:	44bc      	add	ip, r7
 800a16a:	4463      	add	r3, ip
 800a16c:	2280      	movs	r2, #128	; 0x80
 800a16e:	0192      	lsls	r2, r2, #6
 800a170:	839a      	strh	r2, [r3, #28]
	p->motors[7] = m8 ;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a19      	ldr	r2, [pc, #100]	; (800a1dc <initMotors+0x6c0>)
 800a176:	4918      	ldr	r1, [pc, #96]	; (800a1d8 <initMotors+0x6bc>)
 800a178:	2085      	movs	r0, #133	; 0x85
 800a17a:	00c0      	lsls	r0, r0, #3
 800a17c:	4684      	mov	ip, r0
 800a17e:	44bc      	add	ip, r7
 800a180:	4461      	add	r1, ip
 800a182:	189b      	adds	r3, r3, r2
 800a184:	2284      	movs	r2, #132	; 0x84
 800a186:	0018      	movs	r0, r3
 800a188:	f002 ffb2 	bl	800d0f0 <memcpy>
	standardInitMotor(&(p->motors[7]));
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a13      	ldr	r2, [pc, #76]	; (800a1dc <initMotors+0x6c0>)
 800a190:	4694      	mov	ip, r2
 800a192:	4463      	add	r3, ip
 800a194:	0018      	movs	r0, r3
 800a196:	f001 f80f 	bl	800b1b8 <standardInitMotor>
	p->motors[7].trans.type = TYPE_HORI ;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a10      	ldr	r2, [pc, #64]	; (800a1e0 <initMotors+0x6c4>)
 800a19e:	2101      	movs	r1, #1
 800a1a0:	5499      	strb	r1, [r3, r2]
}
 800a1a2:	46c0      	nop			; (mov r8, r8)
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <initMotors+0x6c8>)
 800a1a8:	449d      	add	sp, r3
 800a1aa:	bd90      	pop	{r4, r7, pc}
 800a1ac:	fffffce8 	.word	0xfffffce8
 800a1b0:	20000ef8 	.word	0x20000ef8
 800a1b4:	50000c00 	.word	0x50000c00
 800a1b8:	50000800 	.word	0x50000800
 800a1bc:	000008b4 	.word	0x000008b4
 800a1c0:	fffffc64 	.word	0xfffffc64
 800a1c4:	50000400 	.word	0x50000400
 800a1c8:	ffff8000 	.word	0xffff8000
 800a1cc:	20000ce0 	.word	0x20000ce0
 800a1d0:	00000938 	.word	0x00000938
 800a1d4:	000009b4 	.word	0x000009b4
 800a1d8:	fffffbe0 	.word	0xfffffbe0
 800a1dc:	000009bc 	.word	0x000009bc
 800a1e0:	00000a38 	.word	0x00000a38
 800a1e4:	0000042c 	.word	0x0000042c

0800a1e8 <initVCaptors>:

void initVCaptors(params* p)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	4fc2      	ldr	r7, [pc, #776]	; (800a4f4 <initVCaptors+0x30c>)
 800a1ec:	44bd      	add	sp, r7
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
	VCaptor v1 ;
	v1.id = 0 ;
 800a1f2:	2195      	movs	r1, #149	; 0x95
 800a1f4:	0089      	lsls	r1, r1, #2
 800a1f6:	187b      	adds	r3, r7, r1
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	701a      	strb	r2, [r3, #0]
	v1.inputPinF =GPIOC ;
 800a1fc:	187b      	adds	r3, r7, r1
 800a1fe:	4abe      	ldr	r2, [pc, #760]	; (800a4f8 <initVCaptors+0x310>)
 800a200:	62da      	str	r2, [r3, #44]	; 0x2c
	v1.inputPinN = GPIO_PIN_4 ;
 800a202:	187b      	adds	r3, r7, r1
 800a204:	2210      	movs	r2, #16
 800a206:	861a      	strh	r2, [r3, #48]	; 0x30
	v1.mot = &(p->motors[0]);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	22c4      	movs	r2, #196	; 0xc4
 800a20c:	00d2      	lsls	r2, r2, #3
 800a20e:	189a      	adds	r2, r3, r2
 800a210:	187b      	adds	r3, r7, r1
 800a212:	645a      	str	r2, [r3, #68]	; 0x44
	p->vcs[0] = v1 ;
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	23e0      	movs	r3, #224	; 0xe0
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	1879      	adds	r1, r7, r1
 800a21c:	18d3      	adds	r3, r2, r3
 800a21e:	2254      	movs	r2, #84	; 0x54
 800a220:	0018      	movs	r0, r3
 800a222:	f002 ff65 	bl	800d0f0 <memcpy>
	standardInitVCaptor(&(p->vcs[0])) ;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	22e0      	movs	r2, #224	; 0xe0
 800a22a:	0092      	lsls	r2, r2, #2
 800a22c:	4694      	mov	ip, r2
 800a22e:	4463      	add	r3, ip
 800a230:	0018      	movs	r0, r3
 800a232:	f002 fcb4 	bl	800cb9e <standardInitVCaptor>

	VCaptor v2 ;
	v2.id = 1 ;
 800a236:	2180      	movs	r1, #128	; 0x80
 800a238:	0089      	lsls	r1, r1, #2
 800a23a:	187b      	adds	r3, r7, r1
 800a23c:	2201      	movs	r2, #1
 800a23e:	701a      	strb	r2, [r3, #0]
	v2.inputPinF =GPIOC ;
 800a240:	187b      	adds	r3, r7, r1
 800a242:	4aad      	ldr	r2, [pc, #692]	; (800a4f8 <initVCaptors+0x310>)
 800a244:	62da      	str	r2, [r3, #44]	; 0x2c
	v2.inputPinN = GPIO_PIN_5 ;
 800a246:	187b      	adds	r3, r7, r1
 800a248:	2220      	movs	r2, #32
 800a24a:	861a      	strh	r2, [r3, #48]	; 0x30
	v2.mot = &(p->motors[1]) ;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4aab      	ldr	r2, [pc, #684]	; (800a4fc <initVCaptors+0x314>)
 800a250:	189a      	adds	r2, r3, r2
 800a252:	187b      	adds	r3, r7, r1
 800a254:	645a      	str	r2, [r3, #68]	; 0x44
	p->vcs[1] = v2 ;
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	23f5      	movs	r3, #245	; 0xf5
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	1879      	adds	r1, r7, r1
 800a25e:	18d3      	adds	r3, r2, r3
 800a260:	2254      	movs	r2, #84	; 0x54
 800a262:	0018      	movs	r0, r3
 800a264:	f002 ff44 	bl	800d0f0 <memcpy>
	standardInitVCaptor(&(p->vcs[1])) ;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	22f5      	movs	r2, #245	; 0xf5
 800a26c:	0092      	lsls	r2, r2, #2
 800a26e:	4694      	mov	ip, r2
 800a270:	4463      	add	r3, ip
 800a272:	0018      	movs	r0, r3
 800a274:	f002 fc93 	bl	800cb9e <standardInitVCaptor>

	VCaptor v3 ;
	v3.id = 2 ;
 800a278:	21d6      	movs	r1, #214	; 0xd6
 800a27a:	0049      	lsls	r1, r1, #1
 800a27c:	187b      	adds	r3, r7, r1
 800a27e:	2202      	movs	r2, #2
 800a280:	701a      	strb	r2, [r3, #0]
	v3.inputPinF =GPIOB ;
 800a282:	187b      	adds	r3, r7, r1
 800a284:	4a9e      	ldr	r2, [pc, #632]	; (800a500 <initVCaptors+0x318>)
 800a286:	62da      	str	r2, [r3, #44]	; 0x2c
	v3.inputPinN = GPIO_PIN_0 ;
 800a288:	187b      	adds	r3, r7, r1
 800a28a:	2201      	movs	r2, #1
 800a28c:	861a      	strh	r2, [r3, #48]	; 0x30
	v3.mot = &(p->motors[2]);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	22e5      	movs	r2, #229	; 0xe5
 800a292:	00d2      	lsls	r2, r2, #3
 800a294:	189a      	adds	r2, r3, r2
 800a296:	187b      	adds	r3, r7, r1
 800a298:	645a      	str	r2, [r3, #68]	; 0x44
	p->vcs[2] = v3 ;
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	2385      	movs	r3, #133	; 0x85
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	1879      	adds	r1, r7, r1
 800a2a2:	18d3      	adds	r3, r2, r3
 800a2a4:	2254      	movs	r2, #84	; 0x54
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	f002 ff22 	bl	800d0f0 <memcpy>
	standardInitVCaptor(&(p->vcs[2])) ;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2285      	movs	r2, #133	; 0x85
 800a2b0:	00d2      	lsls	r2, r2, #3
 800a2b2:	4694      	mov	ip, r2
 800a2b4:	4463      	add	r3, ip
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	f002 fc71 	bl	800cb9e <standardInitVCaptor>

	VCaptor v4 ;
	v4.id = 3 ;
 800a2bc:	4b91      	ldr	r3, [pc, #580]	; (800a504 <initVCaptors+0x31c>)
 800a2be:	22aa      	movs	r2, #170	; 0xaa
 800a2c0:	0092      	lsls	r2, r2, #2
 800a2c2:	4694      	mov	ip, r2
 800a2c4:	44bc      	add	ip, r7
 800a2c6:	4463      	add	r3, ip
 800a2c8:	2203      	movs	r2, #3
 800a2ca:	701a      	strb	r2, [r3, #0]
	v4.inputPinF = GPIOB ;
 800a2cc:	4b8d      	ldr	r3, [pc, #564]	; (800a504 <initVCaptors+0x31c>)
 800a2ce:	22aa      	movs	r2, #170	; 0xaa
 800a2d0:	0092      	lsls	r2, r2, #2
 800a2d2:	4694      	mov	ip, r2
 800a2d4:	44bc      	add	ip, r7
 800a2d6:	4463      	add	r3, ip
 800a2d8:	4a89      	ldr	r2, [pc, #548]	; (800a500 <initVCaptors+0x318>)
 800a2da:	62da      	str	r2, [r3, #44]	; 0x2c
	v4.inputPinN = GPIO_PIN_1 ;
 800a2dc:	4b89      	ldr	r3, [pc, #548]	; (800a504 <initVCaptors+0x31c>)
 800a2de:	22aa      	movs	r2, #170	; 0xaa
 800a2e0:	0092      	lsls	r2, r2, #2
 800a2e2:	4694      	mov	ip, r2
 800a2e4:	44bc      	add	ip, r7
 800a2e6:	4463      	add	r3, ip
 800a2e8:	2202      	movs	r2, #2
 800a2ea:	861a      	strh	r2, [r3, #48]	; 0x30
	v4.mot = &(p->motors[3]) ;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a86      	ldr	r2, [pc, #536]	; (800a508 <initVCaptors+0x320>)
 800a2f0:	189a      	adds	r2, r3, r2
 800a2f2:	4b84      	ldr	r3, [pc, #528]	; (800a504 <initVCaptors+0x31c>)
 800a2f4:	21aa      	movs	r1, #170	; 0xaa
 800a2f6:	0089      	lsls	r1, r1, #2
 800a2f8:	468c      	mov	ip, r1
 800a2fa:	44bc      	add	ip, r7
 800a2fc:	4463      	add	r3, ip
 800a2fe:	645a      	str	r2, [r3, #68]	; 0x44
	p->vcs[3] = v4 ;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a82      	ldr	r2, [pc, #520]	; (800a50c <initVCaptors+0x324>)
 800a304:	497f      	ldr	r1, [pc, #508]	; (800a504 <initVCaptors+0x31c>)
 800a306:	20aa      	movs	r0, #170	; 0xaa
 800a308:	0080      	lsls	r0, r0, #2
 800a30a:	4684      	mov	ip, r0
 800a30c:	44bc      	add	ip, r7
 800a30e:	4461      	add	r1, ip
 800a310:	189b      	adds	r3, r3, r2
 800a312:	2254      	movs	r2, #84	; 0x54
 800a314:	0018      	movs	r0, r3
 800a316:	f002 feeb 	bl	800d0f0 <memcpy>
	standardInitVCaptor(&(p->vcs[3])) ;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a7b      	ldr	r2, [pc, #492]	; (800a50c <initVCaptors+0x324>)
 800a31e:	4694      	mov	ip, r2
 800a320:	4463      	add	r3, ip
 800a322:	0018      	movs	r0, r3
 800a324:	f002 fc3b 	bl	800cb9e <standardInitVCaptor>

	VCaptor v5 ;
	v5.id = 0 ;
 800a328:	4b79      	ldr	r3, [pc, #484]	; (800a510 <initVCaptors+0x328>)
 800a32a:	22aa      	movs	r2, #170	; 0xaa
 800a32c:	0092      	lsls	r2, r2, #2
 800a32e:	4694      	mov	ip, r2
 800a330:	44bc      	add	ip, r7
 800a332:	4463      	add	r3, ip
 800a334:	2200      	movs	r2, #0
 800a336:	701a      	strb	r2, [r3, #0]
	v5.inputPinF =GPIOC ;
 800a338:	4b75      	ldr	r3, [pc, #468]	; (800a510 <initVCaptors+0x328>)
 800a33a:	22aa      	movs	r2, #170	; 0xaa
 800a33c:	0092      	lsls	r2, r2, #2
 800a33e:	4694      	mov	ip, r2
 800a340:	44bc      	add	ip, r7
 800a342:	4463      	add	r3, ip
 800a344:	4a6c      	ldr	r2, [pc, #432]	; (800a4f8 <initVCaptors+0x310>)
 800a346:	62da      	str	r2, [r3, #44]	; 0x2c
	v5.inputPinN = GPIO_PIN_13 ;
 800a348:	4b71      	ldr	r3, [pc, #452]	; (800a510 <initVCaptors+0x328>)
 800a34a:	22aa      	movs	r2, #170	; 0xaa
 800a34c:	0092      	lsls	r2, r2, #2
 800a34e:	4694      	mov	ip, r2
 800a350:	44bc      	add	ip, r7
 800a352:	4463      	add	r3, ip
 800a354:	2280      	movs	r2, #128	; 0x80
 800a356:	0192      	lsls	r2, r2, #6
 800a358:	861a      	strh	r2, [r3, #48]	; 0x30
	v5.mot = &(p->motors[7]);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a6d      	ldr	r2, [pc, #436]	; (800a514 <initVCaptors+0x32c>)
 800a35e:	189a      	adds	r2, r3, r2
 800a360:	4b6b      	ldr	r3, [pc, #428]	; (800a510 <initVCaptors+0x328>)
 800a362:	21aa      	movs	r1, #170	; 0xaa
 800a364:	0089      	lsls	r1, r1, #2
 800a366:	468c      	mov	ip, r1
 800a368:	44bc      	add	ip, r7
 800a36a:	4463      	add	r3, ip
 800a36c:	645a      	str	r2, [r3, #68]	; 0x44
	p->vcs[4] = v5 ;
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	239a      	movs	r3, #154	; 0x9a
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	4966      	ldr	r1, [pc, #408]	; (800a510 <initVCaptors+0x328>)
 800a376:	20aa      	movs	r0, #170	; 0xaa
 800a378:	0080      	lsls	r0, r0, #2
 800a37a:	4684      	mov	ip, r0
 800a37c:	44bc      	add	ip, r7
 800a37e:	4461      	add	r1, ip
 800a380:	18d3      	adds	r3, r2, r3
 800a382:	2254      	movs	r2, #84	; 0x54
 800a384:	0018      	movs	r0, r3
 800a386:	f002 feb3 	bl	800d0f0 <memcpy>
	standardInitVCaptor(&(p->vcs[4])) ;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	229a      	movs	r2, #154	; 0x9a
 800a38e:	00d2      	lsls	r2, r2, #3
 800a390:	4694      	mov	ip, r2
 800a392:	4463      	add	r3, ip
 800a394:	0018      	movs	r0, r3
 800a396:	f002 fc02 	bl	800cb9e <standardInitVCaptor>

	VCaptor v6 ;
	v6.id = 0 ;
 800a39a:	4b5f      	ldr	r3, [pc, #380]	; (800a518 <initVCaptors+0x330>)
 800a39c:	22aa      	movs	r2, #170	; 0xaa
 800a39e:	0092      	lsls	r2, r2, #2
 800a3a0:	4694      	mov	ip, r2
 800a3a2:	44bc      	add	ip, r7
 800a3a4:	4463      	add	r3, ip
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	701a      	strb	r2, [r3, #0]
	v6.inputPinF =GPIOC ;
 800a3aa:	4b5b      	ldr	r3, [pc, #364]	; (800a518 <initVCaptors+0x330>)
 800a3ac:	22aa      	movs	r2, #170	; 0xaa
 800a3ae:	0092      	lsls	r2, r2, #2
 800a3b0:	4694      	mov	ip, r2
 800a3b2:	44bc      	add	ip, r7
 800a3b4:	4463      	add	r3, ip
 800a3b6:	4a50      	ldr	r2, [pc, #320]	; (800a4f8 <initVCaptors+0x310>)
 800a3b8:	62da      	str	r2, [r3, #44]	; 0x2c
	v6.inputPinN = GPIO_PIN_14 ;
 800a3ba:	4b57      	ldr	r3, [pc, #348]	; (800a518 <initVCaptors+0x330>)
 800a3bc:	22aa      	movs	r2, #170	; 0xaa
 800a3be:	0092      	lsls	r2, r2, #2
 800a3c0:	4694      	mov	ip, r2
 800a3c2:	44bc      	add	ip, r7
 800a3c4:	4463      	add	r3, ip
 800a3c6:	2280      	movs	r2, #128	; 0x80
 800a3c8:	01d2      	lsls	r2, r2, #7
 800a3ca:	861a      	strh	r2, [r3, #48]	; 0x30
	v6.mot = &(p->motors[6]);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a53      	ldr	r2, [pc, #332]	; (800a51c <initVCaptors+0x334>)
 800a3d0:	189a      	adds	r2, r3, r2
 800a3d2:	4b51      	ldr	r3, [pc, #324]	; (800a518 <initVCaptors+0x330>)
 800a3d4:	21aa      	movs	r1, #170	; 0xaa
 800a3d6:	0089      	lsls	r1, r1, #2
 800a3d8:	468c      	mov	ip, r1
 800a3da:	44bc      	add	ip, r7
 800a3dc:	4463      	add	r3, ip
 800a3de:	645a      	str	r2, [r3, #68]	; 0x44
	p->vcs[5] = v6 ;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a4f      	ldr	r2, [pc, #316]	; (800a520 <initVCaptors+0x338>)
 800a3e4:	494c      	ldr	r1, [pc, #304]	; (800a518 <initVCaptors+0x330>)
 800a3e6:	20aa      	movs	r0, #170	; 0xaa
 800a3e8:	0080      	lsls	r0, r0, #2
 800a3ea:	4684      	mov	ip, r0
 800a3ec:	44bc      	add	ip, r7
 800a3ee:	4461      	add	r1, ip
 800a3f0:	189b      	adds	r3, r3, r2
 800a3f2:	2254      	movs	r2, #84	; 0x54
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f002 fe7b 	bl	800d0f0 <memcpy>
	standardInitVCaptor(&(p->vcs[5])) ;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a48      	ldr	r2, [pc, #288]	; (800a520 <initVCaptors+0x338>)
 800a3fe:	4694      	mov	ip, r2
 800a400:	4463      	add	r3, ip
 800a402:	0018      	movs	r0, r3
 800a404:	f002 fbcb 	bl	800cb9e <standardInitVCaptor>

	VCaptor v7 ;
	v7.id = 0 ;
 800a408:	4b46      	ldr	r3, [pc, #280]	; (800a524 <initVCaptors+0x33c>)
 800a40a:	22aa      	movs	r2, #170	; 0xaa
 800a40c:	0092      	lsls	r2, r2, #2
 800a40e:	4694      	mov	ip, r2
 800a410:	44bc      	add	ip, r7
 800a412:	4463      	add	r3, ip
 800a414:	2200      	movs	r2, #0
 800a416:	701a      	strb	r2, [r3, #0]
	v7.inputPinF =GPIOC ;
 800a418:	4b42      	ldr	r3, [pc, #264]	; (800a524 <initVCaptors+0x33c>)
 800a41a:	22aa      	movs	r2, #170	; 0xaa
 800a41c:	0092      	lsls	r2, r2, #2
 800a41e:	4694      	mov	ip, r2
 800a420:	44bc      	add	ip, r7
 800a422:	4463      	add	r3, ip
 800a424:	4a34      	ldr	r2, [pc, #208]	; (800a4f8 <initVCaptors+0x310>)
 800a426:	62da      	str	r2, [r3, #44]	; 0x2c
	v7.inputPinN = GPIO_PIN_15 ;
 800a428:	4b3e      	ldr	r3, [pc, #248]	; (800a524 <initVCaptors+0x33c>)
 800a42a:	22aa      	movs	r2, #170	; 0xaa
 800a42c:	0092      	lsls	r2, r2, #2
 800a42e:	4694      	mov	ip, r2
 800a430:	44bc      	add	ip, r7
 800a432:	4463      	add	r3, ip
 800a434:	4a3c      	ldr	r2, [pc, #240]	; (800a528 <initVCaptors+0x340>)
 800a436:	861a      	strh	r2, [r3, #48]	; 0x30
	v7.mot = &(p->motors[5]);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a3c      	ldr	r2, [pc, #240]	; (800a52c <initVCaptors+0x344>)
 800a43c:	189a      	adds	r2, r3, r2
 800a43e:	4b39      	ldr	r3, [pc, #228]	; (800a524 <initVCaptors+0x33c>)
 800a440:	21aa      	movs	r1, #170	; 0xaa
 800a442:	0089      	lsls	r1, r1, #2
 800a444:	468c      	mov	ip, r1
 800a446:	44bc      	add	ip, r7
 800a448:	4463      	add	r3, ip
 800a44a:	645a      	str	r2, [r3, #68]	; 0x44
	p->vcs[6] = v7 ;
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	23af      	movs	r3, #175	; 0xaf
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	4934      	ldr	r1, [pc, #208]	; (800a524 <initVCaptors+0x33c>)
 800a454:	20aa      	movs	r0, #170	; 0xaa
 800a456:	0080      	lsls	r0, r0, #2
 800a458:	4684      	mov	ip, r0
 800a45a:	44bc      	add	ip, r7
 800a45c:	4461      	add	r1, ip
 800a45e:	18d3      	adds	r3, r2, r3
 800a460:	2254      	movs	r2, #84	; 0x54
 800a462:	0018      	movs	r0, r3
 800a464:	f002 fe44 	bl	800d0f0 <memcpy>
	standardInitVCaptor(&(p->vcs[6])) ;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	22af      	movs	r2, #175	; 0xaf
 800a46c:	00d2      	lsls	r2, r2, #3
 800a46e:	4694      	mov	ip, r2
 800a470:	4463      	add	r3, ip
 800a472:	0018      	movs	r0, r3
 800a474:	f002 fb93 	bl	800cb9e <standardInitVCaptor>

	VCaptor v8 ;
	v8.id = 0 ;
 800a478:	4b2d      	ldr	r3, [pc, #180]	; (800a530 <initVCaptors+0x348>)
 800a47a:	22aa      	movs	r2, #170	; 0xaa
 800a47c:	0092      	lsls	r2, r2, #2
 800a47e:	4694      	mov	ip, r2
 800a480:	44bc      	add	ip, r7
 800a482:	4463      	add	r3, ip
 800a484:	2200      	movs	r2, #0
 800a486:	701a      	strb	r2, [r3, #0]
	v8.inputPinF =GPIOF ;
 800a488:	4b29      	ldr	r3, [pc, #164]	; (800a530 <initVCaptors+0x348>)
 800a48a:	22aa      	movs	r2, #170	; 0xaa
 800a48c:	0092      	lsls	r2, r2, #2
 800a48e:	4694      	mov	ip, r2
 800a490:	44bc      	add	ip, r7
 800a492:	4463      	add	r3, ip
 800a494:	4a27      	ldr	r2, [pc, #156]	; (800a534 <initVCaptors+0x34c>)
 800a496:	62da      	str	r2, [r3, #44]	; 0x2c
	v8.inputPinN = GPIO_PIN_0 ;
 800a498:	4b25      	ldr	r3, [pc, #148]	; (800a530 <initVCaptors+0x348>)
 800a49a:	22aa      	movs	r2, #170	; 0xaa
 800a49c:	0092      	lsls	r2, r2, #2
 800a49e:	4694      	mov	ip, r2
 800a4a0:	44bc      	add	ip, r7
 800a4a2:	4463      	add	r3, ip
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	861a      	strh	r2, [r3, #48]	; 0x30
	v8.mot = &(p->motors[4]);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2283      	movs	r2, #131	; 0x83
 800a4ac:	0112      	lsls	r2, r2, #4
 800a4ae:	189a      	adds	r2, r3, r2
 800a4b0:	4b1f      	ldr	r3, [pc, #124]	; (800a530 <initVCaptors+0x348>)
 800a4b2:	21aa      	movs	r1, #170	; 0xaa
 800a4b4:	0089      	lsls	r1, r1, #2
 800a4b6:	468c      	mov	ip, r1
 800a4b8:	44bc      	add	ip, r7
 800a4ba:	4463      	add	r3, ip
 800a4bc:	645a      	str	r2, [r3, #68]	; 0x44
	p->vcs[7] = v8 ;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a1d      	ldr	r2, [pc, #116]	; (800a538 <initVCaptors+0x350>)
 800a4c2:	491b      	ldr	r1, [pc, #108]	; (800a530 <initVCaptors+0x348>)
 800a4c4:	20aa      	movs	r0, #170	; 0xaa
 800a4c6:	0080      	lsls	r0, r0, #2
 800a4c8:	4684      	mov	ip, r0
 800a4ca:	44bc      	add	ip, r7
 800a4cc:	4461      	add	r1, ip
 800a4ce:	189b      	adds	r3, r3, r2
 800a4d0:	2254      	movs	r2, #84	; 0x54
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	f002 fe0c 	bl	800d0f0 <memcpy>
	standardInitVCaptor(&(p->vcs[7])) ;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a17      	ldr	r2, [pc, #92]	; (800a538 <initVCaptors+0x350>)
 800a4dc:	4694      	mov	ip, r2
 800a4de:	4463      	add	r3, ip
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	f002 fb5c 	bl	800cb9e <standardInitVCaptor>
}
 800a4e6:	46c0      	nop			; (mov r8, r8)
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	23aa      	movs	r3, #170	; 0xaa
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	449d      	add	sp, r3
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	46c0      	nop			; (mov r8, r8)
 800a4f4:	fffffd58 	.word	0xfffffd58
 800a4f8:	50000800 	.word	0x50000800
 800a4fc:	000006a4 	.word	0x000006a4
 800a500:	50000400 	.word	0x50000400
 800a504:	fffffeb0 	.word	0xfffffeb0
 800a508:	000007ac 	.word	0x000007ac
 800a50c:	0000047c 	.word	0x0000047c
 800a510:	fffffe5c 	.word	0xfffffe5c
 800a514:	000009bc 	.word	0x000009bc
 800a518:	fffffe08 	.word	0xfffffe08
 800a51c:	00000938 	.word	0x00000938
 800a520:	00000524 	.word	0x00000524
 800a524:	fffffdb4 	.word	0xfffffdb4
 800a528:	ffff8000 	.word	0xffff8000
 800a52c:	000008b4 	.word	0x000008b4
 800a530:	fffffd60 	.word	0xfffffd60
 800a534:	50001400 	.word	0x50001400
 800a538:	000005cc 	.word	0x000005cc

0800a53c <initUARTS>:

void initUARTS(params* p){
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
	p->huarts[0] = huart1 ;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a0e      	ldr	r2, [pc, #56]	; (800a580 <initUARTS+0x44>)
 800a548:	490e      	ldr	r1, [pc, #56]	; (800a584 <initUARTS+0x48>)
 800a54a:	189b      	adds	r3, r3, r2
 800a54c:	228c      	movs	r2, #140	; 0x8c
 800a54e:	0018      	movs	r0, r3
 800a550:	f002 fdce 	bl	800d0f0 <memcpy>
	p->huarts[1] = huart2 ;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a0c      	ldr	r2, [pc, #48]	; (800a588 <initUARTS+0x4c>)
 800a558:	490c      	ldr	r1, [pc, #48]	; (800a58c <initUARTS+0x50>)
 800a55a:	189b      	adds	r3, r3, r2
 800a55c:	228c      	movs	r2, #140	; 0x8c
 800a55e:	0018      	movs	r0, r3
 800a560:	f002 fdc6 	bl	800d0f0 <memcpy>
	p->huarts[2] = huart3 ;
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	23b8      	movs	r3, #184	; 0xb8
 800a568:	011b      	lsls	r3, r3, #4
 800a56a:	4909      	ldr	r1, [pc, #36]	; (800a590 <initUARTS+0x54>)
 800a56c:	18d3      	adds	r3, r2, r3
 800a56e:	228c      	movs	r2, #140	; 0x8c
 800a570:	0018      	movs	r0, r3
 800a572:	f002 fdbd 	bl	800d0f0 <memcpy>
}
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	46bd      	mov	sp, r7
 800a57a:	b002      	add	sp, #8
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	46c0      	nop			; (mov r8, r8)
 800a580:	00000a68 	.word	0x00000a68
 800a584:	20000dcc 	.word	0x20000dcc
 800a588:	00000af4 	.word	0x00000af4
 800a58c:	20000f38 	.word	0x20000f38
 800a590:	20000c54 	.word	0x20000c54

0800a594 <getUs>:


//_______________________________________________________________TIME MEASUREMENT_________________________________________________

uint32_t getUs(void) {
 800a594:	b5b0      	push	{r4, r5, r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 800a59a:	f7f9 fb79 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 800a59e:	0003      	movs	r3, r0
 800a5a0:	4914      	ldr	r1, [pc, #80]	; (800a5f4 <getUs+0x60>)
 800a5a2:	0018      	movs	r0, r3
 800a5a4:	f7f5 fdac 	bl	8000100 <__udivsi3>
 800a5a8:	0003      	movs	r3, r0
 800a5aa:	607b      	str	r3, [r7, #4]
register uint32_t ms, cycle_cnt;
do {
ms = HAL_GetTick();
 800a5ac:	f7f6 ff1a 	bl	80013e4 <HAL_GetTick>
 800a5b0:	0004      	movs	r4, r0
cycle_cnt = SysTick->VAL;
 800a5b2:	4b11      	ldr	r3, [pc, #68]	; (800a5f8 <getUs+0x64>)
 800a5b4:	689d      	ldr	r5, [r3, #8]
} while (ms != HAL_GetTick());
 800a5b6:	f7f6 ff15 	bl	80013e4 <HAL_GetTick>
 800a5ba:	0003      	movs	r3, r0
 800a5bc:	429c      	cmp	r4, r3
 800a5be:	d1f5      	bne.n	800a5ac <getUs+0x18>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 800a5c0:	0023      	movs	r3, r4
 800a5c2:	015b      	lsls	r3, r3, #5
 800a5c4:	1b1b      	subs	r3, r3, r4
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	191b      	adds	r3, r3, r4
 800a5ca:	00db      	lsls	r3, r3, #3
 800a5cc:	001c      	movs	r4, r3
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	0013      	movs	r3, r2
 800a5d2:	015b      	lsls	r3, r3, #5
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	189b      	adds	r3, r3, r2
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	1b5b      	subs	r3, r3, r5
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	f7f5 fd8d 	bl	8000100 <__udivsi3>
 800a5e6:	0003      	movs	r3, r0
 800a5e8:	18e3      	adds	r3, r4, r3
}
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	b002      	add	sp, #8
 800a5f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a5f2:	46c0      	nop			; (mov r8, r8)
 800a5f4:	000f4240 	.word	0x000f4240
 800a5f8:	e000e010 	.word	0xe000e010

0800a5fc <demoRun>:
}

//_______________________________________DEMORUN_____________________________________________________

void demoRun(uint32_t time_us)
{
 800a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5fe:	b09b      	sub	sp, #108	; 0x6c
 800a600:	af02      	add	r7, sp, #8
 800a602:	6078      	str	r0, [r7, #4]
	if(demoStep == 1)
 800a604:	4bdc      	ldr	r3, [pc, #880]	; (800a978 <demoRun+0x37c>)
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d110      	bne.n	800a62e <demoRun+0x32>
	{
		uint8_t power = 70 ;
 800a60c:	2147      	movs	r1, #71	; 0x47
 800a60e:	187b      	adds	r3, r7, r1
 800a610:	2246      	movs	r2, #70	; 0x46
 800a612:	701a      	strb	r2, [r3, #0]
		uint8_t sense = SENSE_UP ;
 800a614:	2046      	movs	r0, #70	; 0x46
 800a616:	183b      	adds	r3, r7, r0
 800a618:	2201      	movs	r2, #1
 800a61a:	701a      	strb	r2, [r3, #0]
		MR_startBlindMotion(&(gps.gss[0]), &power, &sense, 2000000) ;
 800a61c:	4bd7      	ldr	r3, [pc, #860]	; (800a97c <demoRun+0x380>)
 800a61e:	183a      	adds	r2, r7, r0
 800a620:	1879      	adds	r1, r7, r1
 800a622:	48d7      	ldr	r0, [pc, #860]	; (800a980 <demoRun+0x384>)
 800a624:	f001 fd64 	bl	800c0f0 <MR_startBlindMotion>
		demoStep = 2 ;
 800a628:	4bd3      	ldr	r3, [pc, #844]	; (800a978 <demoRun+0x37c>)
 800a62a:	2202      	movs	r2, #2
 800a62c:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 2 && gps.gss[0].MR_mode == MR_MODE_IDLE)
 800a62e:	4bd2      	ldr	r3, [pc, #840]	; (800a978 <demoRun+0x37c>)
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d115      	bne.n	800a662 <demoRun+0x66>
 800a636:	4bd2      	ldr	r3, [pc, #840]	; (800a980 <demoRun+0x384>)
 800a638:	2265      	movs	r2, #101	; 0x65
 800a63a:	5c9b      	ldrb	r3, [r3, r2]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d110      	bne.n	800a662 <demoRun+0x66>
	{
		uint8_t power = 70 ;
 800a640:	2145      	movs	r1, #69	; 0x45
 800a642:	187b      	adds	r3, r7, r1
 800a644:	2246      	movs	r2, #70	; 0x46
 800a646:	701a      	strb	r2, [r3, #0]
		uint8_t sense = SENSE_DOWN ;
 800a648:	2044      	movs	r0, #68	; 0x44
 800a64a:	183b      	adds	r3, r7, r0
 800a64c:	2200      	movs	r2, #0
 800a64e:	701a      	strb	r2, [r3, #0]
		MR_startBlindMotion(&(gps.gss[0]), &power, &sense, 2000000) ;
 800a650:	4bca      	ldr	r3, [pc, #808]	; (800a97c <demoRun+0x380>)
 800a652:	183a      	adds	r2, r7, r0
 800a654:	1879      	adds	r1, r7, r1
 800a656:	48ca      	ldr	r0, [pc, #808]	; (800a980 <demoRun+0x384>)
 800a658:	f001 fd4a 	bl	800c0f0 <MR_startBlindMotion>
		demoStep = 3 ;
 800a65c:	4bc6      	ldr	r3, [pc, #792]	; (800a978 <demoRun+0x37c>)
 800a65e:	2203      	movs	r2, #3
 800a660:	701a      	strb	r2, [r3, #0]
	}


	if(demoStep == 3 && gps.gss[0].MR_mode == MR_MODE_IDLE)
 800a662:	4bc5      	ldr	r3, [pc, #788]	; (800a978 <demoRun+0x37c>)
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b03      	cmp	r3, #3
 800a668:	d115      	bne.n	800a696 <demoRun+0x9a>
 800a66a:	4bc5      	ldr	r3, [pc, #788]	; (800a980 <demoRun+0x384>)
 800a66c:	2265      	movs	r2, #101	; 0x65
 800a66e:	5c9b      	ldrb	r3, [r3, r2]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d110      	bne.n	800a696 <demoRun+0x9a>
	{
		uint8_t power = 70 ;
 800a674:	2143      	movs	r1, #67	; 0x43
 800a676:	187b      	adds	r3, r7, r1
 800a678:	2246      	movs	r2, #70	; 0x46
 800a67a:	701a      	strb	r2, [r3, #0]
		uint8_t sense = SENSE_UP ;
 800a67c:	2042      	movs	r0, #66	; 0x42
 800a67e:	183b      	adds	r3, r7, r0
 800a680:	2201      	movs	r2, #1
 800a682:	701a      	strb	r2, [r3, #0]
		MR_startBlindMotion(&(gps.gss[1]), &power, &sense, 2000000) ;
 800a684:	4bbd      	ldr	r3, [pc, #756]	; (800a97c <demoRun+0x380>)
 800a686:	183a      	adds	r2, r7, r0
 800a688:	1879      	adds	r1, r7, r1
 800a68a:	48be      	ldr	r0, [pc, #760]	; (800a984 <demoRun+0x388>)
 800a68c:	f001 fd30 	bl	800c0f0 <MR_startBlindMotion>
		demoStep = 4 ;
 800a690:	4bb9      	ldr	r3, [pc, #740]	; (800a978 <demoRun+0x37c>)
 800a692:	2204      	movs	r2, #4
 800a694:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 4 && gps.gss[1].MR_mode == MR_MODE_IDLE)
 800a696:	4bb8      	ldr	r3, [pc, #736]	; (800a978 <demoRun+0x37c>)
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d115      	bne.n	800a6ca <demoRun+0xce>
 800a69e:	4bb8      	ldr	r3, [pc, #736]	; (800a980 <demoRun+0x384>)
 800a6a0:	22d5      	movs	r2, #213	; 0xd5
 800a6a2:	5c9b      	ldrb	r3, [r3, r2]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d110      	bne.n	800a6ca <demoRun+0xce>
	{
		uint8_t power = 70 ;
 800a6a8:	2141      	movs	r1, #65	; 0x41
 800a6aa:	187b      	adds	r3, r7, r1
 800a6ac:	2246      	movs	r2, #70	; 0x46
 800a6ae:	701a      	strb	r2, [r3, #0]
		uint8_t sense = SENSE_DOWN ;
 800a6b0:	2040      	movs	r0, #64	; 0x40
 800a6b2:	183b      	adds	r3, r7, r0
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	701a      	strb	r2, [r3, #0]
		MR_startBlindMotion(&(gps.gss[1]), &power, &sense, 2000000) ;
 800a6b8:	4bb0      	ldr	r3, [pc, #704]	; (800a97c <demoRun+0x380>)
 800a6ba:	183a      	adds	r2, r7, r0
 800a6bc:	1879      	adds	r1, r7, r1
 800a6be:	48b1      	ldr	r0, [pc, #708]	; (800a984 <demoRun+0x388>)
 800a6c0:	f001 fd16 	bl	800c0f0 <MR_startBlindMotion>
		demoStep = 5 ;
 800a6c4:	4bac      	ldr	r3, [pc, #688]	; (800a978 <demoRun+0x37c>)
 800a6c6:	2205      	movs	r2, #5
 800a6c8:	701a      	strb	r2, [r3, #0]
	}

	if(demoStep == 5 && gps.gss[1].MR_mode == MR_MODE_IDLE)
 800a6ca:	4bab      	ldr	r3, [pc, #684]	; (800a978 <demoRun+0x37c>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	d115      	bne.n	800a6fe <demoRun+0x102>
 800a6d2:	4bab      	ldr	r3, [pc, #684]	; (800a980 <demoRun+0x384>)
 800a6d4:	22d5      	movs	r2, #213	; 0xd5
 800a6d6:	5c9b      	ldrb	r3, [r3, r2]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d110      	bne.n	800a6fe <demoRun+0x102>
		{
			uint8_t power = 70 ;
 800a6dc:	213f      	movs	r1, #63	; 0x3f
 800a6de:	187b      	adds	r3, r7, r1
 800a6e0:	2246      	movs	r2, #70	; 0x46
 800a6e2:	701a      	strb	r2, [r3, #0]
			uint8_t sense = SENSE_UP ;
 800a6e4:	203e      	movs	r0, #62	; 0x3e
 800a6e6:	183b      	adds	r3, r7, r0
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	701a      	strb	r2, [r3, #0]
			MR_startBlindMotion(&(gps.gss[2]), &power, &sense, 2000000) ;
 800a6ec:	4ba3      	ldr	r3, [pc, #652]	; (800a97c <demoRun+0x380>)
 800a6ee:	183a      	adds	r2, r7, r0
 800a6f0:	1879      	adds	r1, r7, r1
 800a6f2:	48a5      	ldr	r0, [pc, #660]	; (800a988 <demoRun+0x38c>)
 800a6f4:	f001 fcfc 	bl	800c0f0 <MR_startBlindMotion>
			demoStep = 6 ;
 800a6f8:	4b9f      	ldr	r3, [pc, #636]	; (800a978 <demoRun+0x37c>)
 800a6fa:	2206      	movs	r2, #6
 800a6fc:	701a      	strb	r2, [r3, #0]
		}
	if(demoStep == 6 && gps.gss[2].MR_mode == MR_MODE_IDLE)
 800a6fe:	4b9e      	ldr	r3, [pc, #632]	; (800a978 <demoRun+0x37c>)
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	2b06      	cmp	r3, #6
 800a704:	d116      	bne.n	800a734 <demoRun+0x138>
 800a706:	4a9e      	ldr	r2, [pc, #632]	; (800a980 <demoRun+0x384>)
 800a708:	2346      	movs	r3, #70	; 0x46
 800a70a:	33ff      	adds	r3, #255	; 0xff
 800a70c:	5cd3      	ldrb	r3, [r2, r3]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d110      	bne.n	800a734 <demoRun+0x138>
		{
			uint8_t power = 70 ;
 800a712:	213d      	movs	r1, #61	; 0x3d
 800a714:	187b      	adds	r3, r7, r1
 800a716:	2246      	movs	r2, #70	; 0x46
 800a718:	701a      	strb	r2, [r3, #0]
			uint8_t sense = SENSE_DOWN ;
 800a71a:	203c      	movs	r0, #60	; 0x3c
 800a71c:	183b      	adds	r3, r7, r0
 800a71e:	2200      	movs	r2, #0
 800a720:	701a      	strb	r2, [r3, #0]
			MR_startBlindMotion(&(gps.gss[2]), &power, &sense, 2000000) ;
 800a722:	4b96      	ldr	r3, [pc, #600]	; (800a97c <demoRun+0x380>)
 800a724:	183a      	adds	r2, r7, r0
 800a726:	1879      	adds	r1, r7, r1
 800a728:	4897      	ldr	r0, [pc, #604]	; (800a988 <demoRun+0x38c>)
 800a72a:	f001 fce1 	bl	800c0f0 <MR_startBlindMotion>
			demoStep = 7 ;
 800a72e:	4b92      	ldr	r3, [pc, #584]	; (800a978 <demoRun+0x37c>)
 800a730:	2207      	movs	r2, #7
 800a732:	701a      	strb	r2, [r3, #0]
		}

	if(demoStep == 7 && gps.gss[2].MR_mode == MR_MODE_IDLE)
 800a734:	4b90      	ldr	r3, [pc, #576]	; (800a978 <demoRun+0x37c>)
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	2b07      	cmp	r3, #7
 800a73a:	d116      	bne.n	800a76a <demoRun+0x16e>
 800a73c:	4a90      	ldr	r2, [pc, #576]	; (800a980 <demoRun+0x384>)
 800a73e:	2346      	movs	r3, #70	; 0x46
 800a740:	33ff      	adds	r3, #255	; 0xff
 800a742:	5cd3      	ldrb	r3, [r2, r3]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d110      	bne.n	800a76a <demoRun+0x16e>
			{
				uint8_t power = 70 ;
 800a748:	213b      	movs	r1, #59	; 0x3b
 800a74a:	187b      	adds	r3, r7, r1
 800a74c:	2246      	movs	r2, #70	; 0x46
 800a74e:	701a      	strb	r2, [r3, #0]
				uint8_t sense = SENSE_UP ;
 800a750:	203a      	movs	r0, #58	; 0x3a
 800a752:	183b      	adds	r3, r7, r0
 800a754:	2201      	movs	r2, #1
 800a756:	701a      	strb	r2, [r3, #0]
				MR_startBlindMotion(&(gps.gss[3]), &power, &sense, 2000000) ;
 800a758:	4b88      	ldr	r3, [pc, #544]	; (800a97c <demoRun+0x380>)
 800a75a:	183a      	adds	r2, r7, r0
 800a75c:	1879      	adds	r1, r7, r1
 800a75e:	488b      	ldr	r0, [pc, #556]	; (800a98c <demoRun+0x390>)
 800a760:	f001 fcc6 	bl	800c0f0 <MR_startBlindMotion>
				demoStep = 8 ;
 800a764:	4b84      	ldr	r3, [pc, #528]	; (800a978 <demoRun+0x37c>)
 800a766:	2208      	movs	r2, #8
 800a768:	701a      	strb	r2, [r3, #0]
			}
	if(demoStep == 8 && gps.gss[3].MR_mode == MR_MODE_IDLE)
 800a76a:	4b83      	ldr	r3, [pc, #524]	; (800a978 <demoRun+0x37c>)
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b08      	cmp	r3, #8
 800a770:	d116      	bne.n	800a7a0 <demoRun+0x1a4>
 800a772:	4a83      	ldr	r2, [pc, #524]	; (800a980 <demoRun+0x384>)
 800a774:	23b6      	movs	r3, #182	; 0xb6
 800a776:	33ff      	adds	r3, #255	; 0xff
 800a778:	5cd3      	ldrb	r3, [r2, r3]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d110      	bne.n	800a7a0 <demoRun+0x1a4>
			{
				uint8_t power = 70 ;
 800a77e:	2139      	movs	r1, #57	; 0x39
 800a780:	187b      	adds	r3, r7, r1
 800a782:	2246      	movs	r2, #70	; 0x46
 800a784:	701a      	strb	r2, [r3, #0]
				uint8_t sense = SENSE_DOWN ;
 800a786:	2038      	movs	r0, #56	; 0x38
 800a788:	183b      	adds	r3, r7, r0
 800a78a:	2200      	movs	r2, #0
 800a78c:	701a      	strb	r2, [r3, #0]
				MR_startBlindMotion(&(gps.gss[3]), &power, &sense, 2000000) ;
 800a78e:	4b7b      	ldr	r3, [pc, #492]	; (800a97c <demoRun+0x380>)
 800a790:	183a      	adds	r2, r7, r0
 800a792:	1879      	adds	r1, r7, r1
 800a794:	487d      	ldr	r0, [pc, #500]	; (800a98c <demoRun+0x390>)
 800a796:	f001 fcab 	bl	800c0f0 <MR_startBlindMotion>
				demoStep = 9 ;
 800a79a:	4b77      	ldr	r3, [pc, #476]	; (800a978 <demoRun+0x37c>)
 800a79c:	2209      	movs	r2, #9
 800a79e:	701a      	strb	r2, [r3, #0]
			}

	if(demoStep == 9 && gps.gss[3].MR_mode == MR_MODE_IDLE)
 800a7a0:	4b75      	ldr	r3, [pc, #468]	; (800a978 <demoRun+0x37c>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b09      	cmp	r3, #9
 800a7a6:	d116      	bne.n	800a7d6 <demoRun+0x1da>
 800a7a8:	4a75      	ldr	r2, [pc, #468]	; (800a980 <demoRun+0x384>)
 800a7aa:	23b6      	movs	r3, #182	; 0xb6
 800a7ac:	33ff      	adds	r3, #255	; 0xff
 800a7ae:	5cd3      	ldrb	r3, [r2, r3]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d110      	bne.n	800a7d6 <demoRun+0x1da>
			{
				uint8_t power = 70 ;
 800a7b4:	2137      	movs	r1, #55	; 0x37
 800a7b6:	187b      	adds	r3, r7, r1
 800a7b8:	2246      	movs	r2, #70	; 0x46
 800a7ba:	701a      	strb	r2, [r3, #0]
				uint8_t sense = SENSE_UP ;
 800a7bc:	2036      	movs	r0, #54	; 0x36
 800a7be:	183b      	adds	r3, r7, r0
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	701a      	strb	r2, [r3, #0]
				MR_startBlindMotion(&(gps.gss[4]), &power, &sense, 5000000) ;
 800a7c4:	4b72      	ldr	r3, [pc, #456]	; (800a990 <demoRun+0x394>)
 800a7c6:	183a      	adds	r2, r7, r0
 800a7c8:	1879      	adds	r1, r7, r1
 800a7ca:	4872      	ldr	r0, [pc, #456]	; (800a994 <demoRun+0x398>)
 800a7cc:	f001 fc90 	bl	800c0f0 <MR_startBlindMotion>
				demoStep = 10 ;
 800a7d0:	4b69      	ldr	r3, [pc, #420]	; (800a978 <demoRun+0x37c>)
 800a7d2:	220a      	movs	r2, #10
 800a7d4:	701a      	strb	r2, [r3, #0]
			}
	if(demoStep == 10 && gps.gss[4].MR_mode == MR_MODE_IDLE)
 800a7d6:	4b68      	ldr	r3, [pc, #416]	; (800a978 <demoRun+0x37c>)
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b0a      	cmp	r3, #10
 800a7dc:	d115      	bne.n	800a80a <demoRun+0x20e>
 800a7de:	4b68      	ldr	r3, [pc, #416]	; (800a980 <demoRun+0x384>)
 800a7e0:	4a6d      	ldr	r2, [pc, #436]	; (800a998 <demoRun+0x39c>)
 800a7e2:	5c9b      	ldrb	r3, [r3, r2]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d110      	bne.n	800a80a <demoRun+0x20e>
			{
				uint8_t power = 70 ;
 800a7e8:	2135      	movs	r1, #53	; 0x35
 800a7ea:	187b      	adds	r3, r7, r1
 800a7ec:	2246      	movs	r2, #70	; 0x46
 800a7ee:	701a      	strb	r2, [r3, #0]
				uint8_t sense = SENSE_DOWN ;
 800a7f0:	2034      	movs	r0, #52	; 0x34
 800a7f2:	183b      	adds	r3, r7, r0
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	701a      	strb	r2, [r3, #0]
				MR_startBlindMotion(&(gps.gss[4]), &power, &sense, 5000000) ;
 800a7f8:	4b65      	ldr	r3, [pc, #404]	; (800a990 <demoRun+0x394>)
 800a7fa:	183a      	adds	r2, r7, r0
 800a7fc:	1879      	adds	r1, r7, r1
 800a7fe:	4865      	ldr	r0, [pc, #404]	; (800a994 <demoRun+0x398>)
 800a800:	f001 fc76 	bl	800c0f0 <MR_startBlindMotion>
				demoStep = 11 ;
 800a804:	4b5c      	ldr	r3, [pc, #368]	; (800a978 <demoRun+0x37c>)
 800a806:	220b      	movs	r2, #11
 800a808:	701a      	strb	r2, [r3, #0]
			}

	if(demoStep == 11 && gps.gss[4].MR_mode == MR_MODE_IDLE)
 800a80a:	4b5b      	ldr	r3, [pc, #364]	; (800a978 <demoRun+0x37c>)
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b0b      	cmp	r3, #11
 800a810:	d115      	bne.n	800a83e <demoRun+0x242>
 800a812:	4b5b      	ldr	r3, [pc, #364]	; (800a980 <demoRun+0x384>)
 800a814:	4a60      	ldr	r2, [pc, #384]	; (800a998 <demoRun+0x39c>)
 800a816:	5c9b      	ldrb	r3, [r3, r2]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d110      	bne.n	800a83e <demoRun+0x242>
			{
				uint8_t power = 70 ;
 800a81c:	2133      	movs	r1, #51	; 0x33
 800a81e:	187b      	adds	r3, r7, r1
 800a820:	2246      	movs	r2, #70	; 0x46
 800a822:	701a      	strb	r2, [r3, #0]
				uint8_t sense = SENSE_UP ;
 800a824:	2032      	movs	r0, #50	; 0x32
 800a826:	183b      	adds	r3, r7, r0
 800a828:	2201      	movs	r2, #1
 800a82a:	701a      	strb	r2, [r3, #0]
				MR_startBlindMotion(&(gps.gss[5]), &power, &sense, 5000000) ;
 800a82c:	4b58      	ldr	r3, [pc, #352]	; (800a990 <demoRun+0x394>)
 800a82e:	183a      	adds	r2, r7, r0
 800a830:	1879      	adds	r1, r7, r1
 800a832:	485a      	ldr	r0, [pc, #360]	; (800a99c <demoRun+0x3a0>)
 800a834:	f001 fc5c 	bl	800c0f0 <MR_startBlindMotion>
				demoStep = 12 ;
 800a838:	4b4f      	ldr	r3, [pc, #316]	; (800a978 <demoRun+0x37c>)
 800a83a:	220c      	movs	r2, #12
 800a83c:	701a      	strb	r2, [r3, #0]
			}
	if(demoStep == 12 && gps.gss[5].MR_mode == MR_MODE_IDLE)
 800a83e:	4b4e      	ldr	r3, [pc, #312]	; (800a978 <demoRun+0x37c>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	2b0c      	cmp	r3, #12
 800a844:	d115      	bne.n	800a872 <demoRun+0x276>
 800a846:	4b4e      	ldr	r3, [pc, #312]	; (800a980 <demoRun+0x384>)
 800a848:	4a55      	ldr	r2, [pc, #340]	; (800a9a0 <demoRun+0x3a4>)
 800a84a:	5c9b      	ldrb	r3, [r3, r2]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d110      	bne.n	800a872 <demoRun+0x276>
			{
				uint8_t power = 70 ;
 800a850:	2131      	movs	r1, #49	; 0x31
 800a852:	187b      	adds	r3, r7, r1
 800a854:	2246      	movs	r2, #70	; 0x46
 800a856:	701a      	strb	r2, [r3, #0]
				uint8_t sense = SENSE_DOWN ;
 800a858:	2030      	movs	r0, #48	; 0x30
 800a85a:	183b      	adds	r3, r7, r0
 800a85c:	2200      	movs	r2, #0
 800a85e:	701a      	strb	r2, [r3, #0]
				MR_startBlindMotion(&(gps.gss[5]), &power, &sense, 5000000) ;
 800a860:	4b4b      	ldr	r3, [pc, #300]	; (800a990 <demoRun+0x394>)
 800a862:	183a      	adds	r2, r7, r0
 800a864:	1879      	adds	r1, r7, r1
 800a866:	484d      	ldr	r0, [pc, #308]	; (800a99c <demoRun+0x3a0>)
 800a868:	f001 fc42 	bl	800c0f0 <MR_startBlindMotion>
				demoStep = 13 ;
 800a86c:	4b42      	ldr	r3, [pc, #264]	; (800a978 <demoRun+0x37c>)
 800a86e:	220d      	movs	r2, #13
 800a870:	701a      	strb	r2, [r3, #0]
			}

	if(demoStep == 13 && gps.gss[5].MR_mode == MR_MODE_IDLE)
 800a872:	4b41      	ldr	r3, [pc, #260]	; (800a978 <demoRun+0x37c>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	2b0d      	cmp	r3, #13
 800a878:	d115      	bne.n	800a8a6 <demoRun+0x2aa>
 800a87a:	4b41      	ldr	r3, [pc, #260]	; (800a980 <demoRun+0x384>)
 800a87c:	4a48      	ldr	r2, [pc, #288]	; (800a9a0 <demoRun+0x3a4>)
 800a87e:	5c9b      	ldrb	r3, [r3, r2]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d110      	bne.n	800a8a6 <demoRun+0x2aa>
			{
				uint8_t power = 70 ;
 800a884:	212f      	movs	r1, #47	; 0x2f
 800a886:	187b      	adds	r3, r7, r1
 800a888:	2246      	movs	r2, #70	; 0x46
 800a88a:	701a      	strb	r2, [r3, #0]
				uint8_t sense = SENSE_UP ;
 800a88c:	202e      	movs	r0, #46	; 0x2e
 800a88e:	183b      	adds	r3, r7, r0
 800a890:	2201      	movs	r2, #1
 800a892:	701a      	strb	r2, [r3, #0]
				MR_startBlindMotion(&(gps.gss[6]), &power, &sense, 5000000) ;
 800a894:	4b3e      	ldr	r3, [pc, #248]	; (800a990 <demoRun+0x394>)
 800a896:	183a      	adds	r2, r7, r0
 800a898:	1879      	adds	r1, r7, r1
 800a89a:	4842      	ldr	r0, [pc, #264]	; (800a9a4 <demoRun+0x3a8>)
 800a89c:	f001 fc28 	bl	800c0f0 <MR_startBlindMotion>
				demoStep = 14 ;
 800a8a0:	4b35      	ldr	r3, [pc, #212]	; (800a978 <demoRun+0x37c>)
 800a8a2:	220e      	movs	r2, #14
 800a8a4:	701a      	strb	r2, [r3, #0]
			}
	if(demoStep == 14 && gps.gss[6].MR_mode == MR_MODE_IDLE)
 800a8a6:	4b34      	ldr	r3, [pc, #208]	; (800a978 <demoRun+0x37c>)
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b0e      	cmp	r3, #14
 800a8ac:	d115      	bne.n	800a8da <demoRun+0x2de>
 800a8ae:	4b34      	ldr	r3, [pc, #208]	; (800a980 <demoRun+0x384>)
 800a8b0:	4a3d      	ldr	r2, [pc, #244]	; (800a9a8 <demoRun+0x3ac>)
 800a8b2:	5c9b      	ldrb	r3, [r3, r2]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d110      	bne.n	800a8da <demoRun+0x2de>
			{
				uint8_t power = 70 ;
 800a8b8:	212d      	movs	r1, #45	; 0x2d
 800a8ba:	187b      	adds	r3, r7, r1
 800a8bc:	2246      	movs	r2, #70	; 0x46
 800a8be:	701a      	strb	r2, [r3, #0]
				uint8_t sense = SENSE_DOWN ;
 800a8c0:	202c      	movs	r0, #44	; 0x2c
 800a8c2:	183b      	adds	r3, r7, r0
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	701a      	strb	r2, [r3, #0]
				MR_startBlindMotion(&(gps.gss[6]), &power, &sense, 5000000) ;
 800a8c8:	4b31      	ldr	r3, [pc, #196]	; (800a990 <demoRun+0x394>)
 800a8ca:	183a      	adds	r2, r7, r0
 800a8cc:	1879      	adds	r1, r7, r1
 800a8ce:	4835      	ldr	r0, [pc, #212]	; (800a9a4 <demoRun+0x3a8>)
 800a8d0:	f001 fc0e 	bl	800c0f0 <MR_startBlindMotion>
				demoStep = 15 ;
 800a8d4:	4b28      	ldr	r3, [pc, #160]	; (800a978 <demoRun+0x37c>)
 800a8d6:	220f      	movs	r2, #15
 800a8d8:	701a      	strb	r2, [r3, #0]
			}

	if(demoStep == 15 && gps.gss[6].MR_mode == MR_MODE_IDLE)
 800a8da:	4b27      	ldr	r3, [pc, #156]	; (800a978 <demoRun+0x37c>)
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2b0f      	cmp	r3, #15
 800a8e0:	d115      	bne.n	800a90e <demoRun+0x312>
 800a8e2:	4b27      	ldr	r3, [pc, #156]	; (800a980 <demoRun+0x384>)
 800a8e4:	4a30      	ldr	r2, [pc, #192]	; (800a9a8 <demoRun+0x3ac>)
 800a8e6:	5c9b      	ldrb	r3, [r3, r2]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d110      	bne.n	800a90e <demoRun+0x312>
			{
				uint8_t power = 70 ;
 800a8ec:	212b      	movs	r1, #43	; 0x2b
 800a8ee:	187b      	adds	r3, r7, r1
 800a8f0:	2246      	movs	r2, #70	; 0x46
 800a8f2:	701a      	strb	r2, [r3, #0]
				uint8_t sense = SENSE_UP ;
 800a8f4:	202a      	movs	r0, #42	; 0x2a
 800a8f6:	183b      	adds	r3, r7, r0
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	701a      	strb	r2, [r3, #0]
				MR_startBlindMotion(&(gps.gss[7]), &power, &sense, 5000000) ;
 800a8fc:	4b24      	ldr	r3, [pc, #144]	; (800a990 <demoRun+0x394>)
 800a8fe:	183a      	adds	r2, r7, r0
 800a900:	1879      	adds	r1, r7, r1
 800a902:	482a      	ldr	r0, [pc, #168]	; (800a9ac <demoRun+0x3b0>)
 800a904:	f001 fbf4 	bl	800c0f0 <MR_startBlindMotion>
				demoStep = 16 ;
 800a908:	4b1b      	ldr	r3, [pc, #108]	; (800a978 <demoRun+0x37c>)
 800a90a:	2210      	movs	r2, #16
 800a90c:	701a      	strb	r2, [r3, #0]
			}
	if(demoStep == 16 && gps.gss[7].MR_mode == MR_MODE_IDLE)
 800a90e:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <demoRun+0x37c>)
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b10      	cmp	r3, #16
 800a914:	d115      	bne.n	800a942 <demoRun+0x346>
 800a916:	4b1a      	ldr	r3, [pc, #104]	; (800a980 <demoRun+0x384>)
 800a918:	4a25      	ldr	r2, [pc, #148]	; (800a9b0 <demoRun+0x3b4>)
 800a91a:	5c9b      	ldrb	r3, [r3, r2]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d110      	bne.n	800a942 <demoRun+0x346>
			{
				uint8_t power = 70 ;
 800a920:	2129      	movs	r1, #41	; 0x29
 800a922:	187b      	adds	r3, r7, r1
 800a924:	2246      	movs	r2, #70	; 0x46
 800a926:	701a      	strb	r2, [r3, #0]
				uint8_t sense = SENSE_DOWN ;
 800a928:	2028      	movs	r0, #40	; 0x28
 800a92a:	183b      	adds	r3, r7, r0
 800a92c:	2200      	movs	r2, #0
 800a92e:	701a      	strb	r2, [r3, #0]
				MR_startBlindMotion(&(gps.gss[7]), &power, &sense, 5000000) ;
 800a930:	4b17      	ldr	r3, [pc, #92]	; (800a990 <demoRun+0x394>)
 800a932:	183a      	adds	r2, r7, r0
 800a934:	1879      	adds	r1, r7, r1
 800a936:	481d      	ldr	r0, [pc, #116]	; (800a9ac <demoRun+0x3b0>)
 800a938:	f001 fbda 	bl	800c0f0 <MR_startBlindMotion>
				demoStep = 17 ;
 800a93c:	4b0e      	ldr	r3, [pc, #56]	; (800a978 <demoRun+0x37c>)
 800a93e:	2211      	movs	r2, #17
 800a940:	701a      	strb	r2, [r3, #0]
			}

	if (demoStep == 80)
 800a942:	4b0d      	ldr	r3, [pc, #52]	; (800a978 <demoRun+0x37c>)
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2b50      	cmp	r3, #80	; 0x50
 800a948:	d10b      	bne.n	800a962 <demoRun+0x366>
	{
		MR_goHori(&(gps.gss[0]),0, SENSE_UP, 7000000, 1) ;
 800a94a:	4a1a      	ldr	r2, [pc, #104]	; (800a9b4 <demoRun+0x3b8>)
 800a94c:	480c      	ldr	r0, [pc, #48]	; (800a980 <demoRun+0x384>)
 800a94e:	2301      	movs	r3, #1
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	0013      	movs	r3, r2
 800a954:	2201      	movs	r2, #1
 800a956:	2100      	movs	r1, #0
 800a958:	f001 fafa 	bl	800bf50 <MR_goHori>
		demoStep = 81 ;
 800a95c:	4b06      	ldr	r3, [pc, #24]	; (800a978 <demoRun+0x37c>)
 800a95e:	2251      	movs	r2, #81	; 0x51
 800a960:	701a      	strb	r2, [r3, #0]
	}
	if (demoStep == 81 && gps.gss[0].MR_mode == MR_MODE_IDLE)
 800a962:	4b05      	ldr	r3, [pc, #20]	; (800a978 <demoRun+0x37c>)
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	2b51      	cmp	r3, #81	; 0x51
 800a968:	d132      	bne.n	800a9d0 <demoRun+0x3d4>
 800a96a:	4b05      	ldr	r3, [pc, #20]	; (800a980 <demoRun+0x384>)
 800a96c:	2265      	movs	r2, #101	; 0x65
 800a96e:	5c9b      	ldrb	r3, [r3, r2]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d12d      	bne.n	800a9d0 <demoRun+0x3d4>
 800a974:	e020      	b.n	800a9b8 <demoRun+0x3bc>
 800a976:	46c0      	nop			; (mov r8, r8)
 800a978:	20000008 	.word	0x20000008
 800a97c:	001e8480 	.word	0x001e8480
 800a980:	20000048 	.word	0x20000048
 800a984:	200000b8 	.word	0x200000b8
 800a988:	20000128 	.word	0x20000128
 800a98c:	20000198 	.word	0x20000198
 800a990:	004c4b40 	.word	0x004c4b40
 800a994:	20000208 	.word	0x20000208
 800a998:	00000225 	.word	0x00000225
 800a99c:	20000278 	.word	0x20000278
 800a9a0:	00000295 	.word	0x00000295
 800a9a4:	200002e8 	.word	0x200002e8
 800a9a8:	00000305 	.word	0x00000305
 800a9ac:	20000358 	.word	0x20000358
 800a9b0:	00000375 	.word	0x00000375
 800a9b4:	006acfc0 	.word	0x006acfc0
	{
		MR_goHori(&(gps.gss[0]),0,SENSE_DOWN, 7000000, 1) ;
 800a9b8:	4ad3      	ldr	r2, [pc, #844]	; (800ad08 <demoRun+0x70c>)
 800a9ba:	48d4      	ldr	r0, [pc, #848]	; (800ad0c <demoRun+0x710>)
 800a9bc:	2301      	movs	r3, #1
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	0013      	movs	r3, r2
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	f001 fac3 	bl	800bf50 <MR_goHori>
		demoStep = 82 ;
 800a9ca:	4bd1      	ldr	r3, [pc, #836]	; (800ad10 <demoRun+0x714>)
 800a9cc:	2252      	movs	r2, #82	; 0x52
 800a9ce:	701a      	strb	r2, [r3, #0]
	}
	if (demoStep == 82 && gps.gss[0].MR_mode == MR_MODE_IDLE)
 800a9d0:	4bcf      	ldr	r3, [pc, #828]	; (800ad10 <demoRun+0x714>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b52      	cmp	r3, #82	; 0x52
 800a9d6:	d110      	bne.n	800a9fa <demoRun+0x3fe>
 800a9d8:	4bcc      	ldr	r3, [pc, #816]	; (800ad0c <demoRun+0x710>)
 800a9da:	2265      	movs	r2, #101	; 0x65
 800a9dc:	5c9b      	ldrb	r3, [r3, r2]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10b      	bne.n	800a9fa <demoRun+0x3fe>
	{
		MR_goHori(&(gps.gss[2]),0,SENSE_UP, 7000000, 0) ;
 800a9e2:	4ac9      	ldr	r2, [pc, #804]	; (800ad08 <demoRun+0x70c>)
 800a9e4:	48cb      	ldr	r0, [pc, #812]	; (800ad14 <demoRun+0x718>)
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	0013      	movs	r3, r2
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	f001 faae 	bl	800bf50 <MR_goHori>
		demoStep = 83 ;
 800a9f4:	4bc6      	ldr	r3, [pc, #792]	; (800ad10 <demoRun+0x714>)
 800a9f6:	2253      	movs	r2, #83	; 0x53
 800a9f8:	701a      	strb	r2, [r3, #0]
	}
	if (demoStep == 83 && gps.gss[2].MR_mode == MR_MODE_IDLE)
 800a9fa:	4bc5      	ldr	r3, [pc, #788]	; (800ad10 <demoRun+0x714>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	2b53      	cmp	r3, #83	; 0x53
 800aa00:	d111      	bne.n	800aa26 <demoRun+0x42a>
 800aa02:	4ac2      	ldr	r2, [pc, #776]	; (800ad0c <demoRun+0x710>)
 800aa04:	2346      	movs	r3, #70	; 0x46
 800aa06:	33ff      	adds	r3, #255	; 0xff
 800aa08:	5cd3      	ldrb	r3, [r2, r3]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10b      	bne.n	800aa26 <demoRun+0x42a>
	{
		MR_goHori(&(gps.gss[2]),0, SENSE_DOWN, 7000000, 0) ;
 800aa0e:	4abe      	ldr	r2, [pc, #760]	; (800ad08 <demoRun+0x70c>)
 800aa10:	48c0      	ldr	r0, [pc, #768]	; (800ad14 <demoRun+0x718>)
 800aa12:	2300      	movs	r3, #0
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	0013      	movs	r3, r2
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	f001 fa98 	bl	800bf50 <MR_goHori>
		demoStep = 100 ;
 800aa20:	4bbb      	ldr	r3, [pc, #748]	; (800ad10 <demoRun+0x714>)
 800aa22:	2264      	movs	r2, #100	; 0x64
 800aa24:	701a      	strb	r2, [r3, #0]
	}

	if(demoStep == 84)
 800aa26:	4bba      	ldr	r3, [pc, #744]	; (800ad10 <demoRun+0x714>)
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	2b54      	cmp	r3, #84	; 0x54
 800aa2c:	d10d      	bne.n	800aa4a <demoRun+0x44e>
	{
		uint8_t tx7[] = {COM_A} ;
 800aa2e:	2124      	movs	r1, #36	; 0x24
 800aa30:	187b      	adds	r3, r7, r1
 800aa32:	2261      	movs	r2, #97	; 0x61
 800aa34:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, tx7, 1, 1000) ;
 800aa36:	23fa      	movs	r3, #250	; 0xfa
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	1879      	adds	r1, r7, r1
 800aa3c:	48b6      	ldr	r0, [pc, #728]	; (800ad18 <demoRun+0x71c>)
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f7fa f956 	bl	8004cf0 <HAL_UART_Transmit>
		demoStep = 100 ;
 800aa44:	4bb2      	ldr	r3, [pc, #712]	; (800ad10 <demoRun+0x714>)
 800aa46:	2264      	movs	r2, #100	; 0x64
 800aa48:	701a      	strb	r2, [r3, #0]
	}

	if(demoStep == 20)
 800aa4a:	4bb1      	ldr	r3, [pc, #708]	; (800ad10 <demoRun+0x714>)
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	2b14      	cmp	r3, #20
 800aa50:	d106      	bne.n	800aa60 <demoRun+0x464>
	{
		HL_StartGetFromDown(&(gps.gss[4])) ;
 800aa52:	4bb2      	ldr	r3, [pc, #712]	; (800ad1c <demoRun+0x720>)
 800aa54:	0018      	movs	r0, r3
 800aa56:	f7fc fe71 	bl	800773c <HL_StartGetFromDown>
		demoStep = 100 ;
 800aa5a:	4bad      	ldr	r3, [pc, #692]	; (800ad10 <demoRun+0x714>)
 800aa5c:	2264      	movs	r2, #100	; 0x64
 800aa5e:	701a      	strb	r2, [r3, #0]
	}

	if(demoStep == 21)
 800aa60:	4bab      	ldr	r3, [pc, #684]	; (800ad10 <demoRun+0x714>)
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b15      	cmp	r3, #21
 800aa66:	d106      	bne.n	800aa76 <demoRun+0x47a>
	{
		HL_StartGetFromUp(&(gps.gss[4])) ;
 800aa68:	4bac      	ldr	r3, [pc, #688]	; (800ad1c <demoRun+0x720>)
 800aa6a:	0018      	movs	r0, r3
 800aa6c:	f7fd f9f6 	bl	8007e5c <HL_StartGetFromUp>
		demoStep = 28 ;
 800aa70:	4ba7      	ldr	r3, [pc, #668]	; (800ad10 <demoRun+0x714>)
 800aa72:	221c      	movs	r2, #28
 800aa74:	701a      	strb	r2, [r3, #0]
	}

	if(demoStep == 22 && gps.gss[2].HL_mode == HL_MODE_IDLE)
 800aa76:	4ba6      	ldr	r3, [pc, #664]	; (800ad10 <demoRun+0x714>)
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	2b16      	cmp	r3, #22
 800aa7c:	d10c      	bne.n	800aa98 <demoRun+0x49c>
 800aa7e:	4aa3      	ldr	r2, [pc, #652]	; (800ad0c <demoRun+0x710>)
 800aa80:	23a3      	movs	r3, #163	; 0xa3
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	5cd3      	ldrb	r3, [r2, r3]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <demoRun+0x49c>
	{
		HL_StartGoUp(&(gps.gss[4])) ;
 800aa8a:	4ba4      	ldr	r3, [pc, #656]	; (800ad1c <demoRun+0x720>)
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	f7fc fcb4 	bl	80073fa <HL_StartGoUp>
		demoStep = 100 ;
 800aa92:	4b9f      	ldr	r3, [pc, #636]	; (800ad10 <demoRun+0x714>)
 800aa94:	2264      	movs	r2, #100	; 0x64
 800aa96:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 23)
 800aa98:	4b9d      	ldr	r3, [pc, #628]	; (800ad10 <demoRun+0x714>)
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b17      	cmp	r3, #23
 800aa9e:	d106      	bne.n	800aaae <demoRun+0x4b2>
	{
		HL_StartGoDown(&(gps.gss[4])) ;
 800aaa0:	4b9e      	ldr	r3, [pc, #632]	; (800ad1c <demoRun+0x720>)
 800aaa2:	0018      	movs	r0, r3
 800aaa4:	f7fc ff30 	bl	8007908 <HL_StartGoDown>
		demoStep = 100 ;
 800aaa8:	4b99      	ldr	r3, [pc, #612]	; (800ad10 <demoRun+0x714>)
 800aaaa:	2264      	movs	r2, #100	; 0x64
 800aaac:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 24)
 800aaae:	4b98      	ldr	r3, [pc, #608]	; (800ad10 <demoRun+0x714>)
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b18      	cmp	r3, #24
 800aab4:	d106      	bne.n	800aac4 <demoRun+0x4c8>
	{
		GS_startResetPosition(&(gps.gss[4])) ;
 800aab6:	4b99      	ldr	r3, [pc, #612]	; (800ad1c <demoRun+0x720>)
 800aab8:	0018      	movs	r0, r3
 800aaba:	f7fc f961 	bl	8006d80 <GS_startResetPosition>
		demoStep = 100 ;
 800aabe:	4b94      	ldr	r3, [pc, #592]	; (800ad10 <demoRun+0x714>)
 800aac0:	2264      	movs	r2, #100	; 0x64
 800aac2:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 95)
 800aac4:	4b92      	ldr	r3, [pc, #584]	; (800ad10 <demoRun+0x714>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	2b5f      	cmp	r3, #95	; 0x5f
 800aaca:	d106      	bne.n	800aada <demoRun+0x4de>
	{
		GS_startResetPosition(&(gps.gss[4])) ;
 800aacc:	4b93      	ldr	r3, [pc, #588]	; (800ad1c <demoRun+0x720>)
 800aace:	0018      	movs	r0, r3
 800aad0:	f7fc f956 	bl	8006d80 <GS_startResetPosition>
		demoStep = 100 ;
 800aad4:	4b8e      	ldr	r3, [pc, #568]	; (800ad10 <demoRun+0x714>)
 800aad6:	2264      	movs	r2, #100	; 0x64
 800aad8:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 25 && gps.gss[4].mode == MODE_IDLE)
 800aada:	4b8d      	ldr	r3, [pc, #564]	; (800ad10 <demoRun+0x714>)
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b19      	cmp	r3, #25
 800aae0:	d108      	bne.n	800aaf4 <demoRun+0x4f8>
 800aae2:	4a8a      	ldr	r2, [pc, #552]	; (800ad0c <demoRun+0x710>)
 800aae4:	2389      	movs	r3, #137	; 0x89
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	5cd3      	ldrb	r3, [r2, r3]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d102      	bne.n	800aaf4 <demoRun+0x4f8>
	{
		demoStep = 22 ;
 800aaee:	4b88      	ldr	r3, [pc, #544]	; (800ad10 <demoRun+0x714>)
 800aaf0:	2216      	movs	r2, #22
 800aaf2:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 26)
 800aaf4:	4b86      	ldr	r3, [pc, #536]	; (800ad10 <demoRun+0x714>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b1a      	cmp	r3, #26
 800aafa:	d106      	bne.n	800ab0a <demoRun+0x50e>
	{
		GS_startResetPosition(&(gps.gss[4])) ;
 800aafc:	4b87      	ldr	r3, [pc, #540]	; (800ad1c <demoRun+0x720>)
 800aafe:	0018      	movs	r0, r3
 800ab00:	f7fc f93e 	bl	8006d80 <GS_startResetPosition>
		demoStep = 22 ;
 800ab04:	4b82      	ldr	r3, [pc, #520]	; (800ad10 <demoRun+0x714>)
 800ab06:	2216      	movs	r2, #22
 800ab08:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 27)
 800ab0a:	4b81      	ldr	r3, [pc, #516]	; (800ad10 <demoRun+0x714>)
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b1b      	cmp	r3, #27
 800ab10:	d106      	bne.n	800ab20 <demoRun+0x524>
	{
		HL_StartGetFromLeft(&(gps.gss[2])) ;
 800ab12:	4b80      	ldr	r3, [pc, #512]	; (800ad14 <demoRun+0x718>)
 800ab14:	0018      	movs	r0, r3
 800ab16:	f7fd fb63 	bl	80081e0 <HL_StartGetFromLeft>
		demoStep = 100;
 800ab1a:	4b7d      	ldr	r3, [pc, #500]	; (800ad10 <demoRun+0x714>)
 800ab1c:	2264      	movs	r2, #100	; 0x64
 800ab1e:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 28 && gps.gss[4].HL_mode == HL_MODE_IDLE && gps.gss[0].HL_mode == HL_MODE_IDLE)
 800ab20:	4b7b      	ldr	r3, [pc, #492]	; (800ad10 <demoRun+0x714>)
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	2b1c      	cmp	r3, #28
 800ab26:	d110      	bne.n	800ab4a <demoRun+0x54e>
 800ab28:	4b78      	ldr	r3, [pc, #480]	; (800ad0c <demoRun+0x710>)
 800ab2a:	4a7d      	ldr	r2, [pc, #500]	; (800ad20 <demoRun+0x724>)
 800ab2c:	5c9b      	ldrb	r3, [r3, r2]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10b      	bne.n	800ab4a <demoRun+0x54e>
 800ab32:	4b76      	ldr	r3, [pc, #472]	; (800ad0c <demoRun+0x710>)
 800ab34:	2266      	movs	r2, #102	; 0x66
 800ab36:	5c9b      	ldrb	r3, [r3, r2]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d106      	bne.n	800ab4a <demoRun+0x54e>
	{
		HL_StartGoRight(&(gps.gss[2])) ;
 800ab3c:	4b75      	ldr	r3, [pc, #468]	; (800ad14 <demoRun+0x718>)
 800ab3e:	0018      	movs	r0, r3
 800ab40:	f7fd fa34 	bl	8007fac <HL_StartGoRight>
		demoStep = 78 ;
 800ab44:	4b72      	ldr	r3, [pc, #456]	; (800ad10 <demoRun+0x714>)
 800ab46:	224e      	movs	r2, #78	; 0x4e
 800ab48:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 29)
 800ab4a:	4b71      	ldr	r3, [pc, #452]	; (800ad10 <demoRun+0x714>)
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b1d      	cmp	r3, #29
 800ab50:	d106      	bne.n	800ab60 <demoRun+0x564>
	{
		HL_StartGetFromRight(&(gps.gss[2])) ;
 800ab52:	4b70      	ldr	r3, [pc, #448]	; (800ad14 <demoRun+0x718>)
 800ab54:	0018      	movs	r0, r3
 800ab56:	f7fd fce7 	bl	8008528 <HL_StartGetFromRight>
		demoStep = 100 ;
 800ab5a:	4b6d      	ldr	r3, [pc, #436]	; (800ad10 <demoRun+0x714>)
 800ab5c:	2264      	movs	r2, #100	; 0x64
 800ab5e:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 30 && gps.gss[4].HL_mode == HL_MODE_IDLE && gps.gss[0].HL_mode == HL_MODE_IDLE && gps.gss[2].HL_mode == HL_MODE_IDLE)
 800ab60:	4b6b      	ldr	r3, [pc, #428]	; (800ad10 <demoRun+0x714>)
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b1e      	cmp	r3, #30
 800ab66:	d116      	bne.n	800ab96 <demoRun+0x59a>
 800ab68:	4b68      	ldr	r3, [pc, #416]	; (800ad0c <demoRun+0x710>)
 800ab6a:	4a6d      	ldr	r2, [pc, #436]	; (800ad20 <demoRun+0x724>)
 800ab6c:	5c9b      	ldrb	r3, [r3, r2]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d111      	bne.n	800ab96 <demoRun+0x59a>
 800ab72:	4b66      	ldr	r3, [pc, #408]	; (800ad0c <demoRun+0x710>)
 800ab74:	2266      	movs	r2, #102	; 0x66
 800ab76:	5c9b      	ldrb	r3, [r3, r2]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10c      	bne.n	800ab96 <demoRun+0x59a>
 800ab7c:	4a63      	ldr	r2, [pc, #396]	; (800ad0c <demoRun+0x710>)
 800ab7e:	23a3      	movs	r3, #163	; 0xa3
 800ab80:	005b      	lsls	r3, r3, #1
 800ab82:	5cd3      	ldrb	r3, [r2, r3]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d106      	bne.n	800ab96 <demoRun+0x59a>
	{
		HL_StartGoLeft(&(gps.gss[2])) ;
 800ab88:	4b62      	ldr	r3, [pc, #392]	; (800ad14 <demoRun+0x718>)
 800ab8a:	0018      	movs	r0, r3
 800ab8c:	f7fd fb74 	bl	8008278 <HL_StartGoLeft>
		demoStep = 100 ;
 800ab90:	4b5f      	ldr	r3, [pc, #380]	; (800ad10 <demoRun+0x714>)
 800ab92:	2264      	movs	r2, #100	; 0x64
 800ab94:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 31)
 800ab96:	4b5e      	ldr	r3, [pc, #376]	; (800ad10 <demoRun+0x714>)
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b1f      	cmp	r3, #31
 800ab9c:	d106      	bne.n	800abac <demoRun+0x5b0>
	{
		GS_startResetPosition(&(gps.gss[4])) ;
 800ab9e:	4b5f      	ldr	r3, [pc, #380]	; (800ad1c <demoRun+0x720>)
 800aba0:	0018      	movs	r0, r3
 800aba2:	f7fc f8ed 	bl	8006d80 <GS_startResetPosition>
		demoStep = 32 ;
 800aba6:	4b5a      	ldr	r3, [pc, #360]	; (800ad10 <demoRun+0x714>)
 800aba8:	2220      	movs	r2, #32
 800abaa:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 32 && gps.gss[4].mode == MODE_IDLE)
 800abac:	4b58      	ldr	r3, [pc, #352]	; (800ad10 <demoRun+0x714>)
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b20      	cmp	r3, #32
 800abb2:	d10c      	bne.n	800abce <demoRun+0x5d2>
 800abb4:	4a55      	ldr	r2, [pc, #340]	; (800ad0c <demoRun+0x710>)
 800abb6:	2389      	movs	r3, #137	; 0x89
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	5cd3      	ldrb	r3, [r2, r3]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d106      	bne.n	800abce <demoRun+0x5d2>
	{
		HL_StartGoDown(&(gps.gss[4])) ;
 800abc0:	4b56      	ldr	r3, [pc, #344]	; (800ad1c <demoRun+0x720>)
 800abc2:	0018      	movs	r0, r3
 800abc4:	f7fc fea0 	bl	8007908 <HL_StartGoDown>
		demoStep = 100 ;
 800abc8:	4b51      	ldr	r3, [pc, #324]	; (800ad10 <demoRun+0x714>)
 800abca:	2264      	movs	r2, #100	; 0x64
 800abcc:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 70)
 800abce:	4b50      	ldr	r3, [pc, #320]	; (800ad10 <demoRun+0x714>)
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	2b46      	cmp	r3, #70	; 0x46
 800abd4:	d106      	bne.n	800abe4 <demoRun+0x5e8>
	{
		GS_startResetPosition(&(gps.gss[4])) ;
 800abd6:	4b51      	ldr	r3, [pc, #324]	; (800ad1c <demoRun+0x720>)
 800abd8:	0018      	movs	r0, r3
 800abda:	f7fc f8d1 	bl	8006d80 <GS_startResetPosition>
		demoStep = 71 ;
 800abde:	4b4c      	ldr	r3, [pc, #304]	; (800ad10 <demoRun+0x714>)
 800abe0:	2247      	movs	r2, #71	; 0x47
 800abe2:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 71 && gps.gss[4].mode == MODE_IDLE)
 800abe4:	4b4a      	ldr	r3, [pc, #296]	; (800ad10 <demoRun+0x714>)
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b47      	cmp	r3, #71	; 0x47
 800abea:	d10c      	bne.n	800ac06 <demoRun+0x60a>
 800abec:	4a47      	ldr	r2, [pc, #284]	; (800ad0c <demoRun+0x710>)
 800abee:	2389      	movs	r3, #137	; 0x89
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	5cd3      	ldrb	r3, [r2, r3]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d106      	bne.n	800ac06 <demoRun+0x60a>
	{
		HL_StartGetFromUp(&(gps.gss[4])) ;
 800abf8:	4b48      	ldr	r3, [pc, #288]	; (800ad1c <demoRun+0x720>)
 800abfa:	0018      	movs	r0, r3
 800abfc:	f7fd f92e 	bl	8007e5c <HL_StartGetFromUp>
		demoStep = 28 ;
 800ac00:	4b43      	ldr	r3, [pc, #268]	; (800ad10 <demoRun+0x714>)
 800ac02:	221c      	movs	r2, #28
 800ac04:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 72)
 800ac06:	4b42      	ldr	r3, [pc, #264]	; (800ad10 <demoRun+0x714>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	2b48      	cmp	r3, #72	; 0x48
 800ac0c:	d106      	bne.n	800ac1c <demoRun+0x620>
	{
		HL_StartGoBackward(&(gps.gss[0]));
 800ac0e:	4b3f      	ldr	r3, [pc, #252]	; (800ad0c <demoRun+0x710>)
 800ac10:	0018      	movs	r0, r3
 800ac12:	f7fd fe51 	bl	80088b8 <HL_StartGoBackward>
		demoStep = 100 ;
 800ac16:	4b3e      	ldr	r3, [pc, #248]	; (800ad10 <demoRun+0x714>)
 800ac18:	2264      	movs	r2, #100	; 0x64
 800ac1a:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 73 && gps.gss[4].mode == MODE_IDLE)
 800ac1c:	4b3c      	ldr	r3, [pc, #240]	; (800ad10 <demoRun+0x714>)
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	2b49      	cmp	r3, #73	; 0x49
 800ac22:	d10c      	bne.n	800ac3e <demoRun+0x642>
 800ac24:	4a39      	ldr	r2, [pc, #228]	; (800ad0c <demoRun+0x710>)
 800ac26:	2389      	movs	r3, #137	; 0x89
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	5cd3      	ldrb	r3, [r2, r3]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d106      	bne.n	800ac3e <demoRun+0x642>
	{
		HL_StartGetFromForward(&(gps.gss[0])) ;
 800ac30:	4b36      	ldr	r3, [pc, #216]	; (800ad0c <demoRun+0x710>)
 800ac32:	0018      	movs	r0, r3
 800ac34:	f7fd fef4 	bl	8008a20 <HL_StartGetFromForward>
		demoStep = 100 ;
 800ac38:	4b35      	ldr	r3, [pc, #212]	; (800ad10 <demoRun+0x714>)
 800ac3a:	2264      	movs	r2, #100	; 0x64
 800ac3c:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 74)
 800ac3e:	4b34      	ldr	r3, [pc, #208]	; (800ad10 <demoRun+0x714>)
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b4a      	cmp	r3, #74	; 0x4a
 800ac44:	d106      	bne.n	800ac54 <demoRun+0x658>
	{
		GS_startResetPosition(&(gps.gss[4])) ;
 800ac46:	4b35      	ldr	r3, [pc, #212]	; (800ad1c <demoRun+0x720>)
 800ac48:	0018      	movs	r0, r3
 800ac4a:	f7fc f899 	bl	8006d80 <GS_startResetPosition>
		demoStep = 75 ;
 800ac4e:	4b30      	ldr	r3, [pc, #192]	; (800ad10 <demoRun+0x714>)
 800ac50:	224b      	movs	r2, #75	; 0x4b
 800ac52:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 75 && gps.gss[4].mode == MODE_IDLE)
 800ac54:	4b2e      	ldr	r3, [pc, #184]	; (800ad10 <demoRun+0x714>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	2b4b      	cmp	r3, #75	; 0x4b
 800ac5a:	d123      	bne.n	800aca4 <demoRun+0x6a8>
 800ac5c:	4a2b      	ldr	r2, [pc, #172]	; (800ad0c <demoRun+0x710>)
 800ac5e:	2389      	movs	r3, #137	; 0x89
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	5cd3      	ldrb	r3, [r2, r3]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d11d      	bne.n	800aca4 <demoRun+0x6a8>
	{
		uint8_t ids[] = {2,3} ;
 800ac68:	2120      	movs	r1, #32
 800ac6a:	187b      	adds	r3, r7, r1
 800ac6c:	4a2d      	ldr	r2, [pc, #180]	; (800ad24 <demoRun+0x728>)
 800ac6e:	8812      	ldrh	r2, [r2, #0]
 800ac70:	801a      	strh	r2, [r3, #0]
		addGroup(&gps, GROUP_TYPE_CAPTOR, 6, ids, 2) ;
 800ac72:	187a      	adds	r2, r7, r1
 800ac74:	4825      	ldr	r0, [pc, #148]	; (800ad0c <demoRun+0x710>)
 800ac76:	2302      	movs	r3, #2
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	0013      	movs	r3, r2
 800ac7c:	2206      	movs	r2, #6
 800ac7e:	2101      	movs	r1, #1
 800ac80:	f7fb fe22 	bl	80068c8 <addGroup>
		GS_startTargeting(&(gps.gss[6]), LOW_AVSPEED, gps.gss[6].vcs[0]->target_currTour + 2) ;
 800ac84:	4a21      	ldr	r2, [pc, #132]	; (800ad0c <demoRun+0x710>)
 800ac86:	23a9      	movs	r3, #169	; 0xa9
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	58d3      	ldr	r3, [r2, r3]
 800ac8c:	224a      	movs	r2, #74	; 0x4a
 800ac8e:	5a9b      	ldrh	r3, [r3, r2]
 800ac90:	3302      	adds	r3, #2
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	4924      	ldr	r1, [pc, #144]	; (800ad28 <demoRun+0x72c>)
 800ac96:	4b25      	ldr	r3, [pc, #148]	; (800ad2c <demoRun+0x730>)
 800ac98:	0018      	movs	r0, r3
 800ac9a:	f7fb ffbf 	bl	8006c1c <GS_startTargeting>
		demoStep = 76 ;
 800ac9e:	4b1c      	ldr	r3, [pc, #112]	; (800ad10 <demoRun+0x714>)
 800aca0:	224c      	movs	r2, #76	; 0x4c
 800aca2:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 76 && gps.gss[6].mode == MODE_IDLE)
 800aca4:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <demoRun+0x714>)
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	2b4c      	cmp	r3, #76	; 0x4c
 800acaa:	d10d      	bne.n	800acc8 <demoRun+0x6cc>
 800acac:	4a17      	ldr	r2, [pc, #92]	; (800ad0c <demoRun+0x710>)
 800acae:	23c1      	movs	r3, #193	; 0xc1
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	5cd3      	ldrb	r3, [r2, r3]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d107      	bne.n	800acc8 <demoRun+0x6cc>
	{
		eraseGroup(&gps, 6) ;
 800acb8:	4b14      	ldr	r3, [pc, #80]	; (800ad0c <demoRun+0x710>)
 800acba:	2106      	movs	r1, #6
 800acbc:	0018      	movs	r0, r3
 800acbe:	f7fb fd41 	bl	8006744 <eraseGroup>
		demoStep = 28 ;
 800acc2:	4b13      	ldr	r3, [pc, #76]	; (800ad10 <demoRun+0x714>)
 800acc4:	221c      	movs	r2, #28
 800acc6:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 77 && gps.gss[0].HL_mode == HL_MODE_IDLE)
 800acc8:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <demoRun+0x714>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b4d      	cmp	r3, #77	; 0x4d
 800acce:	d112      	bne.n	800acf6 <demoRun+0x6fa>
 800acd0:	4b0e      	ldr	r3, [pc, #56]	; (800ad0c <demoRun+0x710>)
 800acd2:	2266      	movs	r2, #102	; 0x66
 800acd4:	5c9b      	ldrb	r3, [r3, r2]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10d      	bne.n	800acf6 <demoRun+0x6fa>
	{
		uint8_t tx7[] = {COM_6} ;
 800acda:	211c      	movs	r1, #28
 800acdc:	187b      	adds	r3, r7, r1
 800acde:	2236      	movs	r2, #54	; 0x36
 800ace0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, tx7, 1, 1000) ;
 800ace2:	23fa      	movs	r3, #250	; 0xfa
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	1879      	adds	r1, r7, r1
 800ace8:	480b      	ldr	r0, [pc, #44]	; (800ad18 <demoRun+0x71c>)
 800acea:	2201      	movs	r2, #1
 800acec:	f7fa f800 	bl	8004cf0 <HAL_UART_Transmit>
		demoStep = 100 ;
 800acf0:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <demoRun+0x714>)
 800acf2:	2264      	movs	r2, #100	; 0x64
 800acf4:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 78 && gps.gss[2].HL_mode == HL_MODE_IDLE)
 800acf6:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <demoRun+0x714>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	2b4e      	cmp	r3, #78	; 0x4e
 800acfc:	d128      	bne.n	800ad50 <demoRun+0x754>
 800acfe:	4a03      	ldr	r2, [pc, #12]	; (800ad0c <demoRun+0x710>)
 800ad00:	23a3      	movs	r3, #163	; 0xa3
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	5cd3      	ldrb	r3, [r2, r3]
 800ad06:	e013      	b.n	800ad30 <demoRun+0x734>
 800ad08:	006acfc0 	.word	0x006acfc0
 800ad0c:	20000048 	.word	0x20000048
 800ad10:	20000008 	.word	0x20000008
 800ad14:	20000128 	.word	0x20000128
 800ad18:	20000dcc 	.word	0x20000dcc
 800ad1c:	20000208 	.word	0x20000208
 800ad20:	00000226 	.word	0x00000226
 800ad24:	0800d148 	.word	0x0800d148
 800ad28:	41f00000 	.word	0x41f00000
 800ad2c:	200002e8 	.word	0x200002e8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10d      	bne.n	800ad50 <demoRun+0x754>
	{
		uint8_t tx7[] = {COM_7} ;
 800ad34:	2118      	movs	r1, #24
 800ad36:	187b      	adds	r3, r7, r1
 800ad38:	2237      	movs	r2, #55	; 0x37
 800ad3a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, tx7, 1, 1000) ;
 800ad3c:	23fa      	movs	r3, #250	; 0xfa
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	1879      	adds	r1, r7, r1
 800ad42:	48b3      	ldr	r0, [pc, #716]	; (800b010 <demoRun+0xa14>)
 800ad44:	2201      	movs	r2, #1
 800ad46:	f7f9 ffd3 	bl	8004cf0 <HAL_UART_Transmit>
		demoStep = 100 ;
 800ad4a:	4bb2      	ldr	r3, [pc, #712]	; (800b014 <demoRun+0xa18>)
 800ad4c:	2264      	movs	r2, #100	; 0x64
 800ad4e:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 90)
 800ad50:	4bb0      	ldr	r3, [pc, #704]	; (800b014 <demoRun+0xa18>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b5a      	cmp	r3, #90	; 0x5a
 800ad56:	d106      	bne.n	800ad66 <demoRun+0x76a>
	{
		HL_StartGoForward(&(gps.gss[0])) ;
 800ad58:	4baf      	ldr	r3, [pc, #700]	; (800b018 <demoRun+0xa1c>)
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	f7fd fc30 	bl	80085c0 <HL_StartGoForward>
		demoStep = 94 ;
 800ad60:	4bac      	ldr	r3, [pc, #688]	; (800b014 <demoRun+0xa18>)
 800ad62:	225e      	movs	r2, #94	; 0x5e
 800ad64:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 91)
 800ad66:	4bab      	ldr	r3, [pc, #684]	; (800b014 <demoRun+0xa18>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b5b      	cmp	r3, #91	; 0x5b
 800ad6c:	d106      	bne.n	800ad7c <demoRun+0x780>
	{
		HL_StartGetFromBackward(&(gps.gss[0])) ;
 800ad6e:	4baa      	ldr	r3, [pc, #680]	; (800b018 <demoRun+0xa1c>)
 800ad70:	0018      	movs	r0, r3
 800ad72:	f7fd fcc5 	bl	8008700 <HL_StartGetFromBackward>
		demoStep = 100 ;
 800ad76:	4ba7      	ldr	r3, [pc, #668]	; (800b014 <demoRun+0xa18>)
 800ad78:	2264      	movs	r2, #100	; 0x64
 800ad7a:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 92 && gps.gss[4].mode == MODE_IDLE)
 800ad7c:	4ba5      	ldr	r3, [pc, #660]	; (800b014 <demoRun+0xa18>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	2b5c      	cmp	r3, #92	; 0x5c
 800ad82:	d10c      	bne.n	800ad9e <demoRun+0x7a2>
 800ad84:	4aa4      	ldr	r2, [pc, #656]	; (800b018 <demoRun+0xa1c>)
 800ad86:	2389      	movs	r3, #137	; 0x89
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	5cd3      	ldrb	r3, [r2, r3]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d106      	bne.n	800ad9e <demoRun+0x7a2>
	{
		HL_StartGoLeft(&(gps.gss[2])) ;
 800ad90:	4ba2      	ldr	r3, [pc, #648]	; (800b01c <demoRun+0xa20>)
 800ad92:	0018      	movs	r0, r3
 800ad94:	f7fd fa70 	bl	8008278 <HL_StartGoLeft>
		demoStep = 93 ;
 800ad98:	4b9e      	ldr	r3, [pc, #632]	; (800b014 <demoRun+0xa18>)
 800ad9a:	225d      	movs	r2, #93	; 0x5d
 800ad9c:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 93 && gps.gss[2].HL_mode == HL_MODE_IDLE)
 800ad9e:	4b9d      	ldr	r3, [pc, #628]	; (800b014 <demoRun+0xa18>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	2b5d      	cmp	r3, #93	; 0x5d
 800ada4:	d113      	bne.n	800adce <demoRun+0x7d2>
 800ada6:	4a9c      	ldr	r2, [pc, #624]	; (800b018 <demoRun+0xa1c>)
 800ada8:	23a3      	movs	r3, #163	; 0xa3
 800adaa:	005b      	lsls	r3, r3, #1
 800adac:	5cd3      	ldrb	r3, [r2, r3]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10d      	bne.n	800adce <demoRun+0x7d2>
	{
		uint8_t tx7[] = {COM_9} ;
 800adb2:	2114      	movs	r1, #20
 800adb4:	187b      	adds	r3, r7, r1
 800adb6:	2239      	movs	r2, #57	; 0x39
 800adb8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, tx7, 1, 1000) ;
 800adba:	23fa      	movs	r3, #250	; 0xfa
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	1879      	adds	r1, r7, r1
 800adc0:	4897      	ldr	r0, [pc, #604]	; (800b020 <demoRun+0xa24>)
 800adc2:	2201      	movs	r2, #1
 800adc4:	f7f9 ff94 	bl	8004cf0 <HAL_UART_Transmit>
		demoStep = 100 ;
 800adc8:	4b92      	ldr	r3, [pc, #584]	; (800b014 <demoRun+0xa18>)
 800adca:	2264      	movs	r2, #100	; 0x64
 800adcc:	701a      	strb	r2, [r3, #0]
	}
	if(demoStep == 94 && gps.gss[0].HL_mode == HL_MODE_IDLE)
 800adce:	4b91      	ldr	r3, [pc, #580]	; (800b014 <demoRun+0xa18>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b5e      	cmp	r3, #94	; 0x5e
 800add4:	d112      	bne.n	800adfc <demoRun+0x800>
 800add6:	4b90      	ldr	r3, [pc, #576]	; (800b018 <demoRun+0xa1c>)
 800add8:	2266      	movs	r2, #102	; 0x66
 800adda:	5c9b      	ldrb	r3, [r3, r2]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10d      	bne.n	800adfc <demoRun+0x800>
	{
		uint8_t tx7[] = {COM_10} ;
 800ade0:	2110      	movs	r1, #16
 800ade2:	187b      	adds	r3, r7, r1
 800ade4:	226c      	movs	r2, #108	; 0x6c
 800ade6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, tx7, 1, 1000) ;
 800ade8:	23fa      	movs	r3, #250	; 0xfa
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	1879      	adds	r1, r7, r1
 800adee:	488c      	ldr	r0, [pc, #560]	; (800b020 <demoRun+0xa24>)
 800adf0:	2201      	movs	r2, #1
 800adf2:	f7f9 ff7d 	bl	8004cf0 <HAL_UART_Transmit>
		demoStep = 100 ;
 800adf6:	4b87      	ldr	r3, [pc, #540]	; (800b014 <demoRun+0xa18>)
 800adf8:	2264      	movs	r2, #100	; 0x64
 800adfa:	701a      	strb	r2, [r3, #0]
	}

	if(demoStep == 130)
 800adfc:	4b85      	ldr	r3, [pc, #532]	; (800b014 <demoRun+0xa18>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2b82      	cmp	r3, #130	; 0x82
 800ae02:	d13a      	bne.n	800ae7a <demoRun+0x87e>
	{
		for (int i=0; i<8; i++)
 800ae04:	2300      	movs	r3, #0
 800ae06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae08:	e02e      	b.n	800ae68 <demoRun+0x86c>
		{
			uint8_t idMotor = i ; //Modifiable, id du moteur à tester, a changer de 0 à 7
 800ae0a:	2453      	movs	r4, #83	; 0x53
 800ae0c:	193b      	adds	r3, r7, r4
 800ae0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae10:	701a      	strb	r2, [r3, #0]
			uint8_t sense = 0 ; //Modifiable, sens du moteur, à mettre à 0 ou 1
 800ae12:	2152      	movs	r1, #82	; 0x52
 800ae14:	187b      	adds	r3, r7, r1
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
			uint16_t power = 100 ; //Modifiable, puissance du moteur, va de 0 à 100
 800ae1a:	2550      	movs	r5, #80	; 0x50
 800ae1c:	197b      	adds	r3, r7, r5
 800ae1e:	2264      	movs	r2, #100	; 0x64
 800ae20:	801a      	strh	r2, [r3, #0]

			setMotorTSense(&(gps.motors[idMotor]), sense) ;
 800ae22:	193b      	adds	r3, r7, r4
 800ae24:	781a      	ldrb	r2, [r3, #0]
 800ae26:	0013      	movs	r3, r2
 800ae28:	015b      	lsls	r3, r3, #5
 800ae2a:	189b      	adds	r3, r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	26c4      	movs	r6, #196	; 0xc4
 800ae30:	00f6      	lsls	r6, r6, #3
 800ae32:	199a      	adds	r2, r3, r6
 800ae34:	4b78      	ldr	r3, [pc, #480]	; (800b018 <demoRun+0xa1c>)
 800ae36:	18d2      	adds	r2, r2, r3
 800ae38:	187b      	adds	r3, r7, r1
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	0019      	movs	r1, r3
 800ae3e:	0010      	movs	r0, r2
 800ae40:	f000 faa9 	bl	800b396 <setMotorTSense>
			setMotorTPower(&(gps.motors[idMotor]), power) ;
 800ae44:	193b      	adds	r3, r7, r4
 800ae46:	781a      	ldrb	r2, [r3, #0]
 800ae48:	0013      	movs	r3, r2
 800ae4a:	015b      	lsls	r3, r3, #5
 800ae4c:	189b      	adds	r3, r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	199a      	adds	r2, r3, r6
 800ae52:	4b71      	ldr	r3, [pc, #452]	; (800b018 <demoRun+0xa1c>)
 800ae54:	18d2      	adds	r2, r2, r3
 800ae56:	197b      	adds	r3, r7, r5
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	0019      	movs	r1, r3
 800ae5c:	0010      	movs	r0, r2
 800ae5e:	f000 f9f1 	bl	800b244 <setMotorTPower>
		for (int i=0; i<8; i++)
 800ae62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae64:	3301      	adds	r3, #1
 800ae66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae6a:	2b07      	cmp	r3, #7
 800ae6c:	ddcd      	ble.n	800ae0a <demoRun+0x80e>
		}

		time_start = time_us ;
 800ae6e:	4b6d      	ldr	r3, [pc, #436]	; (800b024 <demoRun+0xa28>)
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	601a      	str	r2, [r3, #0]
		demoStep = 131 ;
 800ae74:	4b67      	ldr	r3, [pc, #412]	; (800b014 <demoRun+0xa18>)
 800ae76:	2283      	movs	r2, #131	; 0x83
 800ae78:	701a      	strb	r2, [r3, #0]
	}

	if(demoStep == 131)
 800ae7a:	4b66      	ldr	r3, [pc, #408]	; (800b014 <demoRun+0xa18>)
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b83      	cmp	r3, #131	; 0x83
 800ae80:	d12b      	bne.n	800aeda <demoRun+0x8de>
	{
		if(time_us - time_start > 4000000)
 800ae82:	4b68      	ldr	r3, [pc, #416]	; (800b024 <demoRun+0xa28>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	4a67      	ldr	r2, [pc, #412]	; (800b028 <demoRun+0xa2c>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d924      	bls.n	800aeda <demoRun+0x8de>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);*/

			for (int i=0; i<8; i++)
 800ae90:	2300      	movs	r3, #0
 800ae92:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae94:	e01b      	b.n	800aece <demoRun+0x8d2>
			{
				uint8_t idMotor = i ; //Modifiable, id du moteur à tester, a changer de 0 à 7
 800ae96:	214f      	movs	r1, #79	; 0x4f
 800ae98:	187b      	adds	r3, r7, r1
 800ae9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae9c:	701a      	strb	r2, [r3, #0]
				uint16_t power = 0 ; //Modifiable, puissance du moteur, va de 0 à 100
 800ae9e:	204c      	movs	r0, #76	; 0x4c
 800aea0:	183b      	adds	r3, r7, r0
 800aea2:	2200      	movs	r2, #0
 800aea4:	801a      	strh	r2, [r3, #0]
				setMotorTPower(&(gps.motors[idMotor]), power) ;
 800aea6:	187b      	adds	r3, r7, r1
 800aea8:	781a      	ldrb	r2, [r3, #0]
 800aeaa:	0013      	movs	r3, r2
 800aeac:	015b      	lsls	r3, r3, #5
 800aeae:	189b      	adds	r3, r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	22c4      	movs	r2, #196	; 0xc4
 800aeb4:	00d2      	lsls	r2, r2, #3
 800aeb6:	189a      	adds	r2, r3, r2
 800aeb8:	4b57      	ldr	r3, [pc, #348]	; (800b018 <demoRun+0xa1c>)
 800aeba:	18d2      	adds	r2, r2, r3
 800aebc:	183b      	adds	r3, r7, r0
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	0019      	movs	r1, r3
 800aec2:	0010      	movs	r0, r2
 800aec4:	f000 f9be 	bl	800b244 <setMotorTPower>
			for (int i=0; i<8; i++)
 800aec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aeca:	3301      	adds	r3, #1
 800aecc:	65bb      	str	r3, [r7, #88]	; 0x58
 800aece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aed0:	2b07      	cmp	r3, #7
 800aed2:	dde0      	ble.n	800ae96 <demoRun+0x89a>
			}

			demoStep = 132 ;
 800aed4:	4b4f      	ldr	r3, [pc, #316]	; (800b014 <demoRun+0xa18>)
 800aed6:	2284      	movs	r2, #132	; 0x84
 800aed8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(demoStep == 132)
 800aeda:	4b4e      	ldr	r3, [pc, #312]	; (800b014 <demoRun+0xa18>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b84      	cmp	r3, #132	; 0x84
 800aee0:	d000      	beq.n	800aee4 <demoRun+0x8e8>
 800aee2:	e07e      	b.n	800afe2 <demoRun+0x9e6>
	{
		if(time_us - time_start > 6000000)
 800aee4:	4b4f      	ldr	r3, [pc, #316]	; (800b024 <demoRun+0xa28>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	4a4f      	ldr	r2, [pc, #316]	; (800b02c <demoRun+0xa30>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d934      	bls.n	800af5c <demoRun+0x960>
		{
			for (int i=0; i<8; i++)
 800aef2:	2300      	movs	r3, #0
 800aef4:	657b      	str	r3, [r7, #84]	; 0x54
 800aef6:	e02e      	b.n	800af56 <demoRun+0x95a>
			{
				uint8_t idMotor = i ; //Modifiable, id du moteur à tester, a changer de 0 à 7
 800aef8:	244b      	movs	r4, #75	; 0x4b
 800aefa:	193b      	adds	r3, r7, r4
 800aefc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aefe:	701a      	strb	r2, [r3, #0]
				uint8_t sense = 1 ; //Modifiable, sens du moteur, à mettre à 0 ou 1
 800af00:	214a      	movs	r1, #74	; 0x4a
 800af02:	187b      	adds	r3, r7, r1
 800af04:	2201      	movs	r2, #1
 800af06:	701a      	strb	r2, [r3, #0]
				uint16_t power = 100 ; //Modifiable, puissance du moteur, va de 0 à 100
 800af08:	2548      	movs	r5, #72	; 0x48
 800af0a:	197b      	adds	r3, r7, r5
 800af0c:	2264      	movs	r2, #100	; 0x64
 800af0e:	801a      	strh	r2, [r3, #0]

				setMotorTSense(&(gps.motors[idMotor]), sense) ;
 800af10:	193b      	adds	r3, r7, r4
 800af12:	781a      	ldrb	r2, [r3, #0]
 800af14:	0013      	movs	r3, r2
 800af16:	015b      	lsls	r3, r3, #5
 800af18:	189b      	adds	r3, r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	26c4      	movs	r6, #196	; 0xc4
 800af1e:	00f6      	lsls	r6, r6, #3
 800af20:	199a      	adds	r2, r3, r6
 800af22:	4b3d      	ldr	r3, [pc, #244]	; (800b018 <demoRun+0xa1c>)
 800af24:	18d2      	adds	r2, r2, r3
 800af26:	187b      	adds	r3, r7, r1
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	0019      	movs	r1, r3
 800af2c:	0010      	movs	r0, r2
 800af2e:	f000 fa32 	bl	800b396 <setMotorTSense>
				setMotorTPower(&(gps.motors[idMotor]), power) ;
 800af32:	193b      	adds	r3, r7, r4
 800af34:	781a      	ldrb	r2, [r3, #0]
 800af36:	0013      	movs	r3, r2
 800af38:	015b      	lsls	r3, r3, #5
 800af3a:	189b      	adds	r3, r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	199a      	adds	r2, r3, r6
 800af40:	4b35      	ldr	r3, [pc, #212]	; (800b018 <demoRun+0xa1c>)
 800af42:	18d2      	adds	r2, r2, r3
 800af44:	197b      	adds	r3, r7, r5
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	0019      	movs	r1, r3
 800af4a:	0010      	movs	r0, r2
 800af4c:	f000 f97a 	bl	800b244 <setMotorTPower>
			for (int i=0; i<8; i++)
 800af50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af52:	3301      	adds	r3, #1
 800af54:	657b      	str	r3, [r7, #84]	; 0x54
 800af56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af58:	2b07      	cmp	r3, #7
 800af5a:	ddcd      	ble.n	800aef8 <demoRun+0x8fc>
				cpt = 0;
				SumAdc = 0;
			}
		}*/

		if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 800af5c:	4a34      	ldr	r2, [pc, #208]	; (800b030 <demoRun+0xa34>)
 800af5e:	4b35      	ldr	r3, [pc, #212]	; (800b034 <demoRun+0xa38>)
 800af60:	0011      	movs	r1, r2
 800af62:	0018      	movs	r0, r3
 800af64:	f7f6 fe40 	bl	8001be8 <HAL_ADC_PollForConversion>
 800af68:	1e03      	subs	r3, r0, #0
 800af6a:	d13a      	bne.n	800afe2 <demoRun+0x9e6>
		{
			channel++;
 800af6c:	4b32      	ldr	r3, [pc, #200]	; (800b038 <demoRun+0xa3c>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	3301      	adds	r3, #1
 800af72:	b2da      	uxtb	r2, r3
 800af74:	4b30      	ldr	r3, [pc, #192]	; (800b038 <demoRun+0xa3c>)
 800af76:	701a      	strb	r2, [r3, #0]

			if(channel == 1)
 800af78:	4b2f      	ldr	r3, [pc, #188]	; (800b038 <demoRun+0xa3c>)
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d129      	bne.n	800afd4 <demoRun+0x9d8>
			{
				gAdcValue = HAL_ADC_GetValue(&hadc1);
 800af80:	4b2c      	ldr	r3, [pc, #176]	; (800b034 <demoRun+0xa38>)
 800af82:	0018      	movs	r0, r3
 800af84:	f7f6 ff4c 	bl	8001e20 <HAL_ADC_GetValue>
 800af88:	0002      	movs	r2, r0
 800af8a:	4b2c      	ldr	r3, [pc, #176]	; (800b03c <demoRun+0xa40>)
 800af8c:	601a      	str	r2, [r3, #0]
				SumAdc += gAdcValue;
 800af8e:	4b2c      	ldr	r3, [pc, #176]	; (800b040 <demoRun+0xa44>)
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	4b2a      	ldr	r3, [pc, #168]	; (800b03c <demoRun+0xa40>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	18d2      	adds	r2, r2, r3
 800af98:	4b29      	ldr	r3, [pc, #164]	; (800b040 <demoRun+0xa44>)
 800af9a:	601a      	str	r2, [r3, #0]
				cpt++;
 800af9c:	4b29      	ldr	r3, [pc, #164]	; (800b044 <demoRun+0xa48>)
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	3301      	adds	r3, #1
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	4b27      	ldr	r3, [pc, #156]	; (800b044 <demoRun+0xa48>)
 800afa6:	701a      	strb	r2, [r3, #0]
				if(cpt==10)
 800afa8:	4b26      	ldr	r3, [pc, #152]	; (800b044 <demoRun+0xa48>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b0a      	cmp	r3, #10
 800afae:	d111      	bne.n	800afd4 <demoRun+0x9d8>
				{
					MoyAdc = SumAdc/cpt;
 800afb0:	4b23      	ldr	r3, [pc, #140]	; (800b040 <demoRun+0xa44>)
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	4b23      	ldr	r3, [pc, #140]	; (800b044 <demoRun+0xa48>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	0019      	movs	r1, r3
 800afba:	0010      	movs	r0, r2
 800afbc:	f7f5 f8a0 	bl	8000100 <__udivsi3>
 800afc0:	0003      	movs	r3, r0
 800afc2:	001a      	movs	r2, r3
 800afc4:	4b20      	ldr	r3, [pc, #128]	; (800b048 <demoRun+0xa4c>)
 800afc6:	601a      	str	r2, [r3, #0]
					cpt = 0;
 800afc8:	4b1e      	ldr	r3, [pc, #120]	; (800b044 <demoRun+0xa48>)
 800afca:	2200      	movs	r2, #0
 800afcc:	701a      	strb	r2, [r3, #0]
					SumAdc = 0;
 800afce:	4b1c      	ldr	r3, [pc, #112]	; (800b040 <demoRun+0xa44>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	601a      	str	r2, [r3, #0]
				}
			}

			if (channel == 8)
 800afd4:	4b18      	ldr	r3, [pc, #96]	; (800b038 <demoRun+0xa3c>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d102      	bne.n	800afe2 <demoRun+0x9e6>
			{
				channel = 0;
 800afdc:	4b16      	ldr	r3, [pc, #88]	; (800b038 <demoRun+0xa3c>)
 800afde:	2200      	movs	r2, #0
 800afe0:	701a      	strb	r2, [r3, #0]

		}

	}

	if(demoStep == 133)
 800afe2:	4b0c      	ldr	r3, [pc, #48]	; (800b014 <demoRun+0xa18>)
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	2b85      	cmp	r3, #133	; 0x85
 800afe8:	d10d      	bne.n	800b006 <demoRun+0xa0a>
	{
		uint8_t tx7[] = {'a'} ;
 800afea:	210c      	movs	r1, #12
 800afec:	187b      	adds	r3, r7, r1
 800afee:	2261      	movs	r2, #97	; 0x61
 800aff0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, tx7, 1, 1000) ;
 800aff2:	23fa      	movs	r3, #250	; 0xfa
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	1879      	adds	r1, r7, r1
 800aff8:	4809      	ldr	r0, [pc, #36]	; (800b020 <demoRun+0xa24>)
 800affa:	2201      	movs	r2, #1
 800affc:	f7f9 fe78 	bl	8004cf0 <HAL_UART_Transmit>
		demoStep = 100;
 800b000:	4b04      	ldr	r3, [pc, #16]	; (800b014 <demoRun+0xa18>)
 800b002:	2264      	movs	r2, #100	; 0x64
 800b004:	701a      	strb	r2, [r3, #0]
	}
}
 800b006:	46c0      	nop			; (mov r8, r8)
 800b008:	46bd      	mov	sp, r7
 800b00a:	b019      	add	sp, #100	; 0x64
 800b00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b00e:	46c0      	nop			; (mov r8, r8)
 800b010:	20000c54 	.word	0x20000c54
 800b014:	20000008 	.word	0x20000008
 800b018:	20000048 	.word	0x20000048
 800b01c:	20000128 	.word	0x20000128
 800b020:	20000dcc 	.word	0x20000dcc
 800b024:	2000002c 	.word	0x2000002c
 800b028:	003d0900 	.word	0x003d0900
 800b02c:	005b8d80 	.word	0x005b8d80
 800b030:	000f4240 	.word	0x000f4240
 800b034:	20000d64 	.word	0x20000d64
 800b038:	20000041 	.word	0x20000041
 800b03c:	20000034 	.word	0x20000034
 800b040:	20000038 	.word	0x20000038
 800b044:	20000040 	.word	0x20000040
 800b048:	2000003c 	.word	0x2000003c

0800b04c <HAL_UART_TxCpltCallback>:

//COM FUNCTIONS
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
	{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
		__NOP() ;
 800b054:	46c0      	nop			; (mov r8, r8)
	}
 800b056:	46c0      	nop			; (mov r8, r8)
 800b058:	46bd      	mov	sp, r7
 800b05a:	b002      	add	sp, #8
 800b05c:	bd80      	pop	{r7, pc}
	...

0800b060 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
		if(huart->Instance==USART1)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a18      	ldr	r2, [pc, #96]	; (800b0d0 <HAL_UART_RxCpltCallback+0x70>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d10a      	bne.n	800b088 <HAL_UART_RxCpltCallback+0x28>
			{
				handle_Message(rx1, 1) ;
 800b072:	4b18      	ldr	r3, [pc, #96]	; (800b0d4 <HAL_UART_RxCpltCallback+0x74>)
 800b074:	2101      	movs	r1, #1
 800b076:	0018      	movs	r0, r3
 800b078:	f000 f83c 	bl	800b0f4 <handle_Message>

	 		    HAL_UART_Receive_IT(&huart1, rx1, BUFFSIZE) ;
 800b07c:	4915      	ldr	r1, [pc, #84]	; (800b0d4 <HAL_UART_RxCpltCallback+0x74>)
 800b07e:	4b16      	ldr	r3, [pc, #88]	; (800b0d8 <HAL_UART_RxCpltCallback+0x78>)
 800b080:	2201      	movs	r2, #1
 800b082:	0018      	movs	r0, r3
 800b084:	f7f9 fee0 	bl	8004e48 <HAL_UART_Receive_IT>
			}
			if(huart->Instance==USART2)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a13      	ldr	r2, [pc, #76]	; (800b0dc <HAL_UART_RxCpltCallback+0x7c>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d10a      	bne.n	800b0a8 <HAL_UART_RxCpltCallback+0x48>
			{
				handle_Message(rx2, 2) ;
 800b092:	4b13      	ldr	r3, [pc, #76]	; (800b0e0 <HAL_UART_RxCpltCallback+0x80>)
 800b094:	2102      	movs	r1, #2
 800b096:	0018      	movs	r0, r3
 800b098:	f000 f82c 	bl	800b0f4 <handle_Message>

				HAL_UART_Receive_IT(&huart2, rx2, BUFFSIZE) ;
 800b09c:	4910      	ldr	r1, [pc, #64]	; (800b0e0 <HAL_UART_RxCpltCallback+0x80>)
 800b09e:	4b11      	ldr	r3, [pc, #68]	; (800b0e4 <HAL_UART_RxCpltCallback+0x84>)
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	0018      	movs	r0, r3
 800b0a4:	f7f9 fed0 	bl	8004e48 <HAL_UART_Receive_IT>
			}
			if(huart->Instance==USART3)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a0e      	ldr	r2, [pc, #56]	; (800b0e8 <HAL_UART_RxCpltCallback+0x88>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d10a      	bne.n	800b0c8 <HAL_UART_RxCpltCallback+0x68>
			{
				handle_Message(rx3, 3) ;
 800b0b2:	4b0e      	ldr	r3, [pc, #56]	; (800b0ec <HAL_UART_RxCpltCallback+0x8c>)
 800b0b4:	2103      	movs	r1, #3
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	f000 f81c 	bl	800b0f4 <handle_Message>

				HAL_UART_Receive_IT(&huart3, rx3, BUFFSIZE) ;
 800b0bc:	490b      	ldr	r1, [pc, #44]	; (800b0ec <HAL_UART_RxCpltCallback+0x8c>)
 800b0be:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <HAL_UART_RxCpltCallback+0x90>)
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	0018      	movs	r0, r3
 800b0c4:	f7f9 fec0 	bl	8004e48 <HAL_UART_Receive_IT>
			}
	}
 800b0c8:	46c0      	nop			; (mov r8, r8)
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	b002      	add	sp, #8
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	40013800 	.word	0x40013800
 800b0d4:	20000d20 	.word	0x20000d20
 800b0d8:	20000dcc 	.word	0x20000dcc
 800b0dc:	40004400 	.word	0x40004400
 800b0e0:	20000dc8 	.word	0x20000dc8
 800b0e4:	20000f38 	.word	0x20000f38
 800b0e8:	40004800 	.word	0x40004800
 800b0ec:	20000fc8 	.word	0x20000fc8
 800b0f0:	20000c54 	.word	0x20000c54

0800b0f4 <handle_Message>:
void handle_Message(uint8_t* buf, uint8_t origin)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	000a      	movs	r2, r1
 800b0fe:	1cfb      	adds	r3, r7, #3
 800b100:	701a      	strb	r2, [r3, #0]
	HL_handle_message(&gps, buf) ;
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	4b27      	ldr	r3, [pc, #156]	; (800b1a4 <handle_Message+0xb0>)
 800b106:	0011      	movs	r1, r2
 800b108:	0018      	movs	r0, r3
 800b10a:	f7fd fd75 	bl	8008bf8 <HL_handle_message>
	if(buf[0] == COM_1 ){
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	2b31      	cmp	r3, #49	; 0x31
 800b114:	d102      	bne.n	800b11c <handle_Message+0x28>
		demoStep = 20;
 800b116:	4b24      	ldr	r3, [pc, #144]	; (800b1a8 <handle_Message+0xb4>)
 800b118:	2214      	movs	r2, #20
 800b11a:	701a      	strb	r2, [r3, #0]
	}
	if(buf[0] == COM_2){
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b32      	cmp	r3, #50	; 0x32
 800b122:	d102      	bne.n	800b12a <handle_Message+0x36>
		demoStep = 21 ;
 800b124:	4b20      	ldr	r3, [pc, #128]	; (800b1a8 <handle_Message+0xb4>)
 800b126:	2215      	movs	r2, #21
 800b128:	701a      	strb	r2, [r3, #0]
	}
	if(buf[0] == COM_3){
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b33      	cmp	r3, #51	; 0x33
 800b130:	d102      	bne.n	800b138 <handle_Message+0x44>
		demoStep = 27 ;
 800b132:	4b1d      	ldr	r3, [pc, #116]	; (800b1a8 <handle_Message+0xb4>)
 800b134:	221b      	movs	r2, #27
 800b136:	701a      	strb	r2, [r3, #0]
	}
	if(buf[0] == COM_4){
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b34      	cmp	r3, #52	; 0x34
 800b13e:	d102      	bne.n	800b146 <handle_Message+0x52>
		demoStep = 29 ;
 800b140:	4b19      	ldr	r3, [pc, #100]	; (800b1a8 <handle_Message+0xb4>)
 800b142:	221d      	movs	r2, #29
 800b144:	701a      	strb	r2, [r3, #0]
	}
	if(buf[0] == COM_5){
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b35      	cmp	r3, #53	; 0x35
 800b14c:	d102      	bne.n	800b154 <handle_Message+0x60>
		demoStep = 73 ;
 800b14e:	4b16      	ldr	r3, [pc, #88]	; (800b1a8 <handle_Message+0xb4>)
 800b150:	2249      	movs	r2, #73	; 0x49
 800b152:	701a      	strb	r2, [r3, #0]
	}
	if(buf[0] == COM_6){
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	2b36      	cmp	r3, #54	; 0x36
 800b15a:	d102      	bne.n	800b162 <handle_Message+0x6e>
		demoStep = 30 ;
 800b15c:	4b12      	ldr	r3, [pc, #72]	; (800b1a8 <handle_Message+0xb4>)
 800b15e:	221e      	movs	r2, #30
 800b160:	701a      	strb	r2, [r3, #0]
	}
	if(buf[0] == COM_7){
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	2b37      	cmp	r3, #55	; 0x37
 800b168:	d102      	bne.n	800b170 <handle_Message+0x7c>
		demoStep = 72 ;
 800b16a:	4b0f      	ldr	r3, [pc, #60]	; (800b1a8 <handle_Message+0xb4>)
 800b16c:	2248      	movs	r2, #72	; 0x48
 800b16e:	701a      	strb	r2, [r3, #0]
	}
	if(buf[0] == COM_8)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	2b38      	cmp	r3, #56	; 0x38
 800b176:	d102      	bne.n	800b17e <handle_Message+0x8a>
	{
		demoStep = 91 ;
 800b178:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <handle_Message+0xb4>)
 800b17a:	225b      	movs	r2, #91	; 0x5b
 800b17c:	701a      	strb	r2, [r3, #0]
	}
	if(buf[0] == COM_9)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b39      	cmp	r3, #57	; 0x39
 800b184:	d102      	bne.n	800b18c <handle_Message+0x98>
	{
		demoStep = 90 ;
 800b186:	4b08      	ldr	r3, [pc, #32]	; (800b1a8 <handle_Message+0xb4>)
 800b188:	225a      	movs	r2, #90	; 0x5a
 800b18a:	701a      	strb	r2, [r3, #0]
	}
	if(buf[0] == COM_10)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2b6c      	cmp	r3, #108	; 0x6c
 800b192:	d102      	bne.n	800b19a <handle_Message+0xa6>
	{
		demoStep = 22 ;
 800b194:	4b04      	ldr	r3, [pc, #16]	; (800b1a8 <handle_Message+0xb4>)
 800b196:	2216      	movs	r2, #22
 800b198:	701a      	strb	r2, [r3, #0]
//		demoStep = 24 ;
//	if(buf[0] == 19)
//		demoStep = 4 ;
//	if(buf[0] == 'K')
//		demoStep = 110 ;
}
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	46bd      	mov	sp, r7
 800b19e:	b002      	add	sp, #8
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	46c0      	nop			; (mov r8, r8)
 800b1a4:	20000048 	.word	0x20000048
 800b1a8:	20000008 	.word	0x20000008

0800b1ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b1b0:	46c0      	nop			; (mov r8, r8)
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <standardInitMotor>:
 */

#include "motor.h"

void standardInitMotor(Motor* m)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
		m->cpower = 0 ;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	805a      	strh	r2, [r3, #2]
		m->tpower = 0 ;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	809a      	strh	r2, [r3, #4]
		m->runTim = 0 ;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	226a      	movs	r2, #106	; 0x6a
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	5499      	strb	r1, [r3, r2]
		m->last_tick = 0 ;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	66da      	str	r2, [r3, #108]	; 0x6c
		m->speedUpTime = 3000 ;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a18      	ldr	r2, [pc, #96]	; (800b240 <standardInitMotor+0x88>)
 800b1de:	671a      	str	r2, [r3, #112]	; 0x70
		m->last_update = 0 ;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	675a      	str	r2, [r3, #116]	; 0x74
		m->sense = 0 ;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	731a      	strb	r2, [r3, #12]
		m->tsense = 0 ;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	735a      	strb	r2, [r3, #13]
		m->state = 0 ;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2278      	movs	r2, #120	; 0x78
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	5499      	strb	r1, [r3, r2]
		for(int i = 0 ; i < NUMPOWERS ; i++)
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	e009      	b.n	800b214 <standardInitMotor+0x5c>
		{
			m->sPowers[i] = 60 ;
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	18d3      	adds	r3, r2, r3
 800b208:	3306      	adds	r3, #6
 800b20a:	223c      	movs	r2, #60	; 0x3c
 800b20c:	801a      	strh	r2, [r3, #0]
		for(int i = 0 ; i < NUMPOWERS ; i++)
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	3301      	adds	r3, #1
 800b212:	617b      	str	r3, [r7, #20]
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	2b02      	cmp	r3, #2
 800b218:	ddf2      	ble.n	800b200 <standardInitMotor+0x48>
		}
		m->sPowers[2] = 85 ;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2255      	movs	r2, #85	; 0x55
 800b21e:	815a      	strh	r2, [r3, #10]
		Translateur t ;
		t.state = 0 ;
 800b220:	210c      	movs	r1, #12
 800b222:	187b      	adds	r3, r7, r1
 800b224:	2200      	movs	r2, #0
 800b226:	705a      	strb	r2, [r3, #1]
		t.sense = SENSE_UP ;
 800b228:	187b      	adds	r3, r7, r1
 800b22a:	2201      	movs	r2, #1
 800b22c:	709a      	strb	r2, [r3, #2]
		m->trans = t ;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	187a      	adds	r2, r7, r1
 800b232:	337c      	adds	r3, #124	; 0x7c
 800b234:	ca03      	ldmia	r2!, {r0, r1}
 800b236:	c303      	stmia	r3!, {r0, r1}
}
 800b238:	46c0      	nop			; (mov r8, r8)
 800b23a:	46bd      	mov	sp, r7
 800b23c:	b006      	add	sp, #24
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	00000bb8 	.word	0x00000bb8

0800b244 <setMotorTPower>:

void setMotorTPower(Motor* mot, uint16_t power)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	000a      	movs	r2, r1
 800b24e:	1cbb      	adds	r3, r7, #2
 800b250:	801a      	strh	r2, [r3, #0]
	mot->tpower = power ;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	1cba      	adds	r2, r7, #2
 800b256:	8812      	ldrh	r2, [r2, #0]
 800b258:	809a      	strh	r2, [r3, #4]
}
 800b25a:	46c0      	nop			; (mov r8, r8)
 800b25c:	46bd      	mov	sp, r7
 800b25e:	b002      	add	sp, #8
 800b260:	bd80      	pop	{r7, pc}

0800b262 <setMotorPower>:
void setMotorPower(Motor* mot, uint16_t power, uint32_t time_us)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b084      	sub	sp, #16
 800b266:	af00      	add	r7, sp, #0
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	607a      	str	r2, [r7, #4]
 800b26c:	230a      	movs	r3, #10
 800b26e:	18fb      	adds	r3, r7, r3
 800b270:	1c0a      	adds	r2, r1, #0
 800b272:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&(mot->htim), mot->channel, ((power)*MOTPERIOD)/100);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d112      	bne.n	800b2a2 <setMotorPower+0x40>
 800b27c:	230a      	movs	r3, #10
 800b27e:	18fb      	adds	r3, r7, r3
 800b280:	881a      	ldrh	r2, [r3, #0]
 800b282:	0013      	movs	r3, r2
 800b284:	015b      	lsls	r3, r3, #5
 800b286:	1a9b      	subs	r3, r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	189b      	adds	r3, r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	2164      	movs	r1, #100	; 0x64
 800b290:	0018      	movs	r0, r3
 800b292:	f7f4 ffbf 	bl	8000214 <__divsi3>
 800b296:	0003      	movs	r3, r0
 800b298:	001a      	movs	r2, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	635a      	str	r2, [r3, #52]	; 0x34
 800b2a0:	e06d      	b.n	800b37e <setMotorPower+0x11c>
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	d112      	bne.n	800b2d0 <setMotorPower+0x6e>
 800b2aa:	230a      	movs	r3, #10
 800b2ac:	18fb      	adds	r3, r7, r3
 800b2ae:	881a      	ldrh	r2, [r3, #0]
 800b2b0:	0013      	movs	r3, r2
 800b2b2:	015b      	lsls	r3, r3, #5
 800b2b4:	1a9b      	subs	r3, r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	189b      	adds	r3, r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	2164      	movs	r1, #100	; 0x64
 800b2be:	0018      	movs	r0, r3
 800b2c0:	f7f4 ffa8 	bl	8000214 <__divsi3>
 800b2c4:	0003      	movs	r3, r0
 800b2c6:	001a      	movs	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	639a      	str	r2, [r3, #56]	; 0x38
 800b2ce:	e056      	b.n	800b37e <setMotorPower+0x11c>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2d4:	2b08      	cmp	r3, #8
 800b2d6:	d112      	bne.n	800b2fe <setMotorPower+0x9c>
 800b2d8:	230a      	movs	r3, #10
 800b2da:	18fb      	adds	r3, r7, r3
 800b2dc:	881a      	ldrh	r2, [r3, #0]
 800b2de:	0013      	movs	r3, r2
 800b2e0:	015b      	lsls	r3, r3, #5
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	189b      	adds	r3, r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	2164      	movs	r1, #100	; 0x64
 800b2ec:	0018      	movs	r0, r3
 800b2ee:	f7f4 ff91 	bl	8000214 <__divsi3>
 800b2f2:	0003      	movs	r3, r0
 800b2f4:	001a      	movs	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	63da      	str	r2, [r3, #60]	; 0x3c
 800b2fc:	e03f      	b.n	800b37e <setMotorPower+0x11c>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b302:	2b0c      	cmp	r3, #12
 800b304:	d112      	bne.n	800b32c <setMotorPower+0xca>
 800b306:	230a      	movs	r3, #10
 800b308:	18fb      	adds	r3, r7, r3
 800b30a:	881a      	ldrh	r2, [r3, #0]
 800b30c:	0013      	movs	r3, r2
 800b30e:	015b      	lsls	r3, r3, #5
 800b310:	1a9b      	subs	r3, r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	189b      	adds	r3, r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	2164      	movs	r1, #100	; 0x64
 800b31a:	0018      	movs	r0, r3
 800b31c:	f7f4 ff7a 	bl	8000214 <__divsi3>
 800b320:	0003      	movs	r3, r0
 800b322:	001a      	movs	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6a1b      	ldr	r3, [r3, #32]
 800b328:	641a      	str	r2, [r3, #64]	; 0x40
 800b32a:	e028      	b.n	800b37e <setMotorPower+0x11c>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b330:	2b10      	cmp	r3, #16
 800b332:	d112      	bne.n	800b35a <setMotorPower+0xf8>
 800b334:	230a      	movs	r3, #10
 800b336:	18fb      	adds	r3, r7, r3
 800b338:	881a      	ldrh	r2, [r3, #0]
 800b33a:	0013      	movs	r3, r2
 800b33c:	015b      	lsls	r3, r3, #5
 800b33e:	1a9b      	subs	r3, r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	189b      	adds	r3, r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	2164      	movs	r1, #100	; 0x64
 800b348:	0018      	movs	r0, r3
 800b34a:	f7f4 ff63 	bl	8000214 <__divsi3>
 800b34e:	0003      	movs	r3, r0
 800b350:	001a      	movs	r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	659a      	str	r2, [r3, #88]	; 0x58
 800b358:	e011      	b.n	800b37e <setMotorPower+0x11c>
 800b35a:	230a      	movs	r3, #10
 800b35c:	18fb      	adds	r3, r7, r3
 800b35e:	881a      	ldrh	r2, [r3, #0]
 800b360:	0013      	movs	r3, r2
 800b362:	015b      	lsls	r3, r3, #5
 800b364:	1a9b      	subs	r3, r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	189b      	adds	r3, r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	2164      	movs	r1, #100	; 0x64
 800b36e:	0018      	movs	r0, r3
 800b370:	f7f4 ff50 	bl	8000214 <__divsi3>
 800b374:	0003      	movs	r3, r0
 800b376:	001a      	movs	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6a1b      	ldr	r3, [r3, #32]
 800b37c:	65da      	str	r2, [r3, #92]	; 0x5c
	mot->last_update = time_us ;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	675a      	str	r2, [r3, #116]	; 0x74
	mot->cpower = power ;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	220a      	movs	r2, #10
 800b388:	18ba      	adds	r2, r7, r2
 800b38a:	8812      	ldrh	r2, [r2, #0]
 800b38c:	805a      	strh	r2, [r3, #2]
}
 800b38e:	46c0      	nop			; (mov r8, r8)
 800b390:	46bd      	mov	sp, r7
 800b392:	b004      	add	sp, #16
 800b394:	bd80      	pop	{r7, pc}

0800b396 <setMotorTSense>:
void setMotorTSense(Motor* mot, uint8_t sense)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b082      	sub	sp, #8
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	000a      	movs	r2, r1
 800b3a0:	1cfb      	adds	r3, r7, #3
 800b3a2:	701a      	strb	r2, [r3, #0]
	mot->tsense = sense ;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	1cfa      	adds	r2, r7, #3
 800b3a8:	7812      	ldrb	r2, [r2, #0]
 800b3aa:	735a      	strb	r2, [r3, #13]
}
 800b3ac:	46c0      	nop			; (mov r8, r8)
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	b002      	add	sp, #8
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <updateMotor>:

void updateMotor(Motor* mot, uint32_t time_us)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
	uint32_t tDiff = time_us - mot->last_update ;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	60fb      	str	r3, [r7, #12]
	if(tDiff > 100000000)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	4a5b      	ldr	r2, [pc, #364]	; (800b538 <updateMotor+0x184>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d903      	bls.n	800b3d8 <updateMotor+0x24>
	{
		mot->last_update = time_us ;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	675a      	str	r2, [r3, #116]	; 0x74
		return ;
 800b3d6:	e0ab      	b.n	800b530 <updateMotor+0x17c>
	}
	if(tDiff >= mot->speedUpTime)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d200      	bcs.n	800b3e4 <updateMotor+0x30>
 800b3e2:	e0a5      	b.n	800b530 <updateMotor+0x17c>
	{
		if(mot->sense != mot->tsense)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	7b1a      	ldrb	r2, [r3, #12]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	7b5b      	ldrb	r3, [r3, #13]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d03d      	beq.n	800b46c <updateMotor+0xb8>
		{
			if(mot->cpower != 0)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	885b      	ldrh	r3, [r3, #2]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d009      	beq.n	800b40c <updateMotor+0x58>
			{
				setMotorPower(mot, mot->cpower - 1, time_us) ;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	885b      	ldrh	r3, [r3, #2]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	b299      	uxth	r1, r3
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	0018      	movs	r0, r3
 800b406:	f7ff ff2c 	bl	800b262 <setMotorPower>
 800b40a:	e091      	b.n	800b530 <updateMotor+0x17c>
			}
			else
			{
				if(mot->tsense)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7b5b      	ldrb	r3, [r3, #13]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d013      	beq.n	800b43c <updateMotor+0x88>
					{
						HAL_GPIO_WritePin(mot->pinFam2, mot->pinNum2, 0) ;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6998      	ldr	r0, [r3, #24]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	8b9b      	ldrh	r3, [r3, #28]
 800b41c:	2200      	movs	r2, #0
 800b41e:	0019      	movs	r1, r3
 800b420:	f7f7 ff95 	bl	800334e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(mot->pinFam1, mot->pinNum1, 1) ;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6918      	ldr	r0, [r3, #16]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	8a9b      	ldrh	r3, [r3, #20]
 800b42c:	2201      	movs	r2, #1
 800b42e:	0019      	movs	r1, r3
 800b430:	f7f7 ff8d 	bl	800334e <HAL_GPIO_WritePin>
						mot->last_update = time_us ;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	675a      	str	r2, [r3, #116]	; 0x74
 800b43a:	e012      	b.n	800b462 <updateMotor+0xae>
					}
				else
					{
						HAL_GPIO_WritePin(mot->pinFam1, mot->pinNum1, 0) ;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6918      	ldr	r0, [r3, #16]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	8a9b      	ldrh	r3, [r3, #20]
 800b444:	2200      	movs	r2, #0
 800b446:	0019      	movs	r1, r3
 800b448:	f7f7 ff81 	bl	800334e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(mot->pinFam2, mot->pinNum2, 1) ;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6998      	ldr	r0, [r3, #24]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	8b9b      	ldrh	r3, [r3, #28]
 800b454:	2201      	movs	r2, #1
 800b456:	0019      	movs	r1, r3
 800b458:	f7f7 ff79 	bl	800334e <HAL_GPIO_WritePin>
						mot->last_update = time_us ;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	675a      	str	r2, [r3, #116]	; 0x74
					}
				mot->sense = mot->tsense ;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	7b5a      	ldrb	r2, [r3, #13]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	731a      	strb	r2, [r3, #12]
 800b46a:	e061      	b.n	800b530 <updateMotor+0x17c>
			}
		}
		else
		{
			if(mot->cpower < mot->tpower)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	885a      	ldrh	r2, [r3, #2]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	889b      	ldrh	r3, [r3, #4]
 800b474:	429a      	cmp	r2, r3
 800b476:	d23d      	bcs.n	800b4f4 <updateMotor+0x140>
			{
				if(mot->state == 0)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2278      	movs	r2, #120	; 0x78
 800b47c:	5c9b      	ldrb	r3, [r3, r2]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d12f      	bne.n	800b4e2 <updateMotor+0x12e>
				{
					mot->state = 1 ;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2278      	movs	r2, #120	; 0x78
 800b486:	2101      	movs	r1, #1
 800b488:	5499      	strb	r1, [r3, r2]
					if(mot->tsense)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	7b5b      	ldrb	r3, [r3, #13]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d013      	beq.n	800b4ba <updateMotor+0x106>
						{
							HAL_GPIO_WritePin(mot->pinFam2, mot->pinNum2, 0) ;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6998      	ldr	r0, [r3, #24]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	8b9b      	ldrh	r3, [r3, #28]
 800b49a:	2200      	movs	r2, #0
 800b49c:	0019      	movs	r1, r3
 800b49e:	f7f7 ff56 	bl	800334e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(mot->pinFam1, mot->pinNum1, 1) ;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6918      	ldr	r0, [r3, #16]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	8a9b      	ldrh	r3, [r3, #20]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	0019      	movs	r1, r3
 800b4ae:	f7f7 ff4e 	bl	800334e <HAL_GPIO_WritePin>
							mot->last_update = time_us ;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	675a      	str	r2, [r3, #116]	; 0x74
 800b4b8:	e01c      	b.n	800b4f4 <updateMotor+0x140>
						}
					else
						{
							HAL_GPIO_WritePin(mot->pinFam1, mot->pinNum1, 0) ;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6918      	ldr	r0, [r3, #16]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	8a9b      	ldrh	r3, [r3, #20]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	0019      	movs	r1, r3
 800b4c6:	f7f7 ff42 	bl	800334e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(mot->pinFam2, mot->pinNum2, 1) ;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6998      	ldr	r0, [r3, #24]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	8b9b      	ldrh	r3, [r3, #28]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	0019      	movs	r1, r3
 800b4d6:	f7f7 ff3a 	bl	800334e <HAL_GPIO_WritePin>
							mot->last_update = time_us ;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	675a      	str	r2, [r3, #116]	; 0x74
 800b4e0:	e008      	b.n	800b4f4 <updateMotor+0x140>
						}
				}
				else
					{
						setMotorPower(mot, mot->cpower +1, time_us) ;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	885b      	ldrh	r3, [r3, #2]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	b299      	uxth	r1, r3
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	0018      	movs	r0, r3
 800b4f0:	f7ff feb7 	bl	800b262 <setMotorPower>
					}
			}
			if(mot->cpower > mot->tpower)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	885a      	ldrh	r2, [r3, #2]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	889b      	ldrh	r3, [r3, #4]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d908      	bls.n	800b512 <updateMotor+0x15e>
			{
				setMotorPower(mot, mot->cpower - 1, time_us) ;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	885b      	ldrh	r3, [r3, #2]
 800b504:	3b01      	subs	r3, #1
 800b506:	b299      	uxth	r1, r3
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	0018      	movs	r0, r3
 800b50e:	f7ff fea8 	bl	800b262 <setMotorPower>
			}
			if((mot->cpower == 0) && (mot->tpower == 0))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	885b      	ldrh	r3, [r3, #2]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10a      	bne.n	800b530 <updateMotor+0x17c>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	889b      	ldrh	r3, [r3, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d106      	bne.n	800b530 <updateMotor+0x17c>
			{
				mot->state = 0 ;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2278      	movs	r2, #120	; 0x78
 800b526:	2100      	movs	r1, #0
 800b528:	5499      	strb	r1, [r3, r2]
				mot->last_update = time_us ;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	675a      	str	r2, [r3, #116]	; 0x74
			}
		}
	}
}
 800b530:	46bd      	mov	sp, r7
 800b532:	b004      	add	sp, #16
 800b534:	bd80      	pop	{r7, pc}
 800b536:	46c0      	nop			; (mov r8, r8)
 800b538:	05f5e100 	.word	0x05f5e100

0800b53c <MR_initGroups>:
 *  Created on: 15 janv. 2020
 *      Author: Samuel
 */
#include "mr_manager.h"

void MR_initGroups(params* gp){
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
	initGroups(gp) ;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	0018      	movs	r0, r3
 800b548:	f7fb f845 	bl	80065d6 <initGroups>
	for(int i = 0 ; i < NUMGROUPS ; i++)
 800b54c:	2300      	movs	r3, #0
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	e018      	b.n	800b584 <MR_initGroups+0x48>
	{
		gp->gss[i].MR_mode = MR_MODE_IDLE ;
 800b552:	6879      	ldr	r1, [r7, #4]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	2065      	movs	r0, #101	; 0x65
 800b558:	0013      	movs	r3, r2
 800b55a:	00db      	lsls	r3, r3, #3
 800b55c:	1a9b      	subs	r3, r3, r2
 800b55e:	011b      	lsls	r3, r3, #4
 800b560:	18cb      	adds	r3, r1, r3
 800b562:	181b      	adds	r3, r3, r0
 800b564:	2200      	movs	r2, #0
 800b566:	701a      	strb	r2, [r3, #0]
		gp->gss[i].MR_arg = 0 ;
 800b568:	6879      	ldr	r1, [r7, #4]
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	2068      	movs	r0, #104	; 0x68
 800b56e:	0013      	movs	r3, r2
 800b570:	00db      	lsls	r3, r3, #3
 800b572:	1a9b      	subs	r3, r3, r2
 800b574:	011b      	lsls	r3, r3, #4
 800b576:	18cb      	adds	r3, r1, r3
 800b578:	181b      	adds	r3, r3, r0
 800b57a:	2200      	movs	r2, #0
 800b57c:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < NUMGROUPS ; i++)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3301      	adds	r3, #1
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2b07      	cmp	r3, #7
 800b588:	dde3      	ble.n	800b552 <MR_initGroups+0x16>
	}
}
 800b58a:	46c0      	nop			; (mov r8, r8)
 800b58c:	46bd      	mov	sp, r7
 800b58e:	b004      	add	sp, #16
 800b590:	bd80      	pop	{r7, pc}

0800b592 <MR_update>:
	gp->gss[gId].MR_arg = 0 ;
	eraseGroup(gp, gId) ;
}

void MR_update(params* gp, uint32_t time_us)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
	for(int i = 0 ; i < NUMGROUPS ; i++)
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]
 800b5a0:	e0bf      	b.n	800b722 <MR_update+0x190>
	{
		if(gp->gss[i].type == GROUP_TYPE_CAPTOR)
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	0013      	movs	r3, r2
 800b5a8:	00db      	lsls	r3, r3, #3
 800b5aa:	1a9b      	subs	r3, r3, r2
 800b5ac:	011b      	lsls	r3, r3, #4
 800b5ae:	5c5b      	ldrb	r3, [r3, r1]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d15b      	bne.n	800b66c <MR_update+0xda>
		{
					if(gp->gss[i].MR_mode == MR_MODE_TARGET_LEFT)
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	2065      	movs	r0, #101	; 0x65
 800b5ba:	0013      	movs	r3, r2
 800b5bc:	00db      	lsls	r3, r3, #3
 800b5be:	1a9b      	subs	r3, r3, r2
 800b5c0:	011b      	lsls	r3, r3, #4
 800b5c2:	18cb      	adds	r3, r1, r3
 800b5c4:	181b      	adds	r3, r3, r0
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	2b0a      	cmp	r3, #10
 800b5ca:	d10b      	bne.n	800b5e4 <MR_update+0x52>
						MR_targetLeft(gp, &(gp->gss[i])) ;
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	0013      	movs	r3, r2
 800b5d0:	00db      	lsls	r3, r3, #3
 800b5d2:	1a9b      	subs	r3, r3, r2
 800b5d4:	011b      	lsls	r3, r3, #4
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	18d2      	adds	r2, r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	0011      	movs	r1, r2
 800b5de:	0018      	movs	r0, r3
 800b5e0:	f000 fa8e 	bl	800bb00 <MR_targetLeft>
					if(gp->gss[i].MR_mode == MR_MODE_BLIND_MOTOR)
 800b5e4:	6879      	ldr	r1, [r7, #4]
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	2065      	movs	r0, #101	; 0x65
 800b5ea:	0013      	movs	r3, r2
 800b5ec:	00db      	lsls	r3, r3, #3
 800b5ee:	1a9b      	subs	r3, r3, r2
 800b5f0:	011b      	lsls	r3, r3, #4
 800b5f2:	18cb      	adds	r3, r1, r3
 800b5f4:	181b      	adds	r3, r3, r0
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b14      	cmp	r3, #20
 800b5fa:	d10b      	bne.n	800b614 <MR_update+0x82>
							MR_blindMotorMotion(&(gp->gss[i]), time_us) ;
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	0013      	movs	r3, r2
 800b600:	00db      	lsls	r3, r3, #3
 800b602:	1a9b      	subs	r3, r3, r2
 800b604:	011b      	lsls	r3, r3, #4
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	18d3      	adds	r3, r2, r3
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	0011      	movs	r1, r2
 800b60e:	0018      	movs	r0, r3
 800b610:	f000 fda8 	bl	800c164 <MR_blindMotorMotion>
					if(gp->gss[i].MR_mode == MR_MODE_REACH_TOP)
 800b614:	6879      	ldr	r1, [r7, #4]
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	2065      	movs	r0, #101	; 0x65
 800b61a:	0013      	movs	r3, r2
 800b61c:	00db      	lsls	r3, r3, #3
 800b61e:	1a9b      	subs	r3, r3, r2
 800b620:	011b      	lsls	r3, r3, #4
 800b622:	18cb      	adds	r3, r1, r3
 800b624:	181b      	adds	r3, r3, r0
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	2b28      	cmp	r3, #40	; 0x28
 800b62a:	d109      	bne.n	800b640 <MR_update+0xae>
							MR_reachTop(&(gp->gss[i])) ;
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	0013      	movs	r3, r2
 800b630:	00db      	lsls	r3, r3, #3
 800b632:	1a9b      	subs	r3, r3, r2
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	18d3      	adds	r3, r2, r3
 800b63a:	0018      	movs	r0, r3
 800b63c:	f000 fb2c 	bl	800bc98 <MR_reachTop>
					if(gp->gss[i].MR_mode == MR_MODE_REACH_BOTTOM)
 800b640:	6879      	ldr	r1, [r7, #4]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	2065      	movs	r0, #101	; 0x65
 800b646:	0013      	movs	r3, r2
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	1a9b      	subs	r3, r3, r2
 800b64c:	011b      	lsls	r3, r3, #4
 800b64e:	18cb      	adds	r3, r1, r3
 800b650:	181b      	adds	r3, r3, r0
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2b29      	cmp	r3, #41	; 0x29
 800b656:	d109      	bne.n	800b66c <MR_update+0xda>
							MR_reachBottom(&(gp->gss[i])) ;
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	0013      	movs	r3, r2
 800b65c:	00db      	lsls	r3, r3, #3
 800b65e:	1a9b      	subs	r3, r3, r2
 800b660:	011b      	lsls	r3, r3, #4
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	18d3      	adds	r3, r2, r3
 800b666:	0018      	movs	r0, r3
 800b668:	f000 fbd0 	bl	800be0c <MR_reachBottom>
		}
		if(gp->gss[i].type == GROUP_TYPE_MOTOR)
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	0013      	movs	r3, r2
 800b672:	00db      	lsls	r3, r3, #3
 800b674:	1a9b      	subs	r3, r3, r2
 800b676:	011b      	lsls	r3, r3, #4
 800b678:	5c5b      	ldrb	r3, [r3, r1]
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d12f      	bne.n	800b6de <MR_update+0x14c>
		{
			if(gp->gss[i].MR_mode == MR_MODE_BLIND_MOTOR)
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	2065      	movs	r0, #101	; 0x65
 800b684:	0013      	movs	r3, r2
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	1a9b      	subs	r3, r3, r2
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	18cb      	adds	r3, r1, r3
 800b68e:	181b      	adds	r3, r3, r0
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	2b14      	cmp	r3, #20
 800b694:	d10b      	bne.n	800b6ae <MR_update+0x11c>
					MR_blindMotorMotion(&(gp->gss[i]), time_us) ;
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	0013      	movs	r3, r2
 800b69a:	00db      	lsls	r3, r3, #3
 800b69c:	1a9b      	subs	r3, r3, r2
 800b69e:	011b      	lsls	r3, r3, #4
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	18d3      	adds	r3, r2, r3
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	0011      	movs	r1, r2
 800b6a8:	0018      	movs	r0, r3
 800b6aa:	f000 fd5b 	bl	800c164 <MR_blindMotorMotion>
			if(gp->gss[i].MR_mode == MR_MODE_GO_IN)
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	2065      	movs	r0, #101	; 0x65
 800b6b4:	0013      	movs	r3, r2
 800b6b6:	00db      	lsls	r3, r3, #3
 800b6b8:	1a9b      	subs	r3, r3, r2
 800b6ba:	011b      	lsls	r3, r3, #4
 800b6bc:	18cb      	adds	r3, r1, r3
 800b6be:	181b      	adds	r3, r3, r0
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	2b32      	cmp	r3, #50	; 0x32
 800b6c4:	d10b      	bne.n	800b6de <MR_update+0x14c>
							MR_goIn(&(gp->gss[i]), time_us) ;
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	0013      	movs	r3, r2
 800b6ca:	00db      	lsls	r3, r3, #3
 800b6cc:	1a9b      	subs	r3, r3, r2
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	18d3      	adds	r3, r2, r3
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	0011      	movs	r1, r2
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f000 fddb 	bl	800c294 <MR_goIn>
		}
		if(gp->gss[i].type == GROUP_TYPE_XMOTOR)
 800b6de:	6879      	ldr	r1, [r7, #4]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	0013      	movs	r3, r2
 800b6e4:	00db      	lsls	r3, r3, #3
 800b6e6:	1a9b      	subs	r3, r3, r2
 800b6e8:	011b      	lsls	r3, r3, #4
 800b6ea:	5c5b      	ldrb	r3, [r3, r1]
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d115      	bne.n	800b71c <MR_update+0x18a>
		{
			if(gp->gss[i].MR_mode == MR_MODE_BS_MOTOR)
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	2065      	movs	r0, #101	; 0x65
 800b6f6:	0013      	movs	r3, r2
 800b6f8:	00db      	lsls	r3, r3, #3
 800b6fa:	1a9b      	subs	r3, r3, r2
 800b6fc:	011b      	lsls	r3, r3, #4
 800b6fe:	18cb      	adds	r3, r1, r3
 800b700:	181b      	adds	r3, r3, r0
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b1e      	cmp	r3, #30
 800b706:	d109      	bne.n	800b71c <MR_update+0x18a>
								MR_backStopMotion(&(gp->gss[i])) ;
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	0013      	movs	r3, r2
 800b70c:	00db      	lsls	r3, r3, #3
 800b70e:	1a9b      	subs	r3, r3, r2
 800b710:	011b      	lsls	r3, r3, #4
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	18d3      	adds	r3, r2, r3
 800b716:	0018      	movs	r0, r3
 800b718:	f000 fd5c 	bl	800c1d4 <MR_backStopMotion>
	for(int i = 0 ; i < NUMGROUPS ; i++)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	3301      	adds	r3, #1
 800b720:	60fb      	str	r3, [r7, #12]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2b07      	cmp	r3, #7
 800b726:	dc00      	bgt.n	800b72a <MR_update+0x198>
 800b728:	e73b      	b.n	800b5a2 <MR_update+0x10>
		}
	}
	update(gp, time_us) ;
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	0011      	movs	r1, r2
 800b730:	0018      	movs	r0, r3
 800b732:	f7fa ff73 	bl	800661c <update>
}
 800b736:	46c0      	nop			; (mov r8, r8)
 800b738:	46bd      	mov	sp, r7
 800b73a:	b004      	add	sp, #16
 800b73c:	bd80      	pop	{r7, pc}
	...

0800b740 <MR_startTargetLeft>:
//________________________________________________________________TARGET LEFT_____________________________________________________

void MR_startTargetLeft(params* gp, GroupSynchro* gs, uint16_t level)
{
 800b740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b742:	b09f      	sub	sp, #124	; 0x7c
 800b744:	af02      	add	r7, sp, #8
 800b746:	6478      	str	r0, [r7, #68]	; 0x44
 800b748:	6439      	str	r1, [r7, #64]	; 0x40
 800b74a:	0013      	movs	r3, r2
 800b74c:	223e      	movs	r2, #62	; 0x3e
 800b74e:	18ba      	adds	r2, r7, r2
 800b750:	8013      	strh	r3, [r2, #0]
	if(gs->type == GROUP_TYPE_CAPTOR)
 800b752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d000      	beq.n	800b75c <MR_startTargetLeft+0x1c>
 800b75a:	e1cb      	b.n	800baf4 <MR_startTargetLeft+0x3b4>
	{
		uint8_t length = 0 ;
 800b75c:	2327      	movs	r3, #39	; 0x27
 800b75e:	2238      	movs	r2, #56	; 0x38
 800b760:	18ba      	adds	r2, r7, r2
 800b762:	18d2      	adds	r2, r2, r3
 800b764:	2300      	movs	r3, #0
 800b766:	7013      	strb	r3, [r2, #0]
		for(int i = 0 ; i < gs->size ; i++)
 800b768:	2300      	movs	r3, #0
 800b76a:	663b      	str	r3, [r7, #96]	; 0x60
 800b76c:	e01a      	b.n	800b7a4 <MR_startTargetLeft+0x64>
		{
			if(gs->vcs[i]->target_currTour < level)
 800b76e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	18d3      	adds	r3, r2, r3
 800b776:	3304      	adds	r3, #4
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	234a      	movs	r3, #74	; 0x4a
 800b77c:	5ad2      	ldrh	r2, [r2, r3]
 800b77e:	233e      	movs	r3, #62	; 0x3e
 800b780:	18fb      	adds	r3, r7, r3
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	4293      	cmp	r3, r2
 800b786:	d90a      	bls.n	800b79e <MR_startTargetLeft+0x5e>
				length++ ;
 800b788:	2227      	movs	r2, #39	; 0x27
 800b78a:	2338      	movs	r3, #56	; 0x38
 800b78c:	18fb      	adds	r3, r7, r3
 800b78e:	189b      	adds	r3, r3, r2
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2138      	movs	r1, #56	; 0x38
 800b794:	468c      	mov	ip, r1
 800b796:	44bc      	add	ip, r7
 800b798:	4462      	add	r2, ip
 800b79a:	3301      	adds	r3, #1
 800b79c:	7013      	strb	r3, [r2, #0]
		for(int i = 0 ; i < gs->size ; i++)
 800b79e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	663b      	str	r3, [r7, #96]	; 0x60
 800b7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a6:	789b      	ldrb	r3, [r3, #2]
 800b7a8:	001a      	movs	r2, r3
 800b7aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	dbde      	blt.n	800b76e <MR_startTargetLeft+0x2e>
		}
		if(length > 0 && length < gs->size)
 800b7b0:	2327      	movs	r3, #39	; 0x27
 800b7b2:	2238      	movs	r2, #56	; 0x38
 800b7b4:	4694      	mov	ip, r2
 800b7b6:	44bc      	add	ip, r7
 800b7b8:	4463      	add	r3, ip
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d100      	bne.n	800b7c2 <MR_startTargetLeft+0x82>
 800b7c0:	e141      	b.n	800ba46 <MR_startTargetLeft+0x306>
 800b7c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7c4:	789a      	ldrb	r2, [r3, #2]
 800b7c6:	2327      	movs	r3, #39	; 0x27
 800b7c8:	2138      	movs	r1, #56	; 0x38
 800b7ca:	468c      	mov	ip, r1
 800b7cc:	44bc      	add	ip, r7
 800b7ce:	4463      	add	r3, ip
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d300      	bcc.n	800b7d8 <MR_startTargetLeft+0x98>
 800b7d6:	e136      	b.n	800ba46 <MR_startTargetLeft+0x306>
		{
 800b7d8:	466b      	mov	r3, sp
 800b7da:	63bb      	str	r3, [r7, #56]	; 0x38
			uint8_t idsLow[length] ;
 800b7dc:	2327      	movs	r3, #39	; 0x27
 800b7de:	2238      	movs	r2, #56	; 0x38
 800b7e0:	4694      	mov	ip, r2
 800b7e2:	44bc      	add	ip, r7
 800b7e4:	4463      	add	r3, ip
 800b7e6:	781a      	ldrb	r2, [r3, #0]
 800b7e8:	0013      	movs	r3, r2
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7ee:	61ba      	str	r2, [r7, #24]
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	61fb      	str	r3, [r7, #28]
 800b7f4:	69b8      	ldr	r0, [r7, #24]
 800b7f6:	69f9      	ldr	r1, [r7, #28]
 800b7f8:	0003      	movs	r3, r0
 800b7fa:	0f5b      	lsrs	r3, r3, #29
 800b7fc:	000e      	movs	r6, r1
 800b7fe:	00f5      	lsls	r5, r6, #3
 800b800:	431d      	orrs	r5, r3
 800b802:	0001      	movs	r1, r0
 800b804:	00cc      	lsls	r4, r1, #3
 800b806:	613a      	str	r2, [r7, #16]
 800b808:	2300      	movs	r3, #0
 800b80a:	617b      	str	r3, [r7, #20]
 800b80c:	6938      	ldr	r0, [r7, #16]
 800b80e:	6979      	ldr	r1, [r7, #20]
 800b810:	0004      	movs	r4, r0
 800b812:	0f63      	lsrs	r3, r4, #29
 800b814:	000c      	movs	r4, r1
 800b816:	00e4      	lsls	r4, r4, #3
 800b818:	637c      	str	r4, [r7, #52]	; 0x34
 800b81a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800b81c:	431c      	orrs	r4, r3
 800b81e:	637c      	str	r4, [r7, #52]	; 0x34
 800b820:	0001      	movs	r1, r0
 800b822:	00c9      	lsls	r1, r1, #3
 800b824:	6339      	str	r1, [r7, #48]	; 0x30
 800b826:	0013      	movs	r3, r2
 800b828:	3307      	adds	r3, #7
 800b82a:	08db      	lsrs	r3, r3, #3
 800b82c:	00db      	lsls	r3, r3, #3
 800b82e:	466a      	mov	r2, sp
 800b830:	1ad2      	subs	r2, r2, r3
 800b832:	4695      	mov	sp, r2
 800b834:	ab02      	add	r3, sp, #8
 800b836:	3300      	adds	r3, #0
 800b838:	657b      	str	r3, [r7, #84]	; 0x54
			uint8_t idsTop[gs->size - length] ;
 800b83a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83c:	789b      	ldrb	r3, [r3, #2]
 800b83e:	001a      	movs	r2, r3
 800b840:	2327      	movs	r3, #39	; 0x27
 800b842:	2138      	movs	r1, #56	; 0x38
 800b844:	468c      	mov	ip, r1
 800b846:	44bc      	add	ip, r7
 800b848:	4463      	add	r3, ip
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	1e5a      	subs	r2, r3, #1
 800b850:	653a      	str	r2, [r7, #80]	; 0x50
 800b852:	001a      	movs	r2, r3
 800b854:	60ba      	str	r2, [r7, #8]
 800b856:	2200      	movs	r2, #0
 800b858:	60fa      	str	r2, [r7, #12]
 800b85a:	68b8      	ldr	r0, [r7, #8]
 800b85c:	68f9      	ldr	r1, [r7, #12]
 800b85e:	0002      	movs	r2, r0
 800b860:	0f52      	lsrs	r2, r2, #29
 800b862:	000c      	movs	r4, r1
 800b864:	00e4      	lsls	r4, r4, #3
 800b866:	62fc      	str	r4, [r7, #44]	; 0x2c
 800b868:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800b86a:	4314      	orrs	r4, r2
 800b86c:	62fc      	str	r4, [r7, #44]	; 0x2c
 800b86e:	0002      	movs	r2, r0
 800b870:	00d2      	lsls	r2, r2, #3
 800b872:	62ba      	str	r2, [r7, #40]	; 0x28
 800b874:	001a      	movs	r2, r3
 800b876:	603a      	str	r2, [r7, #0]
 800b878:	2200      	movs	r2, #0
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	6838      	ldr	r0, [r7, #0]
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	0002      	movs	r2, r0
 800b882:	0f52      	lsrs	r2, r2, #29
 800b884:	000c      	movs	r4, r1
 800b886:	00e4      	lsls	r4, r4, #3
 800b888:	627c      	str	r4, [r7, #36]	; 0x24
 800b88a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b88c:	4314      	orrs	r4, r2
 800b88e:	627c      	str	r4, [r7, #36]	; 0x24
 800b890:	0002      	movs	r2, r0
 800b892:	00d2      	lsls	r2, r2, #3
 800b894:	623a      	str	r2, [r7, #32]
 800b896:	3307      	adds	r3, #7
 800b898:	08db      	lsrs	r3, r3, #3
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	466a      	mov	r2, sp
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	469d      	mov	sp, r3
 800b8a2:	ab02      	add	r3, sp, #8
 800b8a4:	3300      	adds	r3, #0
 800b8a6:	64fb      	str	r3, [r7, #76]	; 0x4c
			int j1 = 0 ;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	667b      	str	r3, [r7, #100]	; 0x64
			int j2 = 0 ;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	66bb      	str	r3, [r7, #104]	; 0x68
			for(int i = 0 ; i < gs->size ; i++)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8b4:	e02e      	b.n	800b914 <MR_startTargetLeft+0x1d4>
			{
				if(gs->vcs[i]->target_currTour < level)
 800b8b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	18d3      	adds	r3, r2, r3
 800b8be:	3304      	adds	r3, #4
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	224a      	movs	r2, #74	; 0x4a
 800b8c4:	5a9b      	ldrh	r3, [r3, r2]
 800b8c6:	223e      	movs	r2, #62	; 0x3e
 800b8c8:	18ba      	adds	r2, r7, r2
 800b8ca:	8812      	ldrh	r2, [r2, #0]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d90f      	bls.n	800b8f0 <MR_startTargetLeft+0x1b0>
					{
						idsTop[j1] = gs->vcs[i]->id;
 800b8d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	18d3      	adds	r3, r2, r3
 800b8d8:	3304      	adds	r3, #4
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	7819      	ldrb	r1, [r3, #0]
 800b8de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8e2:	18d3      	adds	r3, r2, r3
 800b8e4:	1c0a      	adds	r2, r1, #0
 800b8e6:	701a      	strb	r2, [r3, #0]
						j1++ ;
 800b8e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	667b      	str	r3, [r7, #100]	; 0x64
 800b8ee:	e00e      	b.n	800b90e <MR_startTargetLeft+0x1ce>
					}
				else
				{
					idsLow[j2] = gs->vcs[i]->id ;
 800b8f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	18d3      	adds	r3, r2, r3
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	7819      	ldrb	r1, [r3, #0]
 800b8fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b902:	18d3      	adds	r3, r2, r3
 800b904:	1c0a      	adds	r2, r1, #0
 800b906:	701a      	strb	r2, [r3, #0]
					j2++ ;
 800b908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b90a:	3301      	adds	r3, #1
 800b90c:	66bb      	str	r3, [r7, #104]	; 0x68
			for(int i = 0 ; i < gs->size ; i++)
 800b90e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b910:	3301      	adds	r3, #1
 800b912:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b916:	789b      	ldrb	r3, [r3, #2]
 800b918:	001a      	movs	r2, r3
 800b91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b91c:	4293      	cmp	r3, r2
 800b91e:	dbca      	blt.n	800b8b6 <MR_startTargetLeft+0x176>
				}
			}
			uint8_t id = gs->id ;
 800b920:	2013      	movs	r0, #19
 800b922:	2338      	movs	r3, #56	; 0x38
 800b924:	18fb      	adds	r3, r7, r3
 800b926:	181b      	adds	r3, r3, r0
 800b928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b92a:	7852      	ldrb	r2, [r2, #1]
 800b92c:	701a      	strb	r2, [r3, #0]
			addGroup(gp, GROUP_TYPE_CAPTOR, id, idsLow, gs->size - length) ;
 800b92e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b932:	789a      	ldrb	r2, [r3, #2]
 800b934:	2527      	movs	r5, #39	; 0x27
 800b936:	2338      	movs	r3, #56	; 0x38
 800b938:	18fb      	adds	r3, r7, r3
 800b93a:	195b      	adds	r3, r3, r5
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	b2db      	uxtb	r3, r3
 800b942:	0004      	movs	r4, r0
 800b944:	2238      	movs	r2, #56	; 0x38
 800b946:	18ba      	adds	r2, r7, r2
 800b948:	1912      	adds	r2, r2, r4
 800b94a:	7812      	ldrb	r2, [r2, #0]
 800b94c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	000b      	movs	r3, r1
 800b952:	2101      	movs	r1, #1
 800b954:	f7fa ffb8 	bl	80068c8 <addGroup>
			addGroup(gp, GROUP_TYPE_CAPTOR, id+1, idsTop, length) ;
 800b958:	2338      	movs	r3, #56	; 0x38
 800b95a:	18fb      	adds	r3, r7, r3
 800b95c:	191b      	adds	r3, r3, r4
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	3301      	adds	r3, #1
 800b962:	b2da      	uxtb	r2, r3
 800b964:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b966:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b968:	2338      	movs	r3, #56	; 0x38
 800b96a:	18fb      	adds	r3, r7, r3
 800b96c:	195b      	adds	r3, r3, r5
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	000b      	movs	r3, r1
 800b974:	2101      	movs	r1, #1
 800b976:	f7fa ffa7 	bl	80068c8 <addGroup>

			GS_startTargeting(&(gp->gss[id]), HIGH_AVSPEED, level) ;
 800b97a:	0020      	movs	r0, r4
 800b97c:	2338      	movs	r3, #56	; 0x38
 800b97e:	18fb      	adds	r3, r7, r3
 800b980:	181b      	adds	r3, r3, r0
 800b982:	781a      	ldrb	r2, [r3, #0]
 800b984:	0013      	movs	r3, r2
 800b986:	00db      	lsls	r3, r3, #3
 800b988:	1a9b      	subs	r3, r3, r2
 800b98a:	011b      	lsls	r3, r3, #4
 800b98c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b98e:	18d0      	adds	r0, r2, r3
 800b990:	233e      	movs	r3, #62	; 0x3e
 800b992:	18fb      	adds	r3, r7, r3
 800b994:	881b      	ldrh	r3, [r3, #0]
 800b996:	4959      	ldr	r1, [pc, #356]	; (800bafc <MR_startTargetLeft+0x3bc>)
 800b998:	001a      	movs	r2, r3
 800b99a:	f7fb f93f 	bl	8006c1c <GS_startTargeting>

			if(level < LOW_PASSAGE_LEVEL)
 800b99e:	233e      	movs	r3, #62	; 0x3e
 800b9a0:	18fb      	adds	r3, r7, r3
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	2b81      	cmp	r3, #129	; 0x81
 800b9a6:	d812      	bhi.n	800b9ce <MR_startTargetLeft+0x28e>
				GS_startTargeting(&(gp->gss[id+1]),HIGH_AVSPEED, LOW_PASSAGE_LEVEL) ;
 800b9a8:	2313      	movs	r3, #19
 800b9aa:	2238      	movs	r2, #56	; 0x38
 800b9ac:	4694      	mov	ip, r2
 800b9ae:	44bc      	add	ip, r7
 800b9b0:	4463      	add	r3, ip
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	1c5a      	adds	r2, r3, #1
 800b9b6:	0013      	movs	r3, r2
 800b9b8:	00db      	lsls	r3, r3, #3
 800b9ba:	1a9b      	subs	r3, r3, r2
 800b9bc:	011b      	lsls	r3, r3, #4
 800b9be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9c0:	18d3      	adds	r3, r2, r3
 800b9c2:	494e      	ldr	r1, [pc, #312]	; (800bafc <MR_startTargetLeft+0x3bc>)
 800b9c4:	2282      	movs	r2, #130	; 0x82
 800b9c6:	0018      	movs	r0, r3
 800b9c8:	f7fb f928 	bl	8006c1c <GS_startTargeting>
 800b9cc:	e034      	b.n	800ba38 <MR_startTargetLeft+0x2f8>
			else if(level < MIDDLE_PASSAGE_LEVEL)
 800b9ce:	233e      	movs	r3, #62	; 0x3e
 800b9d0:	18fb      	adds	r3, r7, r3
 800b9d2:	881a      	ldrh	r2, [r3, #0]
 800b9d4:	2304      	movs	r3, #4
 800b9d6:	33ff      	adds	r3, #255	; 0xff
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d813      	bhi.n	800ba04 <MR_startTargetLeft+0x2c4>
				GS_startTargeting(&(gp->gss[id+1]),HIGH_AVSPEED, MIDDLE_PASSAGE_LEVEL) ;
 800b9dc:	2313      	movs	r3, #19
 800b9de:	2238      	movs	r2, #56	; 0x38
 800b9e0:	4694      	mov	ip, r2
 800b9e2:	44bc      	add	ip, r7
 800b9e4:	4463      	add	r3, ip
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	0013      	movs	r3, r2
 800b9ec:	00db      	lsls	r3, r3, #3
 800b9ee:	1a9b      	subs	r3, r3, r2
 800b9f0:	011b      	lsls	r3, r3, #4
 800b9f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9f4:	18d0      	adds	r0, r2, r3
 800b9f6:	2382      	movs	r3, #130	; 0x82
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	4940      	ldr	r1, [pc, #256]	; (800bafc <MR_startTargetLeft+0x3bc>)
 800b9fc:	001a      	movs	r2, r3
 800b9fe:	f7fb f90d 	bl	8006c1c <GS_startTargeting>
 800ba02:	e019      	b.n	800ba38 <MR_startTargetLeft+0x2f8>
			else if (level < TOP_PASSAGE_LEVEL)
 800ba04:	233e      	movs	r3, #62	; 0x3e
 800ba06:	18fb      	adds	r3, r7, r3
 800ba08:	881a      	ldrh	r2, [r3, #0]
 800ba0a:	23bd      	movs	r3, #189	; 0xbd
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d812      	bhi.n	800ba38 <MR_startTargetLeft+0x2f8>
				GS_startTargeting(&(gp->gss[id+1]),HIGH_AVSPEED, TOP_PASSAGE_LEVEL) ;
 800ba12:	2313      	movs	r3, #19
 800ba14:	2238      	movs	r2, #56	; 0x38
 800ba16:	4694      	mov	ip, r2
 800ba18:	44bc      	add	ip, r7
 800ba1a:	4463      	add	r3, ip
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	0013      	movs	r3, r2
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	1a9b      	subs	r3, r3, r2
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba2a:	18d0      	adds	r0, r2, r3
 800ba2c:	237c      	movs	r3, #124	; 0x7c
 800ba2e:	33ff      	adds	r3, #255	; 0xff
 800ba30:	4932      	ldr	r1, [pc, #200]	; (800bafc <MR_startTargetLeft+0x3bc>)
 800ba32:	001a      	movs	r2, r3
 800ba34:	f7fb f8f2 	bl	8006c1c <GS_startTargeting>
			gs->mr_token = 1 ;
 800ba38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba3a:	2258      	movs	r2, #88	; 0x58
 800ba3c:	2101      	movs	r1, #1
 800ba3e:	5499      	strb	r1, [r3, r2]
 800ba40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba42:	469d      	mov	sp, r3
		{
 800ba44:	e04c      	b.n	800bae0 <MR_startTargetLeft+0x3a0>
		}
		else if(length == 0 )
 800ba46:	2327      	movs	r3, #39	; 0x27
 800ba48:	2238      	movs	r2, #56	; 0x38
 800ba4a:	4694      	mov	ip, r2
 800ba4c:	44bc      	add	ip, r7
 800ba4e:	4463      	add	r3, ip
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10c      	bne.n	800ba70 <MR_startTargetLeft+0x330>
		{
			GS_startTargeting(gs,HIGH_AVSPEED, level) ;
 800ba56:	233e      	movs	r3, #62	; 0x3e
 800ba58:	18fb      	adds	r3, r7, r3
 800ba5a:	881a      	ldrh	r2, [r3, #0]
 800ba5c:	4927      	ldr	r1, [pc, #156]	; (800bafc <MR_startTargetLeft+0x3bc>)
 800ba5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba60:	0018      	movs	r0, r3
 800ba62:	f7fb f8db 	bl	8006c1c <GS_startTargeting>
			gs->mr_token = 3 ;
 800ba66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba68:	2258      	movs	r2, #88	; 0x58
 800ba6a:	2103      	movs	r1, #3
 800ba6c:	5499      	strb	r1, [r3, r2]
 800ba6e:	e037      	b.n	800bae0 <MR_startTargetLeft+0x3a0>
		}
		else if (length == gs->size )
 800ba70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba72:	789b      	ldrb	r3, [r3, #2]
 800ba74:	2227      	movs	r2, #39	; 0x27
 800ba76:	2138      	movs	r1, #56	; 0x38
 800ba78:	468c      	mov	ip, r1
 800ba7a:	44bc      	add	ip, r7
 800ba7c:	4462      	add	r2, ip
 800ba7e:	7812      	ldrb	r2, [r2, #0]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d12d      	bne.n	800bae0 <MR_startTargetLeft+0x3a0>
		{
			if(level < LOW_PASSAGE_LEVEL)
 800ba84:	233e      	movs	r3, #62	; 0x3e
 800ba86:	18fb      	adds	r3, r7, r3
 800ba88:	881b      	ldrh	r3, [r3, #0]
 800ba8a:	2b81      	cmp	r3, #129	; 0x81
 800ba8c:	d806      	bhi.n	800ba9c <MR_startTargetLeft+0x35c>
				GS_startTargeting(gs,HIGH_AVSPEED, LOW_PASSAGE_LEVEL) ;
 800ba8e:	491b      	ldr	r1, [pc, #108]	; (800bafc <MR_startTargetLeft+0x3bc>)
 800ba90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba92:	2282      	movs	r2, #130	; 0x82
 800ba94:	0018      	movs	r0, r3
 800ba96:	f7fb f8c1 	bl	8006c1c <GS_startTargeting>
 800ba9a:	e01d      	b.n	800bad8 <MR_startTargetLeft+0x398>
			else if(level < MIDDLE_PASSAGE_LEVEL)
 800ba9c:	233e      	movs	r3, #62	; 0x3e
 800ba9e:	18fb      	adds	r3, r7, r3
 800baa0:	881a      	ldrh	r2, [r3, #0]
 800baa2:	2304      	movs	r3, #4
 800baa4:	33ff      	adds	r3, #255	; 0xff
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d807      	bhi.n	800baba <MR_startTargetLeft+0x37a>
				GS_startTargeting(gs,HIGH_AVSPEED, MIDDLE_PASSAGE_LEVEL) ;
 800baaa:	2382      	movs	r3, #130	; 0x82
 800baac:	005a      	lsls	r2, r3, #1
 800baae:	4913      	ldr	r1, [pc, #76]	; (800bafc <MR_startTargetLeft+0x3bc>)
 800bab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab2:	0018      	movs	r0, r3
 800bab4:	f7fb f8b2 	bl	8006c1c <GS_startTargeting>
 800bab8:	e00e      	b.n	800bad8 <MR_startTargetLeft+0x398>
			else if (level < TOP_PASSAGE_LEVEL)
 800baba:	233e      	movs	r3, #62	; 0x3e
 800babc:	18fb      	adds	r3, r7, r3
 800babe:	881a      	ldrh	r2, [r3, #0]
 800bac0:	23bd      	movs	r3, #189	; 0xbd
 800bac2:	005b      	lsls	r3, r3, #1
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d807      	bhi.n	800bad8 <MR_startTargetLeft+0x398>
				GS_startTargeting(gs,HIGH_AVSPEED, TOP_PASSAGE_LEVEL) ;
 800bac8:	237c      	movs	r3, #124	; 0x7c
 800baca:	33ff      	adds	r3, #255	; 0xff
 800bacc:	001a      	movs	r2, r3
 800bace:	490b      	ldr	r1, [pc, #44]	; (800bafc <MR_startTargetLeft+0x3bc>)
 800bad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bad2:	0018      	movs	r0, r3
 800bad4:	f7fb f8a2 	bl	8006c1c <GS_startTargeting>

			gs->mr_token = 4 ;
 800bad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bada:	2258      	movs	r2, #88	; 0x58
 800badc:	2104      	movs	r1, #4
 800bade:	5499      	strb	r1, [r3, r2]
		}
		gs->MR_mode = MR_MODE_TARGET_LEFT ;
 800bae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bae2:	2265      	movs	r2, #101	; 0x65
 800bae4:	210a      	movs	r1, #10
 800bae6:	5499      	strb	r1, [r3, r2]
		gs->MR_arg = level ;
 800bae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baea:	223e      	movs	r2, #62	; 0x3e
 800baec:	18ba      	adds	r2, r7, r2
 800baee:	2168      	movs	r1, #104	; 0x68
 800baf0:	8812      	ldrh	r2, [r2, #0]
 800baf2:	525a      	strh	r2, [r3, r1]
	}
}
 800baf4:	46c0      	nop			; (mov r8, r8)
 800baf6:	46bd      	mov	sp, r7
 800baf8:	b01d      	add	sp, #116	; 0x74
 800bafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bafc:	42be999a 	.word	0x42be999a

0800bb00 <MR_targetLeft>:

void MR_targetLeft(params* gp, GroupSynchro* gs)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
	if(gs->mr_token == 1 && gp->gss[gs->id+1].mode == MODE_IDLE)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2258      	movs	r2, #88	; 0x58
 800bb0e:	5c9b      	ldrb	r3, [r3, r2]
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d121      	bne.n	800bb58 <MR_targetLeft+0x58>
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	785b      	ldrb	r3, [r3, #1]
 800bb18:	1c5a      	adds	r2, r3, #1
 800bb1a:	6879      	ldr	r1, [r7, #4]
 800bb1c:	2064      	movs	r0, #100	; 0x64
 800bb1e:	0013      	movs	r3, r2
 800bb20:	00db      	lsls	r3, r3, #3
 800bb22:	1a9b      	subs	r3, r3, r2
 800bb24:	011b      	lsls	r3, r3, #4
 800bb26:	18cb      	adds	r3, r1, r3
 800bb28:	181b      	adds	r3, r3, r0
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d113      	bne.n	800bb58 <MR_targetLeft+0x58>
	{
		GS_startTargeting(&(gp->gss[gs->id+1]), HIGH_AVSPEED, gs->MR_arg) ;
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	785b      	ldrb	r3, [r3, #1]
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	0013      	movs	r3, r2
 800bb38:	00db      	lsls	r3, r3, #3
 800bb3a:	1a9b      	subs	r3, r3, r2
 800bb3c:	011b      	lsls	r3, r3, #4
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	18d0      	adds	r0, r2, r3
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2268      	movs	r2, #104	; 0x68
 800bb46:	5a9b      	ldrh	r3, [r3, r2]
 800bb48:	4946      	ldr	r1, [pc, #280]	; (800bc64 <MR_targetLeft+0x164>)
 800bb4a:	001a      	movs	r2, r3
 800bb4c:	f7fb f866 	bl	8006c1c <GS_startTargeting>
		gs->mr_token = 2 ;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2258      	movs	r2, #88	; 0x58
 800bb54:	2102      	movs	r1, #2
 800bb56:	5499      	strb	r1, [r3, r2]
	}
	if(gs->mr_token == 2 && gp->gss[gs->id+1].mode == MODE_IDLE)
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2258      	movs	r2, #88	; 0x58
 800bb5c:	5c9b      	ldrb	r3, [r3, r2]
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d139      	bne.n	800bbd6 <MR_targetLeft+0xd6>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	785b      	ldrb	r3, [r3, #1]
 800bb66:	1c5a      	adds	r2, r3, #1
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	2064      	movs	r0, #100	; 0x64
 800bb6c:	0013      	movs	r3, r2
 800bb6e:	00db      	lsls	r3, r3, #3
 800bb70:	1a9b      	subs	r3, r3, r2
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	18cb      	adds	r3, r1, r3
 800bb76:	181b      	adds	r3, r3, r0
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d12b      	bne.n	800bbd6 <MR_targetLeft+0xd6>
	{
		collapseGroups(gp, gs->id, gs->id+1) ;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	7859      	ldrb	r1, [r3, #1]
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	785b      	ldrb	r3, [r3, #1]
 800bb86:	3301      	adds	r3, #1
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	0018      	movs	r0, r3
 800bb8e:	f7fa fdef 	bl	8006770 <collapseGroups>
		gs->MR_arg = 0 ;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2268      	movs	r2, #104	; 0x68
 800bb96:	2100      	movs	r1, #0
 800bb98:	5299      	strh	r1, [r3, r2]
		gs->mr_token = 0 ;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2258      	movs	r2, #88	; 0x58
 800bb9e:	2100      	movs	r1, #0
 800bba0:	5499      	strb	r1, [r3, r2]
		for(int i = 0 ; i < gs->size ; i++)
 800bba2:	2300      	movs	r3, #0
 800bba4:	60fb      	str	r3, [r7, #12]
 800bba6:	e00c      	b.n	800bbc2 <MR_targetLeft+0xc2>
		{
			gs->vcs[i]->mot->trans.state = STATE_LEFT ;
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	18d3      	adds	r3, r2, r3
 800bbb0:	3304      	adds	r3, #4
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb6:	227d      	movs	r2, #125	; 0x7d
 800bbb8:	2104      	movs	r1, #4
 800bbba:	5499      	strb	r1, [r3, r2]
		for(int i = 0 ; i < gs->size ; i++)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	60fb      	str	r3, [r7, #12]
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	789b      	ldrb	r3, [r3, #2]
 800bbc6:	001a      	movs	r2, r3
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	dbec      	blt.n	800bba8 <MR_targetLeft+0xa8>
		}
		gs->MR_mode = MR_MODE_IDLE ;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	2265      	movs	r2, #101	; 0x65
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	5499      	strb	r1, [r3, r2]
	}
	if(gs->mr_token == 3 && gs->mode == MODE_IDLE )
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2258      	movs	r2, #88	; 0x58
 800bbda:	5c9b      	ldrb	r3, [r3, r2]
 800bbdc:	2b03      	cmp	r3, #3
 800bbde:	d126      	bne.n	800bc2e <MR_targetLeft+0x12e>
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	2264      	movs	r2, #100	; 0x64
 800bbe4:	5c9b      	ldrb	r3, [r3, r2]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d121      	bne.n	800bc2e <MR_targetLeft+0x12e>
	{
		gs->mr_token = 0 ;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2258      	movs	r2, #88	; 0x58
 800bbee:	2100      	movs	r1, #0
 800bbf0:	5499      	strb	r1, [r3, r2]
		gs->MR_arg = 0 ;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	2268      	movs	r2, #104	; 0x68
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	5299      	strh	r1, [r3, r2]
		for(int i = 0 ; i < gs->size ; i++)
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60bb      	str	r3, [r7, #8]
 800bbfe:	e00c      	b.n	800bc1a <MR_targetLeft+0x11a>
		{
			gs->vcs[i]->mot->trans.state = STATE_LEFT ;
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	18d3      	adds	r3, r2, r3
 800bc08:	3304      	adds	r3, #4
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc0e:	227d      	movs	r2, #125	; 0x7d
 800bc10:	2104      	movs	r1, #4
 800bc12:	5499      	strb	r1, [r3, r2]
		for(int i = 0 ; i < gs->size ; i++)
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	3301      	adds	r3, #1
 800bc18:	60bb      	str	r3, [r7, #8]
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	789b      	ldrb	r3, [r3, #2]
 800bc1e:	001a      	movs	r2, r3
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	4293      	cmp	r3, r2
 800bc24:	dbec      	blt.n	800bc00 <MR_targetLeft+0x100>
		}
		gs->MR_mode = MR_MODE_IDLE ;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2265      	movs	r2, #101	; 0x65
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	5499      	strb	r1, [r3, r2]
	}
	if(gs->mr_token == 4 && gs->mode== MODE_IDLE)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	2258      	movs	r2, #88	; 0x58
 800bc32:	5c9b      	ldrb	r3, [r3, r2]
 800bc34:	2b04      	cmp	r3, #4
 800bc36:	d110      	bne.n	800bc5a <MR_targetLeft+0x15a>
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	2264      	movs	r2, #100	; 0x64
 800bc3c:	5c9b      	ldrb	r3, [r3, r2]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10b      	bne.n	800bc5a <MR_targetLeft+0x15a>
	{
		GS_startTargeting(gs,HIGH_AVSPEED, gs->MR_arg) ;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2268      	movs	r2, #104	; 0x68
 800bc46:	5a9a      	ldrh	r2, [r3, r2]
 800bc48:	4906      	ldr	r1, [pc, #24]	; (800bc64 <MR_targetLeft+0x164>)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	0018      	movs	r0, r3
 800bc4e:	f7fa ffe5 	bl	8006c1c <GS_startTargeting>
		gs->mr_token = 3 ;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	2258      	movs	r2, #88	; 0x58
 800bc56:	2103      	movs	r1, #3
 800bc58:	5499      	strb	r1, [r3, r2]
	}
}
 800bc5a:	46c0      	nop			; (mov r8, r8)
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	b004      	add	sp, #16
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	46c0      	nop			; (mov r8, r8)
 800bc64:	42be999a 	.word	0x42be999a

0800bc68 <MR_startReachTop>:
//_______________________________________________________REACH TOP__________________________________________________
void MR_startReachTop(GroupSynchro* gs)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_CAPTOR)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d10b      	bne.n	800bc90 <MR_startReachTop+0x28>
	{
		gs->MR_mode = MR_MODE_REACH_TOP ;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2265      	movs	r2, #101	; 0x65
 800bc7c:	2128      	movs	r1, #40	; 0x28
 800bc7e:	5499      	strb	r1, [r3, r2]
		gs->MR_arg = 0 ;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2268      	movs	r2, #104	; 0x68
 800bc84:	2100      	movs	r1, #0
 800bc86:	5299      	strh	r1, [r3, r2]
		gs->mr_token = 1 ;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2258      	movs	r2, #88	; 0x58
 800bc8c:	2101      	movs	r1, #1
 800bc8e:	5499      	strb	r1, [r3, r2]
	}
}
 800bc90:	46c0      	nop			; (mov r8, r8)
 800bc92:	46bd      	mov	sp, r7
 800bc94:	b002      	add	sp, #8
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <MR_reachTop>:

void MR_reachTop(GroupSynchro* gs)
{
 800bc98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc9a:	b097      	sub	sp, #92	; 0x5c
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if(gs->mr_token == 1)
 800bca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bca2:	2358      	movs	r3, #88	; 0x58
 800bca4:	5cd3      	ldrb	r3, [r2, r3]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d10a      	bne.n	800bcc0 <MR_reachTop+0x28>
	{
		GS_startTargeting(gs,HIGH_AVSPEED, REACH_TOP_LEVEL) ;
 800bcaa:	23b9      	movs	r3, #185	; 0xb9
 800bcac:	005a      	lsls	r2, r3, #1
 800bcae:	4949      	ldr	r1, [pc, #292]	; (800bdd4 <MR_reachTop+0x13c>)
 800bcb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb2:	0018      	movs	r0, r3
 800bcb4:	f7fa ffb2 	bl	8006c1c <GS_startTargeting>
		gs->mr_token = 2 ;
 800bcb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcba:	2258      	movs	r2, #88	; 0x58
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	548b      	strb	r3, [r1, r2]
	}
	if(gs->mr_token == 2 && gs->mode == MODE_IDLE)
 800bcc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcc2:	2358      	movs	r3, #88	; 0x58
 800bcc4:	5cd3      	ldrb	r3, [r2, r3]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d000      	beq.n	800bccc <MR_reachTop+0x34>
 800bcca:	e07f      	b.n	800bdcc <MR_reachTop+0x134>
 800bccc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcce:	2364      	movs	r3, #100	; 0x64
 800bcd0:	5cd3      	ldrb	r3, [r2, r3]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d000      	beq.n	800bcd8 <MR_reachTop+0x40>
 800bcd6:	e079      	b.n	800bdcc <MR_reachTop+0x134>
	{
 800bcd8:	466b      	mov	r3, sp
 800bcda:	001e      	movs	r6, r3
		uint8_t powers[gs->size] ;
 800bcdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcde:	789a      	ldrb	r2, [r3, #2]
 800bce0:	0013      	movs	r3, r2
 800bce2:	3b01      	subs	r3, #1
 800bce4:	653b      	str	r3, [r7, #80]	; 0x50
 800bce6:	61ba      	str	r2, [r7, #24]
 800bce8:	2300      	movs	r3, #0
 800bcea:	61fb      	str	r3, [r7, #28]
 800bcec:	69b8      	ldr	r0, [r7, #24]
 800bcee:	69f9      	ldr	r1, [r7, #28]
 800bcf0:	0003      	movs	r3, r0
 800bcf2:	0f5b      	lsrs	r3, r3, #29
 800bcf4:	469c      	mov	ip, r3
 800bcf6:	000b      	movs	r3, r1
 800bcf8:	00dd      	lsls	r5, r3, #3
 800bcfa:	4663      	mov	r3, ip
 800bcfc:	431d      	orrs	r5, r3
 800bcfe:	0003      	movs	r3, r0
 800bd00:	00dc      	lsls	r4, r3, #3
 800bd02:	613a      	str	r2, [r7, #16]
 800bd04:	2300      	movs	r3, #0
 800bd06:	617b      	str	r3, [r7, #20]
 800bd08:	6938      	ldr	r0, [r7, #16]
 800bd0a:	6979      	ldr	r1, [r7, #20]
 800bd0c:	0003      	movs	r3, r0
 800bd0e:	0f5b      	lsrs	r3, r3, #29
 800bd10:	000c      	movs	r4, r1
 800bd12:	00e4      	lsls	r4, r4, #3
 800bd14:	637c      	str	r4, [r7, #52]	; 0x34
 800bd16:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800bd18:	431c      	orrs	r4, r3
 800bd1a:	637c      	str	r4, [r7, #52]	; 0x34
 800bd1c:	0003      	movs	r3, r0
 800bd1e:	00db      	lsls	r3, r3, #3
 800bd20:	633b      	str	r3, [r7, #48]	; 0x30
 800bd22:	0013      	movs	r3, r2
 800bd24:	3307      	adds	r3, #7
 800bd26:	08db      	lsrs	r3, r3, #3
 800bd28:	00db      	lsls	r3, r3, #3
 800bd2a:	466a      	mov	r2, sp
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	469d      	mov	sp, r3
 800bd30:	466b      	mov	r3, sp
 800bd32:	3300      	adds	r3, #0
 800bd34:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint8_t senses[gs->size] ;
 800bd36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd38:	789b      	ldrb	r3, [r3, #2]
 800bd3a:	001a      	movs	r2, r3
 800bd3c:	3a01      	subs	r2, #1
 800bd3e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bd40:	60bb      	str	r3, [r7, #8]
 800bd42:	2200      	movs	r2, #0
 800bd44:	60fa      	str	r2, [r7, #12]
 800bd46:	68b8      	ldr	r0, [r7, #8]
 800bd48:	68f9      	ldr	r1, [r7, #12]
 800bd4a:	0002      	movs	r2, r0
 800bd4c:	0f52      	lsrs	r2, r2, #29
 800bd4e:	000c      	movs	r4, r1
 800bd50:	00e4      	lsls	r4, r4, #3
 800bd52:	62fc      	str	r4, [r7, #44]	; 0x2c
 800bd54:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800bd56:	4314      	orrs	r4, r2
 800bd58:	62fc      	str	r4, [r7, #44]	; 0x2c
 800bd5a:	0002      	movs	r2, r0
 800bd5c:	00d2      	lsls	r2, r2, #3
 800bd5e:	62ba      	str	r2, [r7, #40]	; 0x28
 800bd60:	603b      	str	r3, [r7, #0]
 800bd62:	2200      	movs	r2, #0
 800bd64:	607a      	str	r2, [r7, #4]
 800bd66:	6838      	ldr	r0, [r7, #0]
 800bd68:	6879      	ldr	r1, [r7, #4]
 800bd6a:	0002      	movs	r2, r0
 800bd6c:	0f52      	lsrs	r2, r2, #29
 800bd6e:	000c      	movs	r4, r1
 800bd70:	00e4      	lsls	r4, r4, #3
 800bd72:	627c      	str	r4, [r7, #36]	; 0x24
 800bd74:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800bd76:	4314      	orrs	r4, r2
 800bd78:	627c      	str	r4, [r7, #36]	; 0x24
 800bd7a:	0002      	movs	r2, r0
 800bd7c:	00d2      	lsls	r2, r2, #3
 800bd7e:	623a      	str	r2, [r7, #32]
 800bd80:	3307      	adds	r3, #7
 800bd82:	08db      	lsrs	r3, r3, #3
 800bd84:	00db      	lsls	r3, r3, #3
 800bd86:	466a      	mov	r2, sp
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	469d      	mov	sp, r3
 800bd8c:	466b      	mov	r3, sp
 800bd8e:	3300      	adds	r3, #0
 800bd90:	647b      	str	r3, [r7, #68]	; 0x44
		for(int i = 0 ; i < gs->size ; i++)
 800bd92:	2300      	movs	r3, #0
 800bd94:	657b      	str	r3, [r7, #84]	; 0x54
 800bd96:	e00c      	b.n	800bdb2 <MR_reachTop+0x11a>
		{
			powers[i] = REACH_TOP_POWER ;
 800bd98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd9c:	18d3      	adds	r3, r2, r3
 800bd9e:	2232      	movs	r2, #50	; 0x32
 800bda0:	701a      	strb	r2, [r3, #0]
			senses[i] = SENSE_UP ;
 800bda2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bda4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bda6:	18d3      	adds	r3, r2, r3
 800bda8:	2201      	movs	r2, #1
 800bdaa:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < gs->size ; i++)
 800bdac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdae:	3301      	adds	r3, #1
 800bdb0:	657b      	str	r3, [r7, #84]	; 0x54
 800bdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb4:	789b      	ldrb	r3, [r3, #2]
 800bdb6:	001a      	movs	r2, r3
 800bdb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	dbec      	blt.n	800bd98 <MR_reachTop+0x100>
		}
		MR_startBlindMotion(gs, powers, senses, REACH_TOP_DELAY) ;
 800bdbe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bdc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdc2:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <MR_reachTop+0x140>)
 800bdc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdc6:	f000 f993 	bl	800c0f0 <MR_startBlindMotion>
 800bdca:	46b5      	mov	sp, r6
	}
}
 800bdcc:	46c0      	nop			; (mov r8, r8)
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	b017      	add	sp, #92	; 0x5c
 800bdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdd4:	42be999a 	.word	0x42be999a
 800bdd8:	00124f80 	.word	0x00124f80

0800bddc <MR_startReachBottom>:

//_______________________________________________________REACH TOP__________________________________________________
void MR_startReachBottom(GroupSynchro* gs)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
	if(gs->type == GROUP_TYPE_CAPTOR)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d10b      	bne.n	800be04 <MR_startReachBottom+0x28>
	{
		gs->MR_mode = MR_MODE_REACH_BOTTOM ;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2265      	movs	r2, #101	; 0x65
 800bdf0:	2129      	movs	r1, #41	; 0x29
 800bdf2:	5499      	strb	r1, [r3, r2]
		gs->MR_arg = 0 ;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2268      	movs	r2, #104	; 0x68
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	5299      	strh	r1, [r3, r2]
		gs->mr_token = 1 ;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2258      	movs	r2, #88	; 0x58
 800be00:	2101      	movs	r1, #1
 800be02:	5499      	strb	r1, [r3, r2]
	}
}
 800be04:	46c0      	nop			; (mov r8, r8)
 800be06:	46bd      	mov	sp, r7
 800be08:	b002      	add	sp, #8
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <MR_reachBottom>:

void MR_reachBottom(GroupSynchro* gs)
{
 800be0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be0e:	b097      	sub	sp, #92	; 0x5c
 800be10:	af00      	add	r7, sp, #0
 800be12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if(gs->mr_token == 1)
 800be14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be16:	2358      	movs	r3, #88	; 0x58
 800be18:	5cd3      	ldrb	r3, [r2, r3]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d109      	bne.n	800be32 <MR_reachBottom+0x26>
	{
		GS_startTargeting(gs, HIGH_AVSPEED,REACH_BOTTOM_LEVEL) ;
 800be1e:	494a      	ldr	r1, [pc, #296]	; (800bf48 <MR_reachBottom+0x13c>)
 800be20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be22:	2214      	movs	r2, #20
 800be24:	0018      	movs	r0, r3
 800be26:	f7fa fef9 	bl	8006c1c <GS_startTargeting>
		gs->mr_token = 2 ;
 800be2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be2c:	2258      	movs	r2, #88	; 0x58
 800be2e:	2302      	movs	r3, #2
 800be30:	548b      	strb	r3, [r1, r2]
	}
	if(gs->mr_token == 2 && gs->mode == MODE_IDLE)
 800be32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be34:	2358      	movs	r3, #88	; 0x58
 800be36:	5cd3      	ldrb	r3, [r2, r3]
 800be38:	2b02      	cmp	r3, #2
 800be3a:	d000      	beq.n	800be3e <MR_reachBottom+0x32>
 800be3c:	e07f      	b.n	800bf3e <MR_reachBottom+0x132>
 800be3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be40:	2364      	movs	r3, #100	; 0x64
 800be42:	5cd3      	ldrb	r3, [r2, r3]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d000      	beq.n	800be4a <MR_reachBottom+0x3e>
 800be48:	e079      	b.n	800bf3e <MR_reachBottom+0x132>
	{
 800be4a:	466b      	mov	r3, sp
 800be4c:	001e      	movs	r6, r3
		uint8_t powers[gs->size] ;
 800be4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be50:	789a      	ldrb	r2, [r3, #2]
 800be52:	0013      	movs	r3, r2
 800be54:	3b01      	subs	r3, #1
 800be56:	653b      	str	r3, [r7, #80]	; 0x50
 800be58:	61ba      	str	r2, [r7, #24]
 800be5a:	2300      	movs	r3, #0
 800be5c:	61fb      	str	r3, [r7, #28]
 800be5e:	69b8      	ldr	r0, [r7, #24]
 800be60:	69f9      	ldr	r1, [r7, #28]
 800be62:	0003      	movs	r3, r0
 800be64:	0f5b      	lsrs	r3, r3, #29
 800be66:	469c      	mov	ip, r3
 800be68:	000b      	movs	r3, r1
 800be6a:	00dd      	lsls	r5, r3, #3
 800be6c:	4663      	mov	r3, ip
 800be6e:	431d      	orrs	r5, r3
 800be70:	0003      	movs	r3, r0
 800be72:	00dc      	lsls	r4, r3, #3
 800be74:	613a      	str	r2, [r7, #16]
 800be76:	2300      	movs	r3, #0
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	6938      	ldr	r0, [r7, #16]
 800be7c:	6979      	ldr	r1, [r7, #20]
 800be7e:	0003      	movs	r3, r0
 800be80:	0f5b      	lsrs	r3, r3, #29
 800be82:	000c      	movs	r4, r1
 800be84:	00e4      	lsls	r4, r4, #3
 800be86:	637c      	str	r4, [r7, #52]	; 0x34
 800be88:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800be8a:	431c      	orrs	r4, r3
 800be8c:	637c      	str	r4, [r7, #52]	; 0x34
 800be8e:	0003      	movs	r3, r0
 800be90:	00db      	lsls	r3, r3, #3
 800be92:	633b      	str	r3, [r7, #48]	; 0x30
 800be94:	0013      	movs	r3, r2
 800be96:	3307      	adds	r3, #7
 800be98:	08db      	lsrs	r3, r3, #3
 800be9a:	00db      	lsls	r3, r3, #3
 800be9c:	466a      	mov	r2, sp
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	469d      	mov	sp, r3
 800bea2:	466b      	mov	r3, sp
 800bea4:	3300      	adds	r3, #0
 800bea6:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint8_t senses[gs->size] ;
 800bea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beaa:	789b      	ldrb	r3, [r3, #2]
 800beac:	001a      	movs	r2, r3
 800beae:	3a01      	subs	r2, #1
 800beb0:	64ba      	str	r2, [r7, #72]	; 0x48
 800beb2:	60bb      	str	r3, [r7, #8]
 800beb4:	2200      	movs	r2, #0
 800beb6:	60fa      	str	r2, [r7, #12]
 800beb8:	68b8      	ldr	r0, [r7, #8]
 800beba:	68f9      	ldr	r1, [r7, #12]
 800bebc:	0002      	movs	r2, r0
 800bebe:	0f52      	lsrs	r2, r2, #29
 800bec0:	000c      	movs	r4, r1
 800bec2:	00e4      	lsls	r4, r4, #3
 800bec4:	62fc      	str	r4, [r7, #44]	; 0x2c
 800bec6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800bec8:	4314      	orrs	r4, r2
 800beca:	62fc      	str	r4, [r7, #44]	; 0x2c
 800becc:	0002      	movs	r2, r0
 800bece:	00d2      	lsls	r2, r2, #3
 800bed0:	62ba      	str	r2, [r7, #40]	; 0x28
 800bed2:	603b      	str	r3, [r7, #0]
 800bed4:	2200      	movs	r2, #0
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	6838      	ldr	r0, [r7, #0]
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	0002      	movs	r2, r0
 800bede:	0f52      	lsrs	r2, r2, #29
 800bee0:	000c      	movs	r4, r1
 800bee2:	00e4      	lsls	r4, r4, #3
 800bee4:	627c      	str	r4, [r7, #36]	; 0x24
 800bee6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800bee8:	4314      	orrs	r4, r2
 800beea:	627c      	str	r4, [r7, #36]	; 0x24
 800beec:	0002      	movs	r2, r0
 800beee:	00d2      	lsls	r2, r2, #3
 800bef0:	623a      	str	r2, [r7, #32]
 800bef2:	3307      	adds	r3, #7
 800bef4:	08db      	lsrs	r3, r3, #3
 800bef6:	00db      	lsls	r3, r3, #3
 800bef8:	466a      	mov	r2, sp
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	469d      	mov	sp, r3
 800befe:	466b      	mov	r3, sp
 800bf00:	3300      	adds	r3, #0
 800bf02:	647b      	str	r3, [r7, #68]	; 0x44
		for(int i = 0 ; i < gs->size ; i++)
 800bf04:	2300      	movs	r3, #0
 800bf06:	657b      	str	r3, [r7, #84]	; 0x54
 800bf08:	e00c      	b.n	800bf24 <MR_reachBottom+0x118>
		{
			powers[i] = REACH_BOTTOM_POWER ;
 800bf0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf0e:	18d3      	adds	r3, r2, r3
 800bf10:	2228      	movs	r2, #40	; 0x28
 800bf12:	701a      	strb	r2, [r3, #0]
			senses[i] = SENSE_DOWN ;
 800bf14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf18:	18d3      	adds	r3, r2, r3
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < gs->size ; i++)
 800bf1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf20:	3301      	adds	r3, #1
 800bf22:	657b      	str	r3, [r7, #84]	; 0x54
 800bf24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf26:	789b      	ldrb	r3, [r3, #2]
 800bf28:	001a      	movs	r2, r3
 800bf2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	dbec      	blt.n	800bf0a <MR_reachBottom+0xfe>
		}
		MR_startBlindMotion(gs, powers, senses, REACH_BOTTOM_DELAY) ;
 800bf30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bf32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf34:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <MR_reachBottom+0x140>)
 800bf36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf38:	f000 f8da 	bl	800c0f0 <MR_startBlindMotion>
 800bf3c:	46b5      	mov	sp, r6
	}
}
 800bf3e:	46c0      	nop			; (mov r8, r8)
 800bf40:	46bd      	mov	sp, r7
 800bf42:	b017      	add	sp, #92	; 0x5c
 800bf44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf46:	46c0      	nop			; (mov r8, r8)
 800bf48:	42be999a 	.word	0x42be999a
 800bf4c:	000f4240 	.word	0x000f4240

0800bf50 <MR_goHori>:

//_____________________________________________________HORIZONTAL MOTION__________________________________________________


void MR_goHori(GroupSynchro* gs, uint8_t k, uint8_t sense, uint32_t time, uint8_t invert)
{
 800bf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf52:	b099      	sub	sp, #100	; 0x64
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6478      	str	r0, [r7, #68]	; 0x44
 800bf58:	0010      	movs	r0, r2
 800bf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf5c:	230b      	movs	r3, #11
 800bf5e:	2238      	movs	r2, #56	; 0x38
 800bf60:	18ba      	adds	r2, r7, r2
 800bf62:	18d2      	adds	r2, r2, r3
 800bf64:	1c0b      	adds	r3, r1, #0
 800bf66:	7013      	strb	r3, [r2, #0]
 800bf68:	230a      	movs	r3, #10
 800bf6a:	2238      	movs	r2, #56	; 0x38
 800bf6c:	18ba      	adds	r2, r7, r2
 800bf6e:	18d2      	adds	r2, r2, r3
 800bf70:	1c03      	adds	r3, r0, #0
 800bf72:	7013      	strb	r3, [r2, #0]
 800bf74:	466b      	mov	r3, sp
 800bf76:	001e      	movs	r6, r3
			uint8_t powers[gs->size] ;
 800bf78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf7a:	789a      	ldrb	r2, [r3, #2]
 800bf7c:	0013      	movs	r3, r2
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf82:	61ba      	str	r2, [r7, #24]
 800bf84:	2300      	movs	r3, #0
 800bf86:	61fb      	str	r3, [r7, #28]
 800bf88:	69b8      	ldr	r0, [r7, #24]
 800bf8a:	69f9      	ldr	r1, [r7, #28]
 800bf8c:	0003      	movs	r3, r0
 800bf8e:	0f5b      	lsrs	r3, r3, #29
 800bf90:	469c      	mov	ip, r3
 800bf92:	000b      	movs	r3, r1
 800bf94:	00dd      	lsls	r5, r3, #3
 800bf96:	4663      	mov	r3, ip
 800bf98:	431d      	orrs	r5, r3
 800bf9a:	0003      	movs	r3, r0
 800bf9c:	00dc      	lsls	r4, r3, #3
 800bf9e:	613a      	str	r2, [r7, #16]
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	617b      	str	r3, [r7, #20]
 800bfa4:	6938      	ldr	r0, [r7, #16]
 800bfa6:	6979      	ldr	r1, [r7, #20]
 800bfa8:	0003      	movs	r3, r0
 800bfaa:	0f5b      	lsrs	r3, r3, #29
 800bfac:	000c      	movs	r4, r1
 800bfae:	00e4      	lsls	r4, r4, #3
 800bfb0:	637c      	str	r4, [r7, #52]	; 0x34
 800bfb2:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800bfb4:	431c      	orrs	r4, r3
 800bfb6:	637c      	str	r4, [r7, #52]	; 0x34
 800bfb8:	0003      	movs	r3, r0
 800bfba:	00db      	lsls	r3, r3, #3
 800bfbc:	633b      	str	r3, [r7, #48]	; 0x30
 800bfbe:	0013      	movs	r3, r2
 800bfc0:	3307      	adds	r3, #7
 800bfc2:	08db      	lsrs	r3, r3, #3
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	466a      	mov	r2, sp
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	469d      	mov	sp, r3
 800bfcc:	466b      	mov	r3, sp
 800bfce:	3300      	adds	r3, #0
 800bfd0:	657b      	str	r3, [r7, #84]	; 0x54
			uint8_t senses[gs->size] ;
 800bfd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfd4:	789b      	ldrb	r3, [r3, #2]
 800bfd6:	001a      	movs	r2, r3
 800bfd8:	3a01      	subs	r2, #1
 800bfda:	653a      	str	r2, [r7, #80]	; 0x50
 800bfdc:	60bb      	str	r3, [r7, #8]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	60fa      	str	r2, [r7, #12]
 800bfe2:	68b8      	ldr	r0, [r7, #8]
 800bfe4:	68f9      	ldr	r1, [r7, #12]
 800bfe6:	0002      	movs	r2, r0
 800bfe8:	0f52      	lsrs	r2, r2, #29
 800bfea:	000c      	movs	r4, r1
 800bfec:	00e4      	lsls	r4, r4, #3
 800bfee:	62fc      	str	r4, [r7, #44]	; 0x2c
 800bff0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800bff2:	4314      	orrs	r4, r2
 800bff4:	62fc      	str	r4, [r7, #44]	; 0x2c
 800bff6:	0002      	movs	r2, r0
 800bff8:	00d2      	lsls	r2, r2, #3
 800bffa:	62ba      	str	r2, [r7, #40]	; 0x28
 800bffc:	603b      	str	r3, [r7, #0]
 800bffe:	2200      	movs	r2, #0
 800c000:	607a      	str	r2, [r7, #4]
 800c002:	6838      	ldr	r0, [r7, #0]
 800c004:	6879      	ldr	r1, [r7, #4]
 800c006:	0002      	movs	r2, r0
 800c008:	0f52      	lsrs	r2, r2, #29
 800c00a:	000c      	movs	r4, r1
 800c00c:	00e4      	lsls	r4, r4, #3
 800c00e:	627c      	str	r4, [r7, #36]	; 0x24
 800c010:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c012:	4314      	orrs	r4, r2
 800c014:	627c      	str	r4, [r7, #36]	; 0x24
 800c016:	0002      	movs	r2, r0
 800c018:	00d2      	lsls	r2, r2, #3
 800c01a:	623a      	str	r2, [r7, #32]
 800c01c:	3307      	adds	r3, #7
 800c01e:	08db      	lsrs	r3, r3, #3
 800c020:	00db      	lsls	r3, r3, #3
 800c022:	466a      	mov	r2, sp
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	469d      	mov	sp, r3
 800c028:	466b      	mov	r3, sp
 800c02a:	3300      	adds	r3, #0
 800c02c:	64fb      	str	r3, [r7, #76]	; 0x4c
			for(int i = 0 ; i < gs->size ; i++)
 800c02e:	2300      	movs	r3, #0
 800c030:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c032:	e048      	b.n	800c0c6 <MR_goHori+0x176>
			{
				powers[i] = gs->ms[i]->sPowers[2]-k ;
 800c034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c038:	3304      	adds	r3, #4
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	18d3      	adds	r3, r2, r3
 800c03e:	3304      	adds	r3, #4
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	895b      	ldrh	r3, [r3, #10]
 800c044:	b2da      	uxtb	r2, r3
 800c046:	230b      	movs	r3, #11
 800c048:	2138      	movs	r1, #56	; 0x38
 800c04a:	468c      	mov	ip, r1
 800c04c:	44bc      	add	ip, r7
 800c04e:	4463      	add	r3, ip
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	b2d9      	uxtb	r1, r3
 800c056:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c05a:	18d3      	adds	r3, r2, r3
 800c05c:	1c0a      	adds	r2, r1, #0
 800c05e:	701a      	strb	r2, [r3, #0]
				if(invert)
 800c060:	2340      	movs	r3, #64	; 0x40
 800c062:	2238      	movs	r2, #56	; 0x38
 800c064:	4694      	mov	ip, r2
 800c066:	44bc      	add	ip, r7
 800c068:	4463      	add	r3, ip
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d01d      	beq.n	800c0ac <MR_goHori+0x15c>
				{
					if(i&1)
 800c070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c072:	2201      	movs	r2, #1
 800c074:	4013      	ands	r3, r2
 800c076:	d00e      	beq.n	800c096 <MR_goHori+0x146>
						senses[i] = 1- sense ;
 800c078:	230a      	movs	r3, #10
 800c07a:	2238      	movs	r2, #56	; 0x38
 800c07c:	4694      	mov	ip, r2
 800c07e:	44bc      	add	ip, r7
 800c080:	4463      	add	r3, ip
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	2201      	movs	r2, #1
 800c086:	1ad3      	subs	r3, r2, r3
 800c088:	b2d9      	uxtb	r1, r3
 800c08a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c08c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c08e:	18d3      	adds	r3, r2, r3
 800c090:	1c0a      	adds	r2, r1, #0
 800c092:	701a      	strb	r2, [r3, #0]
 800c094:	e014      	b.n	800c0c0 <MR_goHori+0x170>
					else
						senses[i] = sense ;
 800c096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c09a:	18d3      	adds	r3, r2, r3
 800c09c:	220a      	movs	r2, #10
 800c09e:	2138      	movs	r1, #56	; 0x38
 800c0a0:	468c      	mov	ip, r1
 800c0a2:	44bc      	add	ip, r7
 800c0a4:	4462      	add	r2, ip
 800c0a6:	7812      	ldrb	r2, [r2, #0]
 800c0a8:	701a      	strb	r2, [r3, #0]
 800c0aa:	e009      	b.n	800c0c0 <MR_goHori+0x170>
				}
				else
					senses[i] = sense ;
 800c0ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b0:	18d3      	adds	r3, r2, r3
 800c0b2:	220a      	movs	r2, #10
 800c0b4:	2138      	movs	r1, #56	; 0x38
 800c0b6:	468c      	mov	ip, r1
 800c0b8:	44bc      	add	ip, r7
 800c0ba:	4462      	add	r2, ip
 800c0bc:	7812      	ldrb	r2, [r2, #0]
 800c0be:	701a      	strb	r2, [r3, #0]
			for(int i = 0 ; i < gs->size ; i++)
 800c0c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0c8:	789b      	ldrb	r3, [r3, #2]
 800c0ca:	001a      	movs	r2, r3
 800c0cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	dbb0      	blt.n	800c034 <MR_goHori+0xe4>
			}
			if(gs->type == GROUP_TYPE_MOTOR)
 800c0d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d105      	bne.n	800c0e6 <MR_goHori+0x196>
				MR_startBlindMotion(gs, powers, senses, time);
 800c0da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c0e2:	f000 f805 	bl	800c0f0 <MR_startBlindMotion>
 800c0e6:	46b5      	mov	sp, r6
			if(gs->type == GROUP_TYPE_XMOTOR)
				{
				 //TODO
				}
}
 800c0e8:	46c0      	nop			; (mov r8, r8)
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	b019      	add	sp, #100	; 0x64
 800c0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c0f0 <MR_startBlindMotion>:

//______________________________________________________BLIND MOTOR MOTION______________________________________________


void MR_startBlindMotion(GroupSynchro* gs, uint8_t* powers, uint8_t* senses, uint32_t time)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
 800c0fc:	603b      	str	r3, [r7, #0]
	for(int i = 0 ; i < gs->size ; i++)
 800c0fe:	2300      	movs	r3, #0
 800c100:	617b      	str	r3, [r7, #20]
 800c102:	e01a      	b.n	800c13a <MR_startBlindMotion+0x4a>
	{
		gs->powers[i] = powers[i] ;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	18d3      	adds	r3, r2, r3
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	b299      	uxth	r1, r3
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	3324      	adds	r3, #36	; 0x24
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	18d3      	adds	r3, r2, r3
 800c118:	3304      	adds	r3, #4
 800c11a:	1c0a      	adds	r2, r1, #0
 800c11c:	801a      	strh	r2, [r3, #0]
		gs->senses[i] = senses[i] ;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	18d3      	adds	r3, r2, r3
 800c124:	7818      	ldrb	r0, [r3, #0]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	2154      	movs	r1, #84	; 0x54
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	18d3      	adds	r3, r2, r3
 800c12e:	185b      	adds	r3, r3, r1
 800c130:	1c02      	adds	r2, r0, #0
 800c132:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < gs->size ; i++)
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	3301      	adds	r3, #1
 800c138:	617b      	str	r3, [r7, #20]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	789b      	ldrb	r3, [r3, #2]
 800c13e:	001a      	movs	r2, r3
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	4293      	cmp	r3, r2
 800c144:	dbde      	blt.n	800c104 <MR_startBlindMotion+0x14>
	}
	gs->mr_token = 1 ;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2258      	movs	r2, #88	; 0x58
 800c14a:	2101      	movs	r1, #1
 800c14c:	5499      	strb	r1, [r3, r2]
	gs->target_time = time ;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	661a      	str	r2, [r3, #96]	; 0x60
	gs->MR_mode = MR_MODE_BLIND_MOTOR ;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2265      	movs	r2, #101	; 0x65
 800c158:	2114      	movs	r1, #20
 800c15a:	5499      	strb	r1, [r3, r2]
}
 800c15c:	46c0      	nop			; (mov r8, r8)
 800c15e:	46bd      	mov	sp, r7
 800c160:	b006      	add	sp, #24
 800c162:	bd80      	pop	{r7, pc}

0800c164 <MR_blindMotorMotion>:

void MR_blindMotorMotion(GroupSynchro* gs, uint32_t time_us)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]

	if(gs->mr_token == 1)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2258      	movs	r2, #88	; 0x58
 800c172:	5c9b      	ldrb	r3, [r3, r2]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d110      	bne.n	800c19a <MR_blindMotorMotion+0x36>
	{
		GS_startMotors(gs, gs->powers, gs->senses) ;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	334c      	adds	r3, #76	; 0x4c
 800c17c:	0019      	movs	r1, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	3354      	adds	r3, #84	; 0x54
 800c182:	001a      	movs	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	0018      	movs	r0, r3
 800c188:	f7fa fcae 	bl	8006ae8 <GS_startMotors>
		gs->time_token = time_us ;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	65da      	str	r2, [r3, #92]	; 0x5c
		gs->mr_token = 2 ;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2258      	movs	r2, #88	; 0x58
 800c196:	2102      	movs	r1, #2
 800c198:	5499      	strb	r1, [r3, r2]
	}
	if(gs->mr_token == 2 && time_us- gs->time_token > gs->target_time)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2258      	movs	r2, #88	; 0x58
 800c19e:	5c9b      	ldrb	r3, [r3, r2]
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d113      	bne.n	800c1cc <MR_blindMotorMotion+0x68>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	1ad2      	subs	r2, r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d90b      	bls.n	800c1cc <MR_blindMotorMotion+0x68>
	{
		GS_stopMotors(gs) ;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	0018      	movs	r0, r3
 800c1b8:	f7fa fcf6 	bl	8006ba8 <GS_stopMotors>
		gs->MR_mode = MR_MODE_IDLE ;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2265      	movs	r2, #101	; 0x65
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	5499      	strb	r1, [r3, r2]
		gs->mr_token = 0 ;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2258      	movs	r2, #88	; 0x58
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	5499      	strb	r1, [r3, r2]
	}
}
 800c1cc:	46c0      	nop			; (mov r8, r8)
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	b002      	add	sp, #8
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <MR_backStopMotion>:
	gs->mr_token = 0 ;
	gs->MR_mode = MR_MODE_BS_MOTOR ;
}

void MR_backStopMotion(GroupSynchro* gs)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
	if(gs->mr_token == 0)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2258      	movs	r2, #88	; 0x58
 800c1e0:	5c9b      	ldrb	r3, [r3, r2]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10d      	bne.n	800c202 <MR_backStopMotion+0x2e>
	{
		GS_startMotors(gs, gs->powers, gs->senses) ;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	334c      	adds	r3, #76	; 0x4c
 800c1ea:	0019      	movs	r1, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	3354      	adds	r3, #84	; 0x54
 800c1f0:	001a      	movs	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	0018      	movs	r0, r3
 800c1f6:	f7fa fc77 	bl	8006ae8 <GS_startMotors>
		gs->mr_token = 1 ;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2258      	movs	r2, #88	; 0x58
 800c1fe:	2101      	movs	r1, #1
 800c200:	5499      	strb	r1, [r3, r2]
	}
	if(gs->mr_token == 1 && gs->xc.lastAggMeasure == 1)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2258      	movs	r2, #88	; 0x58
 800c206:	5c9b      	ldrb	r3, [r3, r2]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d110      	bne.n	800c22e <MR_backStopMotion+0x5a>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2233      	movs	r2, #51	; 0x33
 800c210:	5c9b      	ldrb	r3, [r3, r2]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d10b      	bne.n	800c22e <MR_backStopMotion+0x5a>
	{
		GS_stopMotors(gs);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	0018      	movs	r0, r3
 800c21a:	f7fa fcc5 	bl	8006ba8 <GS_stopMotors>
		gs->mr_token = 0 ;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2258      	movs	r2, #88	; 0x58
 800c222:	2100      	movs	r1, #0
 800c224:	5499      	strb	r1, [r3, r2]
		gs->MR_mode = MR_MODE_IDLE ;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2265      	movs	r2, #101	; 0x65
 800c22a:	2100      	movs	r1, #0
 800c22c:	5499      	strb	r1, [r3, r2]
	}
}
 800c22e:	46c0      	nop			; (mov r8, r8)
 800c230:	46bd      	mov	sp, r7
 800c232:	b002      	add	sp, #8
 800c234:	bd80      	pop	{r7, pc}

0800c236 <MR_startGoIn>:

//_______________________________________________GO IN METHODS______________________________________
void MR_startGoIn(GroupSynchro* gs)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
		gs->mr_token = 0 ;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2258      	movs	r2, #88	; 0x58
 800c242:	2100      	movs	r1, #0
 800c244:	5499      	strb	r1, [r3, r2]
		gs->MR_mode = MR_MODE_GO_IN ;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2265      	movs	r2, #101	; 0x65
 800c24a:	2132      	movs	r1, #50	; 0x32
 800c24c:	5499      	strb	r1, [r3, r2]
		gs->MR_arg = 0 ;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2268      	movs	r2, #104	; 0x68
 800c252:	2100      	movs	r1, #0
 800c254:	5299      	strh	r1, [r3, r2]
		for(int i = 0 ; i < gs->size ; i++)
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	e011      	b.n	800c280 <MR_startGoIn+0x4a>
			{
				gs->powers[i] = GO_IN_POWER ;
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3324      	adds	r3, #36	; 0x24
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	18d3      	adds	r3, r2, r3
 800c266:	3304      	adds	r3, #4
 800c268:	2246      	movs	r2, #70	; 0x46
 800c26a:	801a      	strh	r2, [r3, #0]
				gs->senses[i] = SENSE_UP ;
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	2154      	movs	r1, #84	; 0x54
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	18d3      	adds	r3, r2, r3
 800c274:	185b      	adds	r3, r3, r1
 800c276:	2201      	movs	r2, #1
 800c278:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < gs->size ; i++)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3301      	adds	r3, #1
 800c27e:	60fb      	str	r3, [r7, #12]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	789b      	ldrb	r3, [r3, #2]
 800c284:	001a      	movs	r2, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	4293      	cmp	r3, r2
 800c28a:	dbe7      	blt.n	800c25c <MR_startGoIn+0x26>
			}
}
 800c28c:	46c0      	nop			; (mov r8, r8)
 800c28e:	46bd      	mov	sp, r7
 800c290:	b004      	add	sp, #16
 800c292:	bd80      	pop	{r7, pc}

0800c294 <MR_goIn>:

void MR_goIn(GroupSynchro* gs, uint32_t time_us)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
	if(gs->mr_token == 0)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2258      	movs	r2, #88	; 0x58
 800c2a2:	5c9b      	ldrb	r3, [r3, r2]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d110      	bne.n	800c2ca <MR_goIn+0x36>
	{
		GS_startMotors(gs, gs->powers, gs->senses) ;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	334c      	adds	r3, #76	; 0x4c
 800c2ac:	0019      	movs	r1, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	3354      	adds	r3, #84	; 0x54
 800c2b2:	001a      	movs	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	0018      	movs	r0, r3
 800c2b8:	f7fa fc16 	bl	8006ae8 <GS_startMotors>
		gs->time_token = time_us ;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	65da      	str	r2, [r3, #92]	; 0x5c
		gs->mr_token = 1 ;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2258      	movs	r2, #88	; 0x58
 800c2c6:	2101      	movs	r1, #1
 800c2c8:	5499      	strb	r1, [r3, r2]
	}
	if(gs->mr_token == 1 && time_us-gs->time_token >= 3*RETRACT_TIME)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2258      	movs	r2, #88	; 0x58
 800c2ce:	5c9b      	ldrb	r3, [r3, r2]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d12e      	bne.n	800c332 <MR_goIn+0x9e>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	4a2e      	ldr	r2, [pc, #184]	; (800c398 <MR_goIn+0x104>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d927      	bls.n	800c332 <MR_goIn+0x9e>
	{
		for(int i = 0 ; i < gs->size ; i++)
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60fb      	str	r3, [r7, #12]
 800c2e6:	e009      	b.n	800c2fc <MR_goIn+0x68>
		{
			gs->senses[i] = SENSE_DOWN ;
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	2154      	movs	r1, #84	; 0x54
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	18d3      	adds	r3, r2, r3
 800c2f0:	185b      	adds	r3, r3, r1
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < gs->size ; i++)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	789b      	ldrb	r3, [r3, #2]
 800c300:	001a      	movs	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	4293      	cmp	r3, r2
 800c306:	dbef      	blt.n	800c2e8 <MR_goIn+0x54>
		}
		GS_stopMotors(gs) ;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	0018      	movs	r0, r3
 800c30c:	f7fa fc4c 	bl	8006ba8 <GS_stopMotors>
		GS_startMotors(gs, gs->powers, gs->senses);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	334c      	adds	r3, #76	; 0x4c
 800c314:	0019      	movs	r1, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3354      	adds	r3, #84	; 0x54
 800c31a:	001a      	movs	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	0018      	movs	r0, r3
 800c320:	f7fa fbe2 	bl	8006ae8 <GS_startMotors>
		gs->time_token = time_us ;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	65da      	str	r2, [r3, #92]	; 0x5c
		gs->mr_token = 2 ;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2258      	movs	r2, #88	; 0x58
 800c32e:	2102      	movs	r1, #2
 800c330:	5499      	strb	r1, [r3, r2]
	}
	if(gs->mr_token == 2 && time_us - gs->time_token >= 2*RETRACT_TIME)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2258      	movs	r2, #88	; 0x58
 800c336:	5c9b      	ldrb	r3, [r3, r2]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d128      	bne.n	800c38e <MR_goIn+0xfa>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c340:	683a      	ldr	r2, [r7, #0]
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	4a15      	ldr	r2, [pc, #84]	; (800c39c <MR_goIn+0x108>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d921      	bls.n	800c38e <MR_goIn+0xfa>
	{
		GS_stopMotors(gs);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	0018      	movs	r0, r3
 800c34e:	f7fa fc2b 	bl	8006ba8 <GS_stopMotors>
		for(int i = 0 ; i < gs->size ; i++)
 800c352:	2300      	movs	r3, #0
 800c354:	60bb      	str	r3, [r7, #8]
 800c356:	e00c      	b.n	800c372 <MR_goIn+0xde>
		{
			if(gs->type == GROUP_TYPE_MOTOR || GROUP_TYPE_XMOTOR)
			gs->ms[i]->trans.state = STATE_IN ;
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	3304      	adds	r3, #4
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	18d3      	adds	r3, r2, r3
 800c362:	3304      	adds	r3, #4
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	227d      	movs	r2, #125	; 0x7d
 800c368:	2103      	movs	r1, #3
 800c36a:	5499      	strb	r1, [r3, r2]
		for(int i = 0 ; i < gs->size ; i++)
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	3301      	adds	r3, #1
 800c370:	60bb      	str	r3, [r7, #8]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	789b      	ldrb	r3, [r3, #2]
 800c376:	001a      	movs	r2, r3
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	4293      	cmp	r3, r2
 800c37c:	dbec      	blt.n	800c358 <MR_goIn+0xc4>
		}
		gs->mr_token = 0 ;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2258      	movs	r2, #88	; 0x58
 800c382:	2100      	movs	r1, #0
 800c384:	5499      	strb	r1, [r3, r2]
		gs->MR_mode = MR_MODE_IDLE ;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2265      	movs	r2, #101	; 0x65
 800c38a:	2100      	movs	r1, #0
 800c38c:	5499      	strb	r1, [r3, r2]
	}
}
 800c38e:	46c0      	nop			; (mov r8, r8)
 800c390:	46bd      	mov	sp, r7
 800c392:	b004      	add	sp, #16
 800c394:	bd80      	pop	{r7, pc}
 800c396:	46c0      	nop			; (mov r8, r8)
 800c398:	000b71af 	.word	0x000b71af
 800c39c:	0007a11f 	.word	0x0007a11f

0800c3a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c3a6:	4b0f      	ldr	r3, [pc, #60]	; (800c3e4 <HAL_MspInit+0x44>)
 800c3a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3aa:	4b0e      	ldr	r3, [pc, #56]	; (800c3e4 <HAL_MspInit+0x44>)
 800c3ac:	2101      	movs	r1, #1
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	641a      	str	r2, [r3, #64]	; 0x40
 800c3b2:	4b0c      	ldr	r3, [pc, #48]	; (800c3e4 <HAL_MspInit+0x44>)
 800c3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	607b      	str	r3, [r7, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c3be:	4b09      	ldr	r3, [pc, #36]	; (800c3e4 <HAL_MspInit+0x44>)
 800c3c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3c2:	4b08      	ldr	r3, [pc, #32]	; (800c3e4 <HAL_MspInit+0x44>)
 800c3c4:	2180      	movs	r1, #128	; 0x80
 800c3c6:	0549      	lsls	r1, r1, #21
 800c3c8:	430a      	orrs	r2, r1
 800c3ca:	63da      	str	r2, [r3, #60]	; 0x3c
 800c3cc:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <HAL_MspInit+0x44>)
 800c3ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3d0:	2380      	movs	r3, #128	; 0x80
 800c3d2:	055b      	lsls	r3, r3, #21
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c3da:	46c0      	nop			; (mov r8, r8)
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	b002      	add	sp, #8
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	46c0      	nop			; (mov r8, r8)
 800c3e4:	40021000 	.word	0x40021000

0800c3e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08a      	sub	sp, #40	; 0x28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3f0:	2314      	movs	r3, #20
 800c3f2:	18fb      	adds	r3, r7, r3
 800c3f4:	0018      	movs	r0, r3
 800c3f6:	2314      	movs	r3, #20
 800c3f8:	001a      	movs	r2, r3
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	f000 fe81 	bl	800d102 <memset>
  if(hadc->Instance==ADC1)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a2e      	ldr	r2, [pc, #184]	; (800c4c0 <HAL_ADC_MspInit+0xd8>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d155      	bne.n	800c4b6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800c40a:	4b2e      	ldr	r3, [pc, #184]	; (800c4c4 <HAL_ADC_MspInit+0xdc>)
 800c40c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c40e:	4b2d      	ldr	r3, [pc, #180]	; (800c4c4 <HAL_ADC_MspInit+0xdc>)
 800c410:	2180      	movs	r1, #128	; 0x80
 800c412:	0349      	lsls	r1, r1, #13
 800c414:	430a      	orrs	r2, r1
 800c416:	641a      	str	r2, [r3, #64]	; 0x40
 800c418:	4b2a      	ldr	r3, [pc, #168]	; (800c4c4 <HAL_ADC_MspInit+0xdc>)
 800c41a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c41c:	2380      	movs	r3, #128	; 0x80
 800c41e:	035b      	lsls	r3, r3, #13
 800c420:	4013      	ands	r3, r2
 800c422:	613b      	str	r3, [r7, #16]
 800c424:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c426:	4b27      	ldr	r3, [pc, #156]	; (800c4c4 <HAL_ADC_MspInit+0xdc>)
 800c428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c42a:	4b26      	ldr	r3, [pc, #152]	; (800c4c4 <HAL_ADC_MspInit+0xdc>)
 800c42c:	2101      	movs	r1, #1
 800c42e:	430a      	orrs	r2, r1
 800c430:	635a      	str	r2, [r3, #52]	; 0x34
 800c432:	4b24      	ldr	r3, [pc, #144]	; (800c4c4 <HAL_ADC_MspInit+0xdc>)
 800c434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c436:	2201      	movs	r2, #1
 800c438:	4013      	ands	r3, r2
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800c43e:	2114      	movs	r1, #20
 800c440:	187b      	adds	r3, r7, r1
 800c442:	22ff      	movs	r2, #255	; 0xff
 800c444:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c446:	187b      	adds	r3, r7, r1
 800c448:	2203      	movs	r2, #3
 800c44a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c44c:	187b      	adds	r3, r7, r1
 800c44e:	2200      	movs	r2, #0
 800c450:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c452:	187a      	adds	r2, r7, r1
 800c454:	23a0      	movs	r3, #160	; 0xa0
 800c456:	05db      	lsls	r3, r3, #23
 800c458:	0011      	movs	r1, r2
 800c45a:	0018      	movs	r0, r3
 800c45c:	f7f6 fdf6 	bl	800304c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800c460:	4b19      	ldr	r3, [pc, #100]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c462:	4a1a      	ldr	r2, [pc, #104]	; (800c4cc <HAL_ADC_MspInit+0xe4>)
 800c464:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800c466:	4b18      	ldr	r3, [pc, #96]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c468:	2205      	movs	r2, #5
 800c46a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c46c:	4b16      	ldr	r3, [pc, #88]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c46e:	2200      	movs	r2, #0
 800c470:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c472:	4b15      	ldr	r3, [pc, #84]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c474:	2200      	movs	r2, #0
 800c476:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c478:	4b13      	ldr	r3, [pc, #76]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c47a:	2280      	movs	r2, #128	; 0x80
 800c47c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c47e:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c480:	2280      	movs	r2, #128	; 0x80
 800c482:	0092      	lsls	r2, r2, #2
 800c484:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c486:	4b10      	ldr	r3, [pc, #64]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c488:	2280      	movs	r2, #128	; 0x80
 800c48a:	0112      	lsls	r2, r2, #4
 800c48c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c48e:	4b0e      	ldr	r3, [pc, #56]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c490:	2220      	movs	r2, #32
 800c492:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800c494:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c496:	2200      	movs	r2, #0
 800c498:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c49a:	4b0b      	ldr	r3, [pc, #44]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c49c:	0018      	movs	r0, r3
 800c49e:	f7f6 fb07 	bl	8002ab0 <HAL_DMA_Init>
 800c4a2:	1e03      	subs	r3, r0, #0
 800c4a4:	d001      	beq.n	800c4aa <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800c4a6:	f7fe fe81 	bl	800b1ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a06      	ldr	r2, [pc, #24]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c4ae:	651a      	str	r2, [r3, #80]	; 0x50
 800c4b0:	4b05      	ldr	r3, [pc, #20]	; (800c4c8 <HAL_ADC_MspInit+0xe0>)
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800c4b6:	46c0      	nop			; (mov r8, r8)
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	b00a      	add	sp, #40	; 0x28
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	46c0      	nop			; (mov r8, r8)
 800c4c0:	40012400 	.word	0x40012400
 800c4c4:	40021000 	.word	0x40021000
 800c4c8:	20000e9c 	.word	0x20000e9c
 800c4cc:	40020008 	.word	0x40020008

0800c4d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a1d      	ldr	r2, [pc, #116]	; (800c554 <HAL_TIM_PWM_MspInit+0x84>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d10e      	bne.n	800c500 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c4e2:	4b1d      	ldr	r3, [pc, #116]	; (800c558 <HAL_TIM_PWM_MspInit+0x88>)
 800c4e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4e6:	4b1c      	ldr	r3, [pc, #112]	; (800c558 <HAL_TIM_PWM_MspInit+0x88>)
 800c4e8:	2180      	movs	r1, #128	; 0x80
 800c4ea:	0109      	lsls	r1, r1, #4
 800c4ec:	430a      	orrs	r2, r1
 800c4ee:	641a      	str	r2, [r3, #64]	; 0x40
 800c4f0:	4b19      	ldr	r3, [pc, #100]	; (800c558 <HAL_TIM_PWM_MspInit+0x88>)
 800c4f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4f4:	2380      	movs	r3, #128	; 0x80
 800c4f6:	011b      	lsls	r3, r3, #4
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	617b      	str	r3, [r7, #20]
 800c4fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800c4fe:	e024      	b.n	800c54a <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM3)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a15      	ldr	r2, [pc, #84]	; (800c55c <HAL_TIM_PWM_MspInit+0x8c>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d10c      	bne.n	800c524 <HAL_TIM_PWM_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c50a:	4b13      	ldr	r3, [pc, #76]	; (800c558 <HAL_TIM_PWM_MspInit+0x88>)
 800c50c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c50e:	4b12      	ldr	r3, [pc, #72]	; (800c558 <HAL_TIM_PWM_MspInit+0x88>)
 800c510:	2102      	movs	r1, #2
 800c512:	430a      	orrs	r2, r1
 800c514:	63da      	str	r2, [r3, #60]	; 0x3c
 800c516:	4b10      	ldr	r3, [pc, #64]	; (800c558 <HAL_TIM_PWM_MspInit+0x88>)
 800c518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51a:	2202      	movs	r2, #2
 800c51c:	4013      	ands	r3, r2
 800c51e:	613b      	str	r3, [r7, #16]
 800c520:	693b      	ldr	r3, [r7, #16]
}
 800c522:	e012      	b.n	800c54a <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a0d      	ldr	r2, [pc, #52]	; (800c560 <HAL_TIM_PWM_MspInit+0x90>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d10d      	bne.n	800c54a <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800c52e:	4b0a      	ldr	r3, [pc, #40]	; (800c558 <HAL_TIM_PWM_MspInit+0x88>)
 800c530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c532:	4b09      	ldr	r3, [pc, #36]	; (800c558 <HAL_TIM_PWM_MspInit+0x88>)
 800c534:	2180      	movs	r1, #128	; 0x80
 800c536:	0249      	lsls	r1, r1, #9
 800c538:	430a      	orrs	r2, r1
 800c53a:	641a      	str	r2, [r3, #64]	; 0x40
 800c53c:	4b06      	ldr	r3, [pc, #24]	; (800c558 <HAL_TIM_PWM_MspInit+0x88>)
 800c53e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c540:	2380      	movs	r3, #128	; 0x80
 800c542:	025b      	lsls	r3, r3, #9
 800c544:	4013      	ands	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	68fb      	ldr	r3, [r7, #12]
}
 800c54a:	46c0      	nop			; (mov r8, r8)
 800c54c:	46bd      	mov	sp, r7
 800c54e:	b006      	add	sp, #24
 800c550:	bd80      	pop	{r7, pc}
 800c552:	46c0      	nop			; (mov r8, r8)
 800c554:	40012c00 	.word	0x40012c00
 800c558:	40021000 	.word	0x40021000
 800c55c:	40000400 	.word	0x40000400
 800c560:	40014000 	.word	0x40014000

0800c564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b08a      	sub	sp, #40	; 0x28
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c56c:	2314      	movs	r3, #20
 800c56e:	18fb      	adds	r3, r7, r3
 800c570:	0018      	movs	r0, r3
 800c572:	2314      	movs	r3, #20
 800c574:	001a      	movs	r2, r3
 800c576:	2100      	movs	r1, #0
 800c578:	f000 fdc3 	bl	800d102 <memset>
  if(htim->Instance==TIM1)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a41      	ldr	r2, [pc, #260]	; (800c688 <HAL_TIM_MspPostInit+0x124>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d124      	bne.n	800c5d0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c586:	4b41      	ldr	r3, [pc, #260]	; (800c68c <HAL_TIM_MspPostInit+0x128>)
 800c588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c58a:	4b40      	ldr	r3, [pc, #256]	; (800c68c <HAL_TIM_MspPostInit+0x128>)
 800c58c:	2101      	movs	r1, #1
 800c58e:	430a      	orrs	r2, r1
 800c590:	635a      	str	r2, [r3, #52]	; 0x34
 800c592:	4b3e      	ldr	r3, [pc, #248]	; (800c68c <HAL_TIM_MspPostInit+0x128>)
 800c594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c596:	2201      	movs	r2, #1
 800c598:	4013      	ands	r3, r2
 800c59a:	613b      	str	r3, [r7, #16]
 800c59c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11 [PA9]     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800c59e:	2114      	movs	r1, #20
 800c5a0:	187b      	adds	r3, r7, r1
 800c5a2:	22f0      	movs	r2, #240	; 0xf0
 800c5a4:	0112      	lsls	r2, r2, #4
 800c5a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5a8:	187b      	adds	r3, r7, r1
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5ae:	187b      	adds	r3, r7, r1
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5b4:	187b      	adds	r3, r7, r1
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800c5ba:	187b      	adds	r3, r7, r1
 800c5bc:	2202      	movs	r2, #2
 800c5be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5c0:	187a      	adds	r2, r7, r1
 800c5c2:	23a0      	movs	r3, #160	; 0xa0
 800c5c4:	05db      	lsls	r3, r3, #23
 800c5c6:	0011      	movs	r1, r2
 800c5c8:	0018      	movs	r0, r3
 800c5ca:	f7f6 fd3f 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800c5ce:	e056      	b.n	800c67e <HAL_TIM_MspPostInit+0x11a>
  else if(htim->Instance==TIM3)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a2e      	ldr	r2, [pc, #184]	; (800c690 <HAL_TIM_MspPostInit+0x12c>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d122      	bne.n	800c620 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c5da:	4b2c      	ldr	r3, [pc, #176]	; (800c68c <HAL_TIM_MspPostInit+0x128>)
 800c5dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5de:	4b2b      	ldr	r3, [pc, #172]	; (800c68c <HAL_TIM_MspPostInit+0x128>)
 800c5e0:	2104      	movs	r1, #4
 800c5e2:	430a      	orrs	r2, r1
 800c5e4:	635a      	str	r2, [r3, #52]	; 0x34
 800c5e6:	4b29      	ldr	r3, [pc, #164]	; (800c68c <HAL_TIM_MspPostInit+0x128>)
 800c5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ea:	2204      	movs	r2, #4
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	60fb      	str	r3, [r7, #12]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c5f2:	2114      	movs	r1, #20
 800c5f4:	187b      	adds	r3, r7, r1
 800c5f6:	22c0      	movs	r2, #192	; 0xc0
 800c5f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5fa:	187b      	adds	r3, r7, r1
 800c5fc:	2202      	movs	r2, #2
 800c5fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c600:	187b      	adds	r3, r7, r1
 800c602:	2201      	movs	r2, #1
 800c604:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c606:	187b      	adds	r3, r7, r1
 800c608:	2200      	movs	r2, #0
 800c60a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800c60c:	187b      	adds	r3, r7, r1
 800c60e:	2201      	movs	r2, #1
 800c610:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c612:	187b      	adds	r3, r7, r1
 800c614:	4a1f      	ldr	r2, [pc, #124]	; (800c694 <HAL_TIM_MspPostInit+0x130>)
 800c616:	0019      	movs	r1, r3
 800c618:	0010      	movs	r0, r2
 800c61a:	f7f6 fd17 	bl	800304c <HAL_GPIO_Init>
}
 800c61e:	e02e      	b.n	800c67e <HAL_TIM_MspPostInit+0x11a>
  else if(htim->Instance==TIM15)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a1c      	ldr	r2, [pc, #112]	; (800c698 <HAL_TIM_MspPostInit+0x134>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d129      	bne.n	800c67e <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c62a:	4b18      	ldr	r3, [pc, #96]	; (800c68c <HAL_TIM_MspPostInit+0x128>)
 800c62c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c62e:	4b17      	ldr	r3, [pc, #92]	; (800c68c <HAL_TIM_MspPostInit+0x128>)
 800c630:	2102      	movs	r1, #2
 800c632:	430a      	orrs	r2, r1
 800c634:	635a      	str	r2, [r3, #52]	; 0x34
 800c636:	4b15      	ldr	r3, [pc, #84]	; (800c68c <HAL_TIM_MspPostInit+0x128>)
 800c638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c63a:	2202      	movs	r2, #2
 800c63c:	4013      	ands	r3, r2
 800c63e:	60bb      	str	r3, [r7, #8]
 800c640:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800c642:	2114      	movs	r1, #20
 800c644:	187b      	adds	r3, r7, r1
 800c646:	22c0      	movs	r2, #192	; 0xc0
 800c648:	0212      	lsls	r2, r2, #8
 800c64a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c64c:	187b      	adds	r3, r7, r1
 800c64e:	2202      	movs	r2, #2
 800c650:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c652:	187b      	adds	r3, r7, r1
 800c654:	2201      	movs	r2, #1
 800c656:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c658:	187b      	adds	r3, r7, r1
 800c65a:	2200      	movs	r2, #0
 800c65c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800c65e:	187b      	adds	r3, r7, r1
 800c660:	2205      	movs	r2, #5
 800c662:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c664:	187b      	adds	r3, r7, r1
 800c666:	4a0d      	ldr	r2, [pc, #52]	; (800c69c <HAL_TIM_MspPostInit+0x138>)
 800c668:	0019      	movs	r1, r3
 800c66a:	0010      	movs	r0, r2
 800c66c:	f7f6 fcee 	bl	800304c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 800c670:	2380      	movs	r3, #128	; 0x80
 800c672:	01db      	lsls	r3, r3, #7
 800c674:	4807      	ldr	r0, [pc, #28]	; (800c694 <HAL_TIM_MspPostInit+0x130>)
 800c676:	2200      	movs	r2, #0
 800c678:	0019      	movs	r1, r3
 800c67a:	f7f6 fe68 	bl	800334e <HAL_GPIO_WritePin>
}
 800c67e:	46c0      	nop			; (mov r8, r8)
 800c680:	46bd      	mov	sp, r7
 800c682:	b00a      	add	sp, #40	; 0x28
 800c684:	bd80      	pop	{r7, pc}
 800c686:	46c0      	nop			; (mov r8, r8)
 800c688:	40012c00 	.word	0x40012c00
 800c68c:	40021000 	.word	0x40021000
 800c690:	40000400 	.word	0x40000400
 800c694:	50000800 	.word	0x50000800
 800c698:	40014000 	.word	0x40014000
 800c69c:	50000400 	.word	0x50000400

0800c6a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b08e      	sub	sp, #56	; 0x38
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6a8:	2324      	movs	r3, #36	; 0x24
 800c6aa:	18fb      	adds	r3, r7, r3
 800c6ac:	0018      	movs	r0, r3
 800c6ae:	2314      	movs	r3, #20
 800c6b0:	001a      	movs	r2, r3
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	f000 fd25 	bl	800d102 <memset>
  if(huart->Instance==USART1)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a5d      	ldr	r2, [pc, #372]	; (800c834 <HAL_UART_MspInit+0x194>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d138      	bne.n	800c734 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c6c2:	4b5d      	ldr	r3, [pc, #372]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c6c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6c6:	4b5c      	ldr	r3, [pc, #368]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c6c8:	2180      	movs	r1, #128	; 0x80
 800c6ca:	01c9      	lsls	r1, r1, #7
 800c6cc:	430a      	orrs	r2, r1
 800c6ce:	641a      	str	r2, [r3, #64]	; 0x40
 800c6d0:	4b59      	ldr	r3, [pc, #356]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c6d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6d4:	2380      	movs	r3, #128	; 0x80
 800c6d6:	01db      	lsls	r3, r3, #7
 800c6d8:	4013      	ands	r3, r2
 800c6da:	623b      	str	r3, [r7, #32]
 800c6dc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6de:	4b56      	ldr	r3, [pc, #344]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c6e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6e2:	4b55      	ldr	r3, [pc, #340]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c6e4:	2102      	movs	r1, #2
 800c6e6:	430a      	orrs	r2, r1
 800c6e8:	635a      	str	r2, [r3, #52]	; 0x34
 800c6ea:	4b53      	ldr	r3, [pc, #332]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	61fb      	str	r3, [r7, #28]
 800c6f4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c6f6:	2124      	movs	r1, #36	; 0x24
 800c6f8:	187b      	adds	r3, r7, r1
 800c6fa:	22c0      	movs	r2, #192	; 0xc0
 800c6fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6fe:	187b      	adds	r3, r7, r1
 800c700:	2202      	movs	r2, #2
 800c702:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c704:	187b      	adds	r3, r7, r1
 800c706:	2200      	movs	r2, #0
 800c708:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c70a:	187b      	adds	r3, r7, r1
 800c70c:	2200      	movs	r2, #0
 800c70e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800c710:	187b      	adds	r3, r7, r1
 800c712:	2200      	movs	r2, #0
 800c714:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c716:	187b      	adds	r3, r7, r1
 800c718:	4a48      	ldr	r2, [pc, #288]	; (800c83c <HAL_UART_MspInit+0x19c>)
 800c71a:	0019      	movs	r1, r3
 800c71c:	0010      	movs	r0, r2
 800c71e:	f7f6 fc95 	bl	800304c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c722:	2200      	movs	r2, #0
 800c724:	2100      	movs	r1, #0
 800c726:	201b      	movs	r0, #27
 800c728:	f7f6 f990 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c72c:	201b      	movs	r0, #27
 800c72e:	f7f6 f9a2 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800c732:	e07b      	b.n	800c82c <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART2)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a41      	ldr	r2, [pc, #260]	; (800c840 <HAL_UART_MspInit+0x1a0>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d138      	bne.n	800c7b0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800c73e:	4b3e      	ldr	r3, [pc, #248]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c742:	4b3d      	ldr	r3, [pc, #244]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c744:	2180      	movs	r1, #128	; 0x80
 800c746:	0289      	lsls	r1, r1, #10
 800c748:	430a      	orrs	r2, r1
 800c74a:	63da      	str	r2, [r3, #60]	; 0x3c
 800c74c:	4b3a      	ldr	r3, [pc, #232]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c74e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c750:	2380      	movs	r3, #128	; 0x80
 800c752:	029b      	lsls	r3, r3, #10
 800c754:	4013      	ands	r3, r2
 800c756:	61bb      	str	r3, [r7, #24]
 800c758:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c75a:	4b37      	ldr	r3, [pc, #220]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c75c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c75e:	4b36      	ldr	r3, [pc, #216]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c760:	2108      	movs	r1, #8
 800c762:	430a      	orrs	r2, r1
 800c764:	635a      	str	r2, [r3, #52]	; 0x34
 800c766:	4b34      	ldr	r3, [pc, #208]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c76a:	2208      	movs	r2, #8
 800c76c:	4013      	ands	r3, r2
 800c76e:	617b      	str	r3, [r7, #20]
 800c770:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800c772:	2124      	movs	r1, #36	; 0x24
 800c774:	187b      	adds	r3, r7, r1
 800c776:	2260      	movs	r2, #96	; 0x60
 800c778:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c77a:	187b      	adds	r3, r7, r1
 800c77c:	2202      	movs	r2, #2
 800c77e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c780:	187b      	adds	r3, r7, r1
 800c782:	2200      	movs	r2, #0
 800c784:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c786:	187b      	adds	r3, r7, r1
 800c788:	2200      	movs	r2, #0
 800c78a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 800c78c:	187b      	adds	r3, r7, r1
 800c78e:	2200      	movs	r2, #0
 800c790:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c792:	187b      	adds	r3, r7, r1
 800c794:	4a2b      	ldr	r2, [pc, #172]	; (800c844 <HAL_UART_MspInit+0x1a4>)
 800c796:	0019      	movs	r1, r3
 800c798:	0010      	movs	r0, r2
 800c79a:	f7f6 fc57 	bl	800304c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	201c      	movs	r0, #28
 800c7a4:	f7f6 f952 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c7a8:	201c      	movs	r0, #28
 800c7aa:	f7f6 f964 	bl	8002a76 <HAL_NVIC_EnableIRQ>
}
 800c7ae:	e03d      	b.n	800c82c <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART3)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a24      	ldr	r2, [pc, #144]	; (800c848 <HAL_UART_MspInit+0x1a8>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d138      	bne.n	800c82c <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800c7ba:	4b1f      	ldr	r3, [pc, #124]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c7bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7be:	4b1e      	ldr	r3, [pc, #120]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c7c0:	2180      	movs	r1, #128	; 0x80
 800c7c2:	02c9      	lsls	r1, r1, #11
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	63da      	str	r2, [r3, #60]	; 0x3c
 800c7c8:	4b1b      	ldr	r3, [pc, #108]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c7ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7cc:	2380      	movs	r3, #128	; 0x80
 800c7ce:	02db      	lsls	r3, r3, #11
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	613b      	str	r3, [r7, #16]
 800c7d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7d6:	4b18      	ldr	r3, [pc, #96]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c7d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7da:	4b17      	ldr	r3, [pc, #92]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c7dc:	2104      	movs	r1, #4
 800c7de:	430a      	orrs	r2, r1
 800c7e0:	635a      	str	r2, [r3, #52]	; 0x34
 800c7e2:	4b15      	ldr	r3, [pc, #84]	; (800c838 <HAL_UART_MspInit+0x198>)
 800c7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7e6:	2204      	movs	r2, #4
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800c7ee:	2124      	movs	r1, #36	; 0x24
 800c7f0:	187b      	adds	r3, r7, r1
 800c7f2:	22c0      	movs	r2, #192	; 0xc0
 800c7f4:	0112      	lsls	r2, r2, #4
 800c7f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7f8:	187b      	adds	r3, r7, r1
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7fe:	187b      	adds	r3, r7, r1
 800c800:	2200      	movs	r2, #0
 800c802:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c804:	187b      	adds	r3, r7, r1
 800c806:	2200      	movs	r2, #0
 800c808:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 800c80a:	187b      	adds	r3, r7, r1
 800c80c:	2200      	movs	r2, #0
 800c80e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c810:	187b      	adds	r3, r7, r1
 800c812:	4a0e      	ldr	r2, [pc, #56]	; (800c84c <HAL_UART_MspInit+0x1ac>)
 800c814:	0019      	movs	r1, r3
 800c816:	0010      	movs	r0, r2
 800c818:	f7f6 fc18 	bl	800304c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800c81c:	2200      	movs	r2, #0
 800c81e:	2100      	movs	r1, #0
 800c820:	201d      	movs	r0, #29
 800c822:	f7f6 f913 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800c826:	201d      	movs	r0, #29
 800c828:	f7f6 f925 	bl	8002a76 <HAL_NVIC_EnableIRQ>
}
 800c82c:	46c0      	nop			; (mov r8, r8)
 800c82e:	46bd      	mov	sp, r7
 800c830:	b00e      	add	sp, #56	; 0x38
 800c832:	bd80      	pop	{r7, pc}
 800c834:	40013800 	.word	0x40013800
 800c838:	40021000 	.word	0x40021000
 800c83c:	50000400 	.word	0x50000400
 800c840:	40004400 	.word	0x40004400
 800c844:	50000c00 	.word	0x50000c00
 800c848:	40004800 	.word	0x40004800
 800c84c:	50000800 	.word	0x50000800

0800c850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c854:	46c0      	nop			; (mov r8, r8)
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c85e:	e7fe      	b.n	800c85e <HardFault_Handler+0x4>

0800c860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800c864:	46c0      	nop			; (mov r8, r8)
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c86e:	46c0      	nop			; (mov r8, r8)
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c878:	f7f4 fda4 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c87c:	46c0      	nop			; (mov r8, r8)
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
	...

0800c884 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800c888:	4b03      	ldr	r3, [pc, #12]	; (800c898 <DMA1_Channel1_IRQHandler+0x14>)
 800c88a:	0018      	movs	r0, r3
 800c88c:	f7f6 fa9c 	bl	8002dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800c890:	46c0      	nop			; (mov r8, r8)
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	46c0      	nop			; (mov r8, r8)
 800c898:	20000e9c 	.word	0x20000e9c

0800c89c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800c8a0:	4b03      	ldr	r3, [pc, #12]	; (800c8b0 <USART1_IRQHandler+0x14>)
 800c8a2:	0018      	movs	r0, r3
 800c8a4:	f7f8 fbc4 	bl	8005030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800c8a8:	46c0      	nop			; (mov r8, r8)
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	46c0      	nop			; (mov r8, r8)
 800c8b0:	20000dcc 	.word	0x20000dcc

0800c8b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800c8b8:	4b03      	ldr	r3, [pc, #12]	; (800c8c8 <USART2_IRQHandler+0x14>)
 800c8ba:	0018      	movs	r0, r3
 800c8bc:	f7f8 fbb8 	bl	8005030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800c8c0:	46c0      	nop			; (mov r8, r8)
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	46c0      	nop			; (mov r8, r8)
 800c8c8:	20000f38 	.word	0x20000f38

0800c8cc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800c8d0:	4b03      	ldr	r3, [pc, #12]	; (800c8e0 <USART3_4_IRQHandler+0x14>)
 800c8d2:	0018      	movs	r0, r3
 800c8d4:	f7f8 fbac 	bl	8005030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800c8d8:	46c0      	nop			; (mov r8, r8)
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	46c0      	nop			; (mov r8, r8)
 800c8e0:	20000c54 	.word	0x20000c54

0800c8e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c8e8:	4b03      	ldr	r3, [pc, #12]	; (800c8f8 <SystemInit+0x14>)
 800c8ea:	2280      	movs	r2, #128	; 0x80
 800c8ec:	0512      	lsls	r2, r2, #20
 800c8ee:	609a      	str	r2, [r3, #8]
#endif
}
 800c8f0:	46c0      	nop			; (mov r8, r8)
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	46c0      	nop			; (mov r8, r8)
 800c8f8:	e000ed00 	.word	0xe000ed00

0800c8fc <updateVCaptor>:

#define CAPTOR_MODE_TARGET 10
#define CAPTOR_MODE_TARGET_RESET 11

void updateVCaptor(VCaptor* vc, uint32_t time_us)
{
 800c8fc:	b590      	push	{r4, r7, lr}
 800c8fe:	b087      	sub	sp, #28
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
	uint8_t m = 0 ;
 800c906:	210f      	movs	r1, #15
 800c908:	187b      	adds	r3, r7, r1
 800c90a:	2200      	movs	r2, #0
 800c90c:	701a      	strb	r2, [r3, #0]
	m = HAL_GPIO_ReadPin(vc->inputPinF, vc->inputPinN) ;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c916:	187c      	adds	r4, r7, r1
 800c918:	0019      	movs	r1, r3
 800c91a:	0010      	movs	r0, r2
 800c91c:	f7f6 fcfa 	bl	8003314 <HAL_GPIO_ReadPin>
 800c920:	0003      	movs	r3, r0
 800c922:	7023      	strb	r3, [r4, #0]

	if(vc->mot->tpower != vc->mot->cpower)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c928:	889a      	ldrh	r2, [r3, #4]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c92e:	885b      	ldrh	r3, [r3, #2]
 800c930:	429a      	cmp	r2, r3
 800c932:	d003      	beq.n	800c93c <updateVCaptor+0x40>
		vc->counter = 0 ;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2248      	movs	r2, #72	; 0x48
 800c938:	2100      	movs	r1, #0
 800c93a:	5499      	strb	r1, [r3, r2]

	if(vc->counter < NUMMEASURES)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2248      	movs	r2, #72	; 0x48
 800c940:	5c9b      	ldrb	r3, [r3, r2]
 800c942:	2b04      	cmp	r3, #4
 800c944:	d812      	bhi.n	800c96c <updateVCaptor+0x70>
	{
		vc->lastMeasures[vc->counter] = m ;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2248      	movs	r2, #72	; 0x48
 800c94a:	5c9b      	ldrb	r3, [r3, r2]
 800c94c:	001a      	movs	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	189b      	adds	r3, r3, r2
 800c952:	220f      	movs	r2, #15
 800c954:	18ba      	adds	r2, r7, r2
 800c956:	7812      	ldrb	r2, [r2, #0]
 800c958:	709a      	strb	r2, [r3, #2]
		vc->counter = vc->counter + 1 ;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2248      	movs	r2, #72	; 0x48
 800c95e:	5c9b      	ldrb	r3, [r3, r2]
 800c960:	3301      	adds	r3, #1
 800c962:	b2d9      	uxtb	r1, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2248      	movs	r2, #72	; 0x48
 800c968:	5499      	strb	r1, [r3, r2]
 800c96a:	e073      	b.n	800ca54 <updateVCaptor+0x158>
	}
	else
	{
		vc->counter = 0 ;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2248      	movs	r2, #72	; 0x48
 800c970:	2100      	movs	r1, #0
 800c972:	5499      	strb	r1, [r3, r2]
		uint8_t agg = 0 ;
 800c974:	2317      	movs	r3, #23
 800c976:	18fb      	adds	r3, r7, r3
 800c978:	2200      	movs	r2, #0
 800c97a:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < NUMMEASURES ; i++)
 800c97c:	2300      	movs	r3, #0
 800c97e:	613b      	str	r3, [r7, #16]
 800c980:	e00d      	b.n	800c99e <updateVCaptor+0xa2>
		{
			agg += vc->lastMeasures[i] ;
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	18d3      	adds	r3, r2, r3
 800c988:	3302      	adds	r3, #2
 800c98a:	7819      	ldrb	r1, [r3, #0]
 800c98c:	2217      	movs	r2, #23
 800c98e:	18bb      	adds	r3, r7, r2
 800c990:	18ba      	adds	r2, r7, r2
 800c992:	7812      	ldrb	r2, [r2, #0]
 800c994:	188a      	adds	r2, r1, r2
 800c996:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < NUMMEASURES ; i++)
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	3301      	adds	r3, #1
 800c99c:	613b      	str	r3, [r7, #16]
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	2b04      	cmp	r3, #4
 800c9a2:	ddee      	ble.n	800c982 <updateVCaptor+0x86>
		}
		if(agg <= 1)
 800c9a4:	2317      	movs	r3, #23
 800c9a6:	18fb      	adds	r3, r7, r3
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d826      	bhi.n	800c9fc <updateVCaptor+0x100>
		{
			if(vc->lastAggMeasure == 1)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	79db      	ldrb	r3, [r3, #7]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d11f      	bne.n	800c9f6 <updateVCaptor+0xfa>
				{
					vc->nbTour += 1 ;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	635a      	str	r2, [r3, #52]	; 0x34
					if(vc->mot->sense == SENSE_UP) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9c4:	7b1b      	ldrb	r3, [r3, #12]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d108      	bne.n	800c9dc <updateVCaptor+0xe0>
						vc->target_currTour += 1 ;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	224a      	movs	r2, #74	; 0x4a
 800c9ce:	5a9b      	ldrh	r3, [r3, r2]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	b299      	uxth	r1, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	224a      	movs	r2, #74	; 0x4a
 800c9d8:	5299      	strh	r1, [r3, r2]
 800c9da:	e00c      	b.n	800c9f6 <updateVCaptor+0xfa>
					} else {
						if(vc->target_currTour > 0)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	224a      	movs	r2, #74	; 0x4a
 800c9e0:	5a9b      	ldrh	r3, [r3, r2]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d007      	beq.n	800c9f6 <updateVCaptor+0xfa>
							vc-> target_currTour -= 1 ;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	224a      	movs	r2, #74	; 0x4a
 800c9ea:	5a9b      	ldrh	r3, [r3, r2]
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	b299      	uxth	r1, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	224a      	movs	r2, #74	; 0x4a
 800c9f4:	5299      	strh	r1, [r3, r2]
					}
				}
			vc->lastAggMeasure = 0 ;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	71da      	strb	r2, [r3, #7]
		}
		if(agg >= NUMMEASURES-1)
 800c9fc:	2317      	movs	r3, #23
 800c9fe:	18fb      	adds	r3, r7, r3
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	2b03      	cmp	r3, #3
 800ca04:	d926      	bls.n	800ca54 <updateVCaptor+0x158>
		{
			if(vc->lastAggMeasure == 0)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	79db      	ldrb	r3, [r3, #7]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d11f      	bne.n	800ca4e <updateVCaptor+0x152>
				{
					vc->nbTour += 1 ;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca12:	1c5a      	adds	r2, r3, #1
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	635a      	str	r2, [r3, #52]	; 0x34
					if(vc->mot->sense == SENSE_UP) {
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca1c:	7b1b      	ldrb	r3, [r3, #12]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d108      	bne.n	800ca34 <updateVCaptor+0x138>
						vc->target_currTour += 1 ;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	224a      	movs	r2, #74	; 0x4a
 800ca26:	5a9b      	ldrh	r3, [r3, r2]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	b299      	uxth	r1, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	224a      	movs	r2, #74	; 0x4a
 800ca30:	5299      	strh	r1, [r3, r2]
 800ca32:	e00c      	b.n	800ca4e <updateVCaptor+0x152>
					} else {
						if(vc->target_currTour > 0)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	224a      	movs	r2, #74	; 0x4a
 800ca38:	5a9b      	ldrh	r3, [r3, r2]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d007      	beq.n	800ca4e <updateVCaptor+0x152>
							vc-> target_currTour -= 1 ;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	224a      	movs	r2, #74	; 0x4a
 800ca42:	5a9b      	ldrh	r3, [r3, r2]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	b299      	uxth	r1, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	224a      	movs	r2, #74	; 0x4a
 800ca4c:	5299      	strh	r1, [r3, r2]
					}
				}
			vc->lastAggMeasure = 1 ;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2201      	movs	r2, #1
 800ca52:	71da      	strb	r2, [r3, #7]
		}
	}
	if(( vc->nbTour - vc->lastNbTour >= 4))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d90c      	bls.n	800ca7c <updateVCaptor+0x180>
		{
			updateVSpeed(vc, time_us) ;
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	0011      	movs	r1, r2
 800ca68:	0018      	movs	r0, r3
 800ca6a:	f000 f80b 	bl	800ca84 <updateVSpeed>
			vc->t1_i = time_us ;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	639a      	str	r2, [r3, #56]	; 0x38
			vc->lastNbTour = vc->nbTour;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	63da      	str	r2, [r3, #60]	; 0x3c
		}
}
 800ca7c:	46c0      	nop			; (mov r8, r8)
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	b007      	add	sp, #28
 800ca82:	bd90      	pop	{r4, r7, pc}

0800ca84 <updateVSpeed>:
void updateVSpeed(VCaptor* vc, uint32_t time_us)
{
 800ca84:	b590      	push	{r4, r7, lr}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
	vc->speeds[vc->iSpeed] = ((float)(vc->nbTour - vc->lastNbTour)/(float)(time_us-vc->t1_i))*1000000 ;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	0018      	movs	r0, r3
 800ca9a:	f7f4 fbcb 	bl	8001234 <__aeabi_ui2f>
 800ca9e:	1c04      	adds	r4, r0, #0
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	1ad3      	subs	r3, r2, r3
 800caa8:	0018      	movs	r0, r3
 800caaa:	f7f4 fbc3 	bl	8001234 <__aeabi_ui2f>
 800caae:	1c03      	adds	r3, r0, #0
 800cab0:	1c19      	adds	r1, r3, #0
 800cab2:	1c20      	adds	r0, r4, #0
 800cab4:	f7f3 fe86 	bl	80007c4 <__aeabi_fdiv>
 800cab8:	1c03      	adds	r3, r0, #0
 800caba:	1c18      	adds	r0, r3, #0
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2220      	movs	r2, #32
 800cac0:	5c9b      	ldrb	r3, [r3, r2]
 800cac2:	001c      	movs	r4, r3
 800cac4:	4911      	ldr	r1, [pc, #68]	; (800cb0c <updateVSpeed+0x88>)
 800cac6:	f7f4 f855 	bl	8000b74 <__aeabi_fmul>
 800caca:	1c03      	adds	r3, r0, #0
 800cacc:	1c19      	adds	r1, r3, #0
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	1ca2      	adds	r2, r4, #2
 800cad2:	0092      	lsls	r2, r2, #2
 800cad4:	50d1      	str	r1, [r2, r3]
	if(vc->iSpeed < NUMSPEEDS-1)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2220      	movs	r2, #32
 800cada:	5c9b      	ldrb	r3, [r3, r2]
 800cadc:	2b04      	cmp	r3, #4
 800cade:	d808      	bhi.n	800caf2 <updateVSpeed+0x6e>
		vc->iSpeed ++ ;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2220      	movs	r2, #32
 800cae4:	5c9b      	ldrb	r3, [r3, r2]
 800cae6:	3301      	adds	r3, #1
 800cae8:	b2d9      	uxtb	r1, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2220      	movs	r2, #32
 800caee:	5499      	strb	r1, [r3, r2]
	else
		{
			vc->iSpeed = 0 ;
			vc->calib_update = 1 ;
		}
}
 800caf0:	e007      	b.n	800cb02 <updateVSpeed+0x7e>
			vc->iSpeed = 0 ;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2220      	movs	r2, #32
 800caf6:	2100      	movs	r1, #0
 800caf8:	5499      	strb	r1, [r3, r2]
			vc->calib_update = 1 ;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2222      	movs	r2, #34	; 0x22
 800cafe:	2101      	movs	r1, #1
 800cb00:	5499      	strb	r1, [r3, r2]
}
 800cb02:	46c0      	nop			; (mov r8, r8)
 800cb04:	46bd      	mov	sp, r7
 800cb06:	b003      	add	sp, #12
 800cb08:	bd90      	pop	{r4, r7, pc}
 800cb0a:	46c0      	nop			; (mov r8, r8)
 800cb0c:	49742400 	.word	0x49742400

0800cb10 <getAverageSpeed>:
float getAverageSpeed (VCaptor* vc)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
	float av = 0 ;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i < NUMSPEEDS ; i++)
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	60bb      	str	r3, [r7, #8]
 800cb20:	e00d      	b.n	800cb3e <getAverageSpeed+0x2e>
	{
		av += vc->speeds[i] ;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	3202      	adds	r2, #2
 800cb28:	0092      	lsls	r2, r2, #2
 800cb2a:	58d3      	ldr	r3, [r2, r3]
 800cb2c:	1c19      	adds	r1, r3, #0
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f7f3 fcae 	bl	8000490 <__aeabi_fadd>
 800cb34:	1c03      	adds	r3, r0, #0
 800cb36:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i < NUMSPEEDS ; i++)
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	60bb      	str	r3, [r7, #8]
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	2b05      	cmp	r3, #5
 800cb42:	ddee      	ble.n	800cb22 <getAverageSpeed+0x12>
	}
	av /= NUMSPEEDS ;
 800cb44:	4905      	ldr	r1, [pc, #20]	; (800cb5c <getAverageSpeed+0x4c>)
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f7f3 fe3c 	bl	80007c4 <__aeabi_fdiv>
 800cb4c:	1c03      	adds	r3, r0, #0
 800cb4e:	60fb      	str	r3, [r7, #12]
	return av ;
 800cb50:	68fb      	ldr	r3, [r7, #12]
}
 800cb52:	1c18      	adds	r0, r3, #0
 800cb54:	46bd      	mov	sp, r7
 800cb56:	b004      	add	sp, #16
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	46c0      	nop			; (mov r8, r8)
 800cb5c:	40c00000 	.word	0x40c00000

0800cb60 <resetSpeedData>:

void resetSpeedData(VCaptor* vc)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
	for(int i = 0 ; i < NUMSPEEDS ; i++)
 800cb68:	2300      	movs	r3, #0
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	e008      	b.n	800cb80 <resetSpeedData+0x20>
	{
		vc->speeds[i] = 0 ;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	3202      	adds	r2, #2
 800cb74:	0092      	lsls	r2, r2, #2
 800cb76:	2100      	movs	r1, #0
 800cb78:	50d1      	str	r1, [r2, r3]
	for(int i = 0 ; i < NUMSPEEDS ; i++)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	60fb      	str	r3, [r7, #12]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2b05      	cmp	r3, #5
 800cb84:	ddf3      	ble.n	800cb6e <resetSpeedData+0xe>
	}
	vc->iSpeed = 0 ;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2220      	movs	r2, #32
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	5499      	strb	r1, [r3, r2]
	vc->calib_update = 0 ;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2222      	movs	r2, #34	; 0x22
 800cb92:	2100      	movs	r1, #0
 800cb94:	5499      	strb	r1, [r3, r2]

}
 800cb96:	46c0      	nop			; (mov r8, r8)
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	b004      	add	sp, #16
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <standardInitVCaptor>:

void standardInitVCaptor(VCaptor* vc)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b084      	sub	sp, #16
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
	vc->measuring = 0 ;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	705a      	strb	r2, [r3, #1]

	vc->nbTour = 0 ;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	635a      	str	r2, [r3, #52]	; 0x34
	vc->lastNbTour = 0 ;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	63da      	str	r2, [r3, #60]	; 0x3c
	for(int i = 0 ; i < NUMMEASURES ; i++){
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	e008      	b.n	800cbd0 <standardInitVCaptor+0x32>
		vc->lastMeasures[i] = 0 ;
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	18d3      	adds	r3, r2, r3
 800cbc4:	3302      	adds	r3, #2
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < NUMMEASURES ; i++){
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	60fb      	str	r3, [r7, #12]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2b04      	cmp	r3, #4
 800cbd4:	ddf3      	ble.n	800cbbe <standardInitVCaptor+0x20>
	}
	for(int i = 0 ; i < NUMSPEEDS ; i++) {
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	60bb      	str	r3, [r7, #8]
 800cbda:	e008      	b.n	800cbee <standardInitVCaptor+0x50>
		vc->speeds[i] = 0 ;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	68ba      	ldr	r2, [r7, #8]
 800cbe0:	3202      	adds	r2, #2
 800cbe2:	0092      	lsls	r2, r2, #2
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	50d1      	str	r1, [r2, r3]
	for(int i = 0 ; i < NUMSPEEDS ; i++) {
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	3301      	adds	r3, #1
 800cbec:	60bb      	str	r3, [r7, #8]
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b05      	cmp	r3, #5
 800cbf2:	ddf3      	ble.n	800cbdc <standardInitVCaptor+0x3e>
	}
	vc->iSpeed = 0 ;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2220      	movs	r2, #32
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	5499      	strb	r1, [r3, r2]
	vc->t1_i = 0 ;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	639a      	str	r2, [r3, #56]	; 0x38
	vc->update = 0;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2240      	movs	r2, #64	; 0x40
 800cc06:	2100      	movs	r1, #0
 800cc08:	5499      	strb	r1, [r3, r2]
	vc->counter = 0 ;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2248      	movs	r2, #72	; 0x48
 800cc0e:	2100      	movs	r1, #0
 800cc10:	5499      	strb	r1, [r3, r2]
	vc->lastAggMeasure = 0 ;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	71da      	strb	r2, [r3, #7]

	vc->calib_update = 0 ;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2222      	movs	r2, #34	; 0x22
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	5499      	strb	r1, [r3, r2]
	vc->calib_start = 0 ;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2223      	movs	r2, #35	; 0x23
 800cc24:	2100      	movs	r1, #0
 800cc26:	5499      	strb	r1, [r3, r2]
	vc->calib_delta = 28 ;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2224      	movs	r2, #36	; 0x24
 800cc2c:	211c      	movs	r1, #28
 800cc2e:	5499      	strb	r1, [r3, r2]
	vc->calib_id = 0 ;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2225      	movs	r2, #37	; 0x25
 800cc34:	2100      	movs	r1, #0
 800cc36:	5499      	strb	r1, [r3, r2]
	vc->tSpeed = 0 ;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	629a      	str	r2, [r3, #40]	; 0x28
	vc->mode = CAPTOR_MODE_IDLE ;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2221      	movs	r2, #33	; 0x21
 800cc42:	2100      	movs	r1, #0
 800cc44:	5499      	strb	r1, [r3, r2]

	vc->target_tTour = 0 ;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	224c      	movs	r2, #76	; 0x4c
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	5299      	strh	r1, [r3, r2]
	vc->target_currTour = 0 ;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	224a      	movs	r2, #74	; 0x4a
 800cc52:	2100      	movs	r1, #0
 800cc54:	5299      	strh	r1, [r3, r2]

	vc->proc_token = 0 ;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	224e      	movs	r2, #78	; 0x4e
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	5499      	strb	r1, [r3, r2]
	vc->time_token = 0 ;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	651a      	str	r2, [r3, #80]	; 0x50
}
 800cc64:	46c0      	nop			; (mov r8, r8)
 800cc66:	46bd      	mov	sp, r7
 800cc68:	b004      	add	sp, #16
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <startMeasure>:

void startMeasure(VCaptor* vc)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
	if(vc->measuring == 0)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	785b      	ldrb	r3, [r3, #1]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d102      	bne.n	800cc82 <startMeasure+0x16>
		vc->measuring = 1 ;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	705a      	strb	r2, [r3, #1]
}
 800cc82:	46c0      	nop			; (mov r8, r8)
 800cc84:	46bd      	mov	sp, r7
 800cc86:	b002      	add	sp, #8
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <startTargeting>:

void startTargeting(VCaptor* vc, uint16_t tTour)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b082      	sub	sp, #8
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	000a      	movs	r2, r1
 800cc94:	1cbb      	adds	r3, r7, #2
 800cc96:	801a      	strh	r2, [r3, #0]
	vc->target_tTour = tTour ;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	1cba      	adds	r2, r7, #2
 800cc9c:	214c      	movs	r1, #76	; 0x4c
 800cc9e:	8812      	ldrh	r2, [r2, #0]
 800cca0:	525a      	strh	r2, [r3, r1]
	vc->mode = CAPTOR_MODE_TARGET ;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2221      	movs	r2, #33	; 0x21
 800cca6:	210a      	movs	r1, #10
 800cca8:	5499      	strb	r1, [r3, r2]
	if(vc->target_currTour > vc->target_tTour )
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	224a      	movs	r2, #74	; 0x4a
 800ccae:	5a9a      	ldrh	r2, [r3, r2]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	214c      	movs	r1, #76	; 0x4c
 800ccb4:	5a5b      	ldrh	r3, [r3, r1]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d90f      	bls.n	800ccda <startTargeting+0x50>
	{
		setMotorTSense(vc->mot, SENSE_DOWN) ;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	0018      	movs	r0, r3
 800ccc2:	f7fe fb68 	bl	800b396 <setMotorTSense>
		setMotorTPower(vc->mot, vc->mot->sPowers[1]) ;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccce:	891b      	ldrh	r3, [r3, #8]
 800ccd0:	0019      	movs	r1, r3
 800ccd2:	0010      	movs	r0, r2
 800ccd4:	f7fe fab6 	bl	800b244 <setMotorTPower>
	else if (vc->target_currTour < vc->target_tTour )
	{
		setMotorTSense(vc->mot, SENSE_UP) ;
		setMotorTPower(vc->mot, vc->mot->sPowers[0]) ;
	}
}
 800ccd8:	e016      	b.n	800cd08 <startTargeting+0x7e>
	else if (vc->target_currTour < vc->target_tTour )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	224a      	movs	r2, #74	; 0x4a
 800ccde:	5a9a      	ldrh	r2, [r3, r2]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	214c      	movs	r1, #76	; 0x4c
 800cce4:	5a5b      	ldrh	r3, [r3, r1]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d20e      	bcs.n	800cd08 <startTargeting+0x7e>
		setMotorTSense(vc->mot, SENSE_UP) ;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccee:	2101      	movs	r1, #1
 800ccf0:	0018      	movs	r0, r3
 800ccf2:	f7fe fb50 	bl	800b396 <setMotorTSense>
		setMotorTPower(vc->mot, vc->mot->sPowers[0]) ;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccfe:	88db      	ldrh	r3, [r3, #6]
 800cd00:	0019      	movs	r1, r3
 800cd02:	0010      	movs	r0, r2
 800cd04:	f7fe fa9e 	bl	800b244 <setMotorTPower>
}
 800cd08:	46c0      	nop			; (mov r8, r8)
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	b002      	add	sp, #8
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <reachPosition>:

void reachPosition(VCaptor* vc, float speed)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]

	if((vc->target_currTour >= vc->target_tTour && vc->mot->tsense == SENSE_UP)||(vc->target_currTour <= vc->target_tTour && vc->mot->tsense == SENSE_DOWN))
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	224a      	movs	r2, #74	; 0x4a
 800cd1e:	5a9a      	ldrh	r2, [r3, r2]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	214c      	movs	r1, #76	; 0x4c
 800cd24:	5a5b      	ldrh	r3, [r3, r1]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d304      	bcc.n	800cd34 <reachPosition+0x24>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd2e:	7b5b      	ldrb	r3, [r3, #13]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d00c      	beq.n	800cd4e <reachPosition+0x3e>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	224a      	movs	r2, #74	; 0x4a
 800cd38:	5a9a      	ldrh	r2, [r3, r2]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	214c      	movs	r1, #76	; 0x4c
 800cd3e:	5a5b      	ldrh	r3, [r3, r1]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d812      	bhi.n	800cd6a <reachPosition+0x5a>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd48:	7b5b      	ldrb	r3, [r3, #13]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d10d      	bne.n	800cd6a <reachPosition+0x5a>
	{
		setMotorTPower(vc->mot, 0) ;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd52:	2100      	movs	r1, #0
 800cd54:	0018      	movs	r0, r3
 800cd56:	f7fe fa75 	bl	800b244 <setMotorTPower>
		vc->mode = CAPTOR_MODE_IDLE ;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2221      	movs	r2, #33	; 0x21
 800cd5e:	2100      	movs	r1, #0
 800cd60:	5499      	strb	r1, [r3, r2]
		resetSpeedData(vc) ;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	0018      	movs	r0, r3
 800cd66:	f7ff fefb 	bl	800cb60 <resetSpeedData>
	}
}
 800cd6a:	46c0      	nop			; (mov r8, r8)
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	b002      	add	sp, #8
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <startResetPosition>:

void startResetPosition(VCaptor* vc)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b082      	sub	sp, #8
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
	vc->proc_token = 0 ;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	224e      	movs	r2, #78	; 0x4e
 800cd7e:	2100      	movs	r1, #0
 800cd80:	5499      	strb	r1, [r3, r2]
	vc->mode = CAPTOR_MODE_TARGET_RESET ;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2221      	movs	r2, #33	; 0x21
 800cd86:	210b      	movs	r1, #11
 800cd88:	5499      	strb	r1, [r3, r2]
}
 800cd8a:	46c0      	nop			; (mov r8, r8)
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	b002      	add	sp, #8
 800cd90:	bd80      	pop	{r7, pc}
	...

0800cd94 <resetPosition>:

void resetPosition(VCaptor* vc, uint32_t time_us)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
	if(vc->proc_token == 0)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	224e      	movs	r2, #78	; 0x4e
 800cda2:	5c9b      	ldrb	r3, [r3, r2]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d112      	bne.n	800cdce <resetPosition+0x3a>
		{
			setMotorTPower(vc->mot, 100) ;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdac:	2164      	movs	r1, #100	; 0x64
 800cdae:	0018      	movs	r0, r3
 800cdb0:	f7fe fa48 	bl	800b244 <setMotorTPower>
			setMotorTSense(vc->mot, SENSE_DOWN) ;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdb8:	2100      	movs	r1, #0
 800cdba:	0018      	movs	r0, r3
 800cdbc:	f7fe faeb 	bl	800b396 <setMotorTSense>
			vc->proc_token = 1 ;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	224e      	movs	r2, #78	; 0x4e
 800cdc4:	2101      	movs	r1, #1
 800cdc6:	5499      	strb	r1, [r3, r2]
			vc->time_token = time_us ;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	651a      	str	r2, [r3, #80]	; 0x50
		}
	if(vc->proc_token == 1 && time_us - vc->time_token >= 5000000)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	224e      	movs	r2, #78	; 0x4e
 800cdd2:	5c9b      	ldrb	r3, [r3, r2]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d121      	bne.n	800ce1c <resetPosition+0x88>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	1ad3      	subs	r3, r2, r3
 800cde0:	4a10      	ldr	r2, [pc, #64]	; (800ce24 <resetPosition+0x90>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d91a      	bls.n	800ce1c <resetPosition+0x88>
	{
		setMotorTPower(vc->mot, 0) ;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdea:	2100      	movs	r1, #0
 800cdec:	0018      	movs	r0, r3
 800cdee:	f7fe fa29 	bl	800b244 <setMotorTPower>
		vc->proc_token = 0 ;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	224e      	movs	r2, #78	; 0x4e
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	5499      	strb	r1, [r3, r2]
		vc->target_currTour = 0 ;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	224a      	movs	r2, #74	; 0x4a
 800cdfe:	2100      	movs	r1, #0
 800ce00:	5299      	strh	r1, [r3, r2]
		resetSpeedData(vc) ;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	0018      	movs	r0, r3
 800ce06:	f7ff feab 	bl	800cb60 <resetSpeedData>
		vc->mode = CAPTOR_MODE_IDLE ;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2221      	movs	r2, #33	; 0x21
 800ce0e:	2100      	movs	r1, #0
 800ce10:	5499      	strb	r1, [r3, r2]
		vc->mot->trans.state = STATE_LEFT ;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce16:	227d      	movs	r2, #125	; 0x7d
 800ce18:	2104      	movs	r1, #4
 800ce1a:	5499      	strb	r1, [r3, r2]
	}
}
 800ce1c:	46c0      	nop			; (mov r8, r8)
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	b002      	add	sp, #8
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	004c4b3f 	.word	0x004c4b3f

0800ce28 <autoCalibrate>:
	vc->calib_update = 0 ;
	vc->mode = CAPTOR_MODE_CALIB ;
}

void autoCalibrate (VCaptor* vc)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
	if(vc->calib_delta > 0 )
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2224      	movs	r2, #36	; 0x24
 800ce34:	5c9b      	ldrb	r3, [r3, r2]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d100      	bne.n	800ce3c <autoCalibrate+0x14>
 800ce3a:	e081      	b.n	800cf40 <autoCalibrate+0x118>
	{
		if(vc->calib_update > 0)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2222      	movs	r2, #34	; 0x22
 800ce40:	5c9b      	ldrb	r3, [r3, r2]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d100      	bne.n	800ce48 <autoCalibrate+0x20>
 800ce46:	e07b      	b.n	800cf40 <autoCalibrate+0x118>
		{
			Motor* m = vc->mot ;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce4c:	60fb      	str	r3, [r7, #12]
			float cSpeed = getAverageSpeed(vc) ;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	0018      	movs	r0, r3
 800ce52:	f7ff fe5d 	bl	800cb10 <getAverageSpeed>
 800ce56:	1c03      	adds	r3, r0, #0
 800ce58:	60bb      	str	r3, [r7, #8]
			if (cSpeed > vc->tSpeed)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5e:	1c19      	adds	r1, r3, #0
 800ce60:	68b8      	ldr	r0, [r7, #8]
 800ce62:	f7f3 fae9 	bl	8000438 <__aeabi_fcmpgt>
 800ce66:	1e03      	subs	r3, r0, #0
 800ce68:	d01f      	beq.n	800ceaa <autoCalibrate+0x82>
				{
					m->sPowers[vc->calib_id] = vc->calib_start - vc->calib_delta;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2223      	movs	r2, #35	; 0x23
 800ce6e:	5c9b      	ldrb	r3, [r3, r2]
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2124      	movs	r1, #36	; 0x24
 800ce76:	5c5b      	ldrb	r3, [r3, r1]
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	6879      	ldr	r1, [r7, #4]
 800ce7c:	2025      	movs	r0, #37	; 0x25
 800ce7e:	5c09      	ldrb	r1, [r1, r0]
 800ce80:	0008      	movs	r0, r1
 800ce82:	1ad3      	subs	r3, r2, r3
 800ce84:	b299      	uxth	r1, r3
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	0043      	lsls	r3, r0, #1
 800ce8a:	18d3      	adds	r3, r2, r3
 800ce8c:	3306      	adds	r3, #6
 800ce8e:	1c0a      	adds	r2, r1, #0
 800ce90:	801a      	strh	r2, [r3, #0]
					vc->calib_start = vc->calib_start - vc->calib_delta ;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2223      	movs	r2, #35	; 0x23
 800ce96:	5c9a      	ldrb	r2, [r3, r2]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2124      	movs	r1, #36	; 0x24
 800ce9c:	5c5b      	ldrb	r3, [r3, r1]
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	b2d9      	uxtb	r1, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2223      	movs	r2, #35	; 0x23
 800cea6:	5499      	strb	r1, [r3, r2]
 800cea8:	e01e      	b.n	800cee8 <autoCalibrate+0xc0>
				}
			else
				{
					m->sPowers[vc->calib_id] = vc->calib_start + vc->calib_delta ;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2223      	movs	r2, #35	; 0x23
 800ceae:	5c9b      	ldrb	r3, [r3, r2]
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2124      	movs	r1, #36	; 0x24
 800ceb6:	5c5b      	ldrb	r3, [r3, r1]
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	6879      	ldr	r1, [r7, #4]
 800cebc:	2025      	movs	r0, #37	; 0x25
 800cebe:	5c09      	ldrb	r1, [r1, r0]
 800cec0:	0008      	movs	r0, r1
 800cec2:	18d3      	adds	r3, r2, r3
 800cec4:	b299      	uxth	r1, r3
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	0043      	lsls	r3, r0, #1
 800ceca:	18d3      	adds	r3, r2, r3
 800cecc:	3306      	adds	r3, #6
 800cece:	1c0a      	adds	r2, r1, #0
 800ced0:	801a      	strh	r2, [r3, #0]
					vc->calib_start = vc->calib_start + vc->calib_delta ;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2223      	movs	r2, #35	; 0x23
 800ced6:	5c9a      	ldrb	r2, [r3, r2]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2124      	movs	r1, #36	; 0x24
 800cedc:	5c5b      	ldrb	r3, [r3, r1]
 800cede:	18d3      	adds	r3, r2, r3
 800cee0:	b2d9      	uxtb	r1, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2223      	movs	r2, #35	; 0x23
 800cee6:	5499      	strb	r1, [r3, r2]
				}
			vc->calib_delta = vc->calib_delta >> 1 ;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2224      	movs	r2, #36	; 0x24
 800ceec:	5c9b      	ldrb	r3, [r3, r2]
 800ceee:	085b      	lsrs	r3, r3, #1
 800cef0:	b2d9      	uxtb	r1, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2224      	movs	r2, #36	; 0x24
 800cef6:	5499      	strb	r1, [r3, r2]
			setMotorTPower(m, m->sPowers[vc->calib_id]) ;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2225      	movs	r2, #37	; 0x25
 800cefc:	5c9b      	ldrb	r3, [r3, r2]
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	18d3      	adds	r3, r2, r3
 800cf04:	3306      	adds	r3, #6
 800cf06:	881a      	ldrh	r2, [r3, #0]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	0011      	movs	r1, r2
 800cf0c:	0018      	movs	r0, r3
 800cf0e:	f7fe f999 	bl	800b244 <setMotorTPower>
			vc->calib_update = 0 ;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2222      	movs	r2, #34	; 0x22
 800cf16:	2100      	movs	r1, #0
 800cf18:	5499      	strb	r1, [r3, r2]
			if(vc->calib_delta == 0)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2224      	movs	r2, #36	; 0x24
 800cf1e:	5c9b      	ldrb	r3, [r3, r2]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10d      	bne.n	800cf40 <autoCalibrate+0x118>
				{
					vc->mode = CAPTOR_MODE_IDLE ;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2221      	movs	r2, #33	; 0x21
 800cf28:	2100      	movs	r1, #0
 800cf2a:	5499      	strb	r1, [r3, r2]
					resetSpeedData(vc) ;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	0018      	movs	r0, r3
 800cf30:	f7ff fe16 	bl	800cb60 <resetSpeedData>
					//flash_page_erase(62) ;
//					flash_write(0x0801F060, (uint64_t)m->sPowers[id]) ;
					//uint64_t l = flash_read(0x0801F060) ;
					//l= l ;
					setMotorTPower(vc->mot, 0) ;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf38:	2100      	movs	r1, #0
 800cf3a:	0018      	movs	r0, r3
 800cf3c:	f7fe f982 	bl	800b244 <setMotorTPower>
				}
		}
	}
}
 800cf40:	46c0      	nop			; (mov r8, r8)
 800cf42:	46bd      	mov	sp, r7
 800cf44:	b004      	add	sp, #16
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <keepTSpeed>:

void keepTSpeed(VCaptor* vc, float tSpeed)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b086      	sub	sp, #24
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
	if(vc->calib_update > 0)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2222      	movs	r2, #34	; 0x22
 800cf56:	5c9b      	ldrb	r3, [r3, r2]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d100      	bne.n	800cf5e <keepTSpeed+0x16>
 800cf5c:	e073      	b.n	800d046 <keepTSpeed+0xfe>
	{
		float cSpeed = getAverageSpeed(vc) ;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	0018      	movs	r0, r3
 800cf62:	f7ff fdd5 	bl	800cb10 <getAverageSpeed>
 800cf66:	1c03      	adds	r3, r0, #0
 800cf68:	613b      	str	r3, [r7, #16]
		Motor* m = vc->mot ;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf6e:	60fb      	str	r3, [r7, #12]
		float k = 0.3 ;
 800cf70:	4b37      	ldr	r3, [pc, #220]	; (800d050 <keepTSpeed+0x108>)
 800cf72:	60bb      	str	r3, [r7, #8]
		uint16_t power = m->tpower ;
 800cf74:	2316      	movs	r3, #22
 800cf76:	18fb      	adds	r3, r7, r3
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	8892      	ldrh	r2, [r2, #4]
 800cf7c:	801a      	strh	r2, [r3, #0]
		if(cSpeed < tSpeed)
 800cf7e:	6839      	ldr	r1, [r7, #0]
 800cf80:	6938      	ldr	r0, [r7, #16]
 800cf82:	f7f3 fa45 	bl	8000410 <__aeabi_fcmplt>
 800cf86:	1e03      	subs	r3, r0, #0
 800cf88:	d014      	beq.n	800cfb4 <keepTSpeed+0x6c>
			power += (uint16_t)(k*(tSpeed-cSpeed)) ;
 800cf8a:	6939      	ldr	r1, [r7, #16]
 800cf8c:	6838      	ldr	r0, [r7, #0]
 800cf8e:	f7f3 ff23 	bl	8000dd8 <__aeabi_fsub>
 800cf92:	1c03      	adds	r3, r0, #0
 800cf94:	68b9      	ldr	r1, [r7, #8]
 800cf96:	1c18      	adds	r0, r3, #0
 800cf98:	f7f3 fdec 	bl	8000b74 <__aeabi_fmul>
 800cf9c:	1c03      	adds	r3, r0, #0
 800cf9e:	1c18      	adds	r0, r3, #0
 800cfa0:	f7f3 fa5e 	bl	8000460 <__aeabi_f2uiz>
 800cfa4:	0003      	movs	r3, r0
 800cfa6:	b299      	uxth	r1, r3
 800cfa8:	2216      	movs	r2, #22
 800cfaa:	18bb      	adds	r3, r7, r2
 800cfac:	18ba      	adds	r2, r7, r2
 800cfae:	8812      	ldrh	r2, [r2, #0]
 800cfb0:	188a      	adds	r2, r1, r2
 800cfb2:	801a      	strh	r2, [r3, #0]
		if(power > 100)
 800cfb4:	2316      	movs	r3, #22
 800cfb6:	18fb      	adds	r3, r7, r3
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	2b64      	cmp	r3, #100	; 0x64
 800cfbc:	d903      	bls.n	800cfc6 <keepTSpeed+0x7e>
			power = 100 ;
 800cfbe:	2316      	movs	r3, #22
 800cfc0:	18fb      	adds	r3, r7, r3
 800cfc2:	2264      	movs	r2, #100	; 0x64
 800cfc4:	801a      	strh	r2, [r3, #0]
		if(cSpeed > tSpeed)
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6938      	ldr	r0, [r7, #16]
 800cfca:	f7f3 fa35 	bl	8000438 <__aeabi_fcmpgt>
 800cfce:	1e03      	subs	r3, r0, #0
 800cfd0:	d02d      	beq.n	800d02e <keepTSpeed+0xe6>
			{
			if(((uint16_t)(k*(cSpeed-tSpeed)))> power)
 800cfd2:	6839      	ldr	r1, [r7, #0]
 800cfd4:	6938      	ldr	r0, [r7, #16]
 800cfd6:	f7f3 feff 	bl	8000dd8 <__aeabi_fsub>
 800cfda:	1c03      	adds	r3, r0, #0
 800cfdc:	68b9      	ldr	r1, [r7, #8]
 800cfde:	1c18      	adds	r0, r3, #0
 800cfe0:	f7f3 fdc8 	bl	8000b74 <__aeabi_fmul>
 800cfe4:	1c03      	adds	r3, r0, #0
 800cfe6:	1c18      	adds	r0, r3, #0
 800cfe8:	f7f3 fa3a 	bl	8000460 <__aeabi_f2uiz>
 800cfec:	0003      	movs	r3, r0
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	2216      	movs	r2, #22
 800cff2:	18ba      	adds	r2, r7, r2
 800cff4:	8812      	ldrh	r2, [r2, #0]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d204      	bcs.n	800d004 <keepTSpeed+0xbc>
					power = 0 ;
 800cffa:	2316      	movs	r3, #22
 800cffc:	18fb      	adds	r3, r7, r3
 800cffe:	2200      	movs	r2, #0
 800d000:	801a      	strh	r2, [r3, #0]
 800d002:	e014      	b.n	800d02e <keepTSpeed+0xe6>
			else power -= (uint16_t)(k*(cSpeed-tSpeed)) ;
 800d004:	6839      	ldr	r1, [r7, #0]
 800d006:	6938      	ldr	r0, [r7, #16]
 800d008:	f7f3 fee6 	bl	8000dd8 <__aeabi_fsub>
 800d00c:	1c03      	adds	r3, r0, #0
 800d00e:	68b9      	ldr	r1, [r7, #8]
 800d010:	1c18      	adds	r0, r3, #0
 800d012:	f7f3 fdaf 	bl	8000b74 <__aeabi_fmul>
 800d016:	1c03      	adds	r3, r0, #0
 800d018:	1c18      	adds	r0, r3, #0
 800d01a:	f7f3 fa21 	bl	8000460 <__aeabi_f2uiz>
 800d01e:	0003      	movs	r3, r0
 800d020:	b29a      	uxth	r2, r3
 800d022:	2116      	movs	r1, #22
 800d024:	187b      	adds	r3, r7, r1
 800d026:	1879      	adds	r1, r7, r1
 800d028:	8809      	ldrh	r1, [r1, #0]
 800d02a:	1a8a      	subs	r2, r1, r2
 800d02c:	801a      	strh	r2, [r3, #0]
			}
		setMotorTPower(m, power) ;
 800d02e:	2316      	movs	r3, #22
 800d030:	18fb      	adds	r3, r7, r3
 800d032:	881a      	ldrh	r2, [r3, #0]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	0011      	movs	r1, r2
 800d038:	0018      	movs	r0, r3
 800d03a:	f7fe f903 	bl	800b244 <setMotorTPower>
		vc->calib_update = 0 ;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2222      	movs	r2, #34	; 0x22
 800d042:	2100      	movs	r1, #0
 800d044:	5499      	strb	r1, [r3, r2]
	}
}
 800d046:	46c0      	nop			; (mov r8, r8)
 800d048:	46bd      	mov	sp, r7
 800d04a:	b006      	add	sp, #24
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	46c0      	nop			; (mov r8, r8)
 800d050:	3e99999a 	.word	0x3e99999a

0800d054 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d054:	480d      	ldr	r0, [pc, #52]	; (800d08c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800d056:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d058:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d05a:	e003      	b.n	800d064 <LoopCopyDataInit>

0800d05c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d05c:	4b0c      	ldr	r3, [pc, #48]	; (800d090 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800d05e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d060:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d062:	3104      	adds	r1, #4

0800d064 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d064:	480b      	ldr	r0, [pc, #44]	; (800d094 <LoopForever+0xa>)
  ldr r3, =_edata
 800d066:	4b0c      	ldr	r3, [pc, #48]	; (800d098 <LoopForever+0xe>)
  adds r2, r0, r1
 800d068:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d06a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d06c:	d3f6      	bcc.n	800d05c <CopyDataInit>
  ldr r2, =_sbss
 800d06e:	4a0b      	ldr	r2, [pc, #44]	; (800d09c <LoopForever+0x12>)
  b LoopFillZerobss
 800d070:	e002      	b.n	800d078 <LoopFillZerobss>

0800d072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d072:	2300      	movs	r3, #0
  str  r3, [r2]
 800d074:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d076:	3204      	adds	r2, #4

0800d078 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d078:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <LoopForever+0x16>)
  cmp r2, r3
 800d07a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d07c:	d3f9      	bcc.n	800d072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d07e:	f7ff fc31 	bl	800c8e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d082:	f000 f811 	bl	800d0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d086:	f7fb fe6f 	bl	8008d68 <main>

0800d08a <LoopForever>:

LoopForever:
    b LoopForever
 800d08a:	e7fe      	b.n	800d08a <LoopForever>
  ldr   r0, =_estack
 800d08c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 800d090:	0800d2c8 	.word	0x0800d2c8
  ldr r0, =_sdata
 800d094:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d098:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800d09c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800d0a0:	20000fd0 	.word	0x20000fd0

0800d0a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d0a4:	e7fe      	b.n	800d0a4 <ADC1_IRQHandler>
	...

0800d0a8 <__libc_init_array>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	2600      	movs	r6, #0
 800d0ac:	4d0c      	ldr	r5, [pc, #48]	; (800d0e0 <__libc_init_array+0x38>)
 800d0ae:	4c0d      	ldr	r4, [pc, #52]	; (800d0e4 <__libc_init_array+0x3c>)
 800d0b0:	1b64      	subs	r4, r4, r5
 800d0b2:	10a4      	asrs	r4, r4, #2
 800d0b4:	42a6      	cmp	r6, r4
 800d0b6:	d109      	bne.n	800d0cc <__libc_init_array+0x24>
 800d0b8:	2600      	movs	r6, #0
 800d0ba:	f000 f82b 	bl	800d114 <_init>
 800d0be:	4d0a      	ldr	r5, [pc, #40]	; (800d0e8 <__libc_init_array+0x40>)
 800d0c0:	4c0a      	ldr	r4, [pc, #40]	; (800d0ec <__libc_init_array+0x44>)
 800d0c2:	1b64      	subs	r4, r4, r5
 800d0c4:	10a4      	asrs	r4, r4, #2
 800d0c6:	42a6      	cmp	r6, r4
 800d0c8:	d105      	bne.n	800d0d6 <__libc_init_array+0x2e>
 800d0ca:	bd70      	pop	{r4, r5, r6, pc}
 800d0cc:	00b3      	lsls	r3, r6, #2
 800d0ce:	58eb      	ldr	r3, [r5, r3]
 800d0d0:	4798      	blx	r3
 800d0d2:	3601      	adds	r6, #1
 800d0d4:	e7ee      	b.n	800d0b4 <__libc_init_array+0xc>
 800d0d6:	00b3      	lsls	r3, r6, #2
 800d0d8:	58eb      	ldr	r3, [r5, r3]
 800d0da:	4798      	blx	r3
 800d0dc:	3601      	adds	r6, #1
 800d0de:	e7f2      	b.n	800d0c6 <__libc_init_array+0x1e>
 800d0e0:	0800d2c0 	.word	0x0800d2c0
 800d0e4:	0800d2c0 	.word	0x0800d2c0
 800d0e8:	0800d2c0 	.word	0x0800d2c0
 800d0ec:	0800d2c4 	.word	0x0800d2c4

0800d0f0 <memcpy>:
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	b510      	push	{r4, lr}
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d100      	bne.n	800d0fa <memcpy+0xa>
 800d0f8:	bd10      	pop	{r4, pc}
 800d0fa:	5ccc      	ldrb	r4, [r1, r3]
 800d0fc:	54c4      	strb	r4, [r0, r3]
 800d0fe:	3301      	adds	r3, #1
 800d100:	e7f8      	b.n	800d0f4 <memcpy+0x4>

0800d102 <memset>:
 800d102:	0003      	movs	r3, r0
 800d104:	1812      	adds	r2, r2, r0
 800d106:	4293      	cmp	r3, r2
 800d108:	d100      	bne.n	800d10c <memset+0xa>
 800d10a:	4770      	bx	lr
 800d10c:	7019      	strb	r1, [r3, #0]
 800d10e:	3301      	adds	r3, #1
 800d110:	e7f9      	b.n	800d106 <memset+0x4>
	...

0800d114 <_init>:
 800d114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d116:	46c0      	nop			; (mov r8, r8)
 800d118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d11a:	bc08      	pop	{r3}
 800d11c:	469e      	mov	lr, r3
 800d11e:	4770      	bx	lr

0800d120 <_fini>:
 800d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d122:	46c0      	nop			; (mov r8, r8)
 800d124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d126:	bc08      	pop	{r3}
 800d128:	469e      	mov	lr, r3
 800d12a:	4770      	bx	lr
